<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Electron on Aveek's Blog</title><link>https://home.aveek.io/blog/tags/electron/</link><description>Recent content in Electron on Aveek's Blog</description><generator>Hugo -- gohugo.io</generator><managingEditor>aveek.s98@gmail.com (Aveek Saha)</managingEditor><webMaster>aveek.s98@gmail.com (Aveek Saha)</webMaster><lastBuildDate>Sun, 24 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://home.aveek.io/blog/tags/electron/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting started with Svelte and Electron</title><link>https://home.aveek.io/blog/post/electron-svelte/</link><pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/electron-svelte/</guid><description>&lt;p>The code for this tutorial can be found &lt;a href="https://gitlab.com/aveeksaha/electron-svelte">&lt;code>here&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This is a guide to get you up and running with &lt;a href="https://svelte.dev/">&lt;code>Svelte&lt;/code>&lt;/a> + &lt;a href="https://www.electronjs.org/">&lt;code>Electron&lt;/code>&lt;/a>. We&amp;rsquo;ll just be going through the basic setup process to give you a starting point to develop desktop applications with Svelte by using Electron. If you want to learn more about Svelte basics you can check out this tutorial here: &lt;a href="https://home.aveek.io/blog/post/get-started-with-svelte/">Get started with Svelte&lt;/a>.&lt;/p>
&lt;p>You can follow this tutorial even if you&amp;rsquo;re not too familiar with Svelte because we&amp;rsquo;ll just be setting things up for the project here.&lt;/p>
&lt;h1 id="create-a-svelte-app">Create a Svelte app&lt;/h1>
&lt;p>To get started we&amp;rsquo;ll first be cloning the Svelte boilerplate using a tool called &lt;code>degit&lt;/code>. Let&amp;rsquo;s start by installing &lt;code>degit&lt;/code> using&lt;/p>
&lt;pre>&lt;code>npm install -g degit
&lt;/code>&lt;/pre>&lt;p>Then we install the boilerplate and install all the dependencies.&lt;/p>
&lt;pre>&lt;code>npx degit sveltejs/template svelte_electron
cd svelte_electron
npm install
&lt;/code>&lt;/pre>&lt;p>To run the dev server run:&lt;/p>
&lt;pre>&lt;code>npm run dev
&lt;/code>&lt;/pre>&lt;p>When you open http://localhost:5000, you should see a default web page. This means that the setup was successful!&lt;/p>
&lt;h1 id="set-up-electron">Set up Electron&lt;/h1>
&lt;p>Now we&amp;rsquo;ll install &lt;code>electron&lt;/code> as a development dependency.&lt;/p>
&lt;pre>&lt;code>npm i -D electron@latest
&lt;/code>&lt;/pre>&lt;p>Then we&amp;rsquo;ll install &lt;code>electron-reload&lt;/code> and &lt;code>electron-is-dev&lt;/code> for some quality of life improvement during development. &lt;code>electron-reload&lt;/code> will let us watch files and reload the electron app automatically to reflect changes we make to the code. &lt;code>electron-is-dev&lt;/code> will allow us to detect if the application is running in production or development.&lt;/p>
&lt;pre>&lt;code>npm i -D electron-reload electron-is-dev
&lt;/code>&lt;/pre>&lt;p>Now we need to create an entry point for our electron app. Create a file called &lt;code>main.js&lt;/code> with the following code.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">BrowserWindow&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;electron&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;path&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;url&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">isDev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;electron-is-dev&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// If in development use electron-reload to watch for
&lt;/span>&lt;span class="c1">// changes in the current directory
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isDev&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;electron-reload&amp;#39;&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="nx">__dirname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">electron&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">__dirname&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">/node_modules/electron`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">createWindow&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Create the browser window with node integration
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">win&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">BrowserWindow&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">800&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">height&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">600&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">webPreferences&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">nodeIntegration&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">loadURL&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">pathname&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">__dirname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;public/index.html&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">protocol&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;file:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">slashes&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Open the DevTools only if app is in development
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// If in production, don&amp;#39;t show.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isDev&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">webContents&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">openDevTools&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">whenReady&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">createWindow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;activate&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">BrowserWindow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getAllWindows&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">createWindow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;window-all-closed&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">platform&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s1">&amp;#39;darwin&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">quit&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we need to set up some scripts in our &lt;code>package.json&lt;/code> and define the Electron entry point.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span> &lt;span class="err">....&lt;/span>
&lt;span class="nt">&amp;#34;main&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;main.js&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="err">...&lt;/span>
&lt;span class="nt">&amp;#34;app&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;electron .&amp;#34;&lt;/span>
&lt;span class="err">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="err">....&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There&amp;rsquo;s one last step before your application can be rendered. In &lt;code>public/index.html&lt;/code> we need to make the urls absolute so that Electron doesn&amp;rsquo;t give us a resource not found error while loading the page.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;viewport&amp;#39;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;width=device-width,initial-scale=1&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Svelte app&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;icon&amp;#39;&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;image/png&amp;#39;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;favicon.png&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;stylesheet&amp;#39;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;global.css&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;stylesheet&amp;#39;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;build/bundle.css&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">defer&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;build/bundle.js&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run &lt;code>npm run build&lt;/code> to create the compiled JavaScript and CSS files in the &lt;code>public/build/&lt;/code> directory.&lt;/p>
&lt;p>Now if you run &lt;code>npm run app&lt;/code> you should see the same default welcome page you saw on your browser in an Electron window.&lt;/p>
&lt;h1 id="live-reload-both-electron-and-svelte">Live reload both electron and Svelte&lt;/h1>
&lt;p>The way the application is set up now, You could run &lt;code>npm run dev&lt;/code> in one terminal to enable live reload for Svelte, and &lt;code>npm run app&lt;/code> in another terminal to load the electron app. This is a little inconvenient and we can combine both these functions and run them simultaneously.&lt;/p>
&lt;p>For this we&amp;rsquo;ll be using &lt;a href="https://www.npmjs.com/package/concurrently">&lt;code>concurrently&lt;/code>&lt;/a>. So we&amp;rsquo;ll first install it and then update our scripts in &lt;code>package.json&lt;/code>.&lt;/p>
&lt;pre>&lt;code>npm i -D concurrently
&lt;/code>&lt;/pre>&lt;p>Then we&amp;rsquo;ll create a script to run both Svelte and Electron parallelly.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="err">...&lt;/span>
&lt;span class="nt">&amp;#34;app-dev&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;concurrently \&amp;#34;npm:dev\&amp;#34; \&amp;#34;npm:app\&amp;#34;&amp;#34;&lt;/span>
&lt;span class="err">...&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By running &lt;code>npm run app-dev&lt;/code> you can live reload both Electron and Svelte!&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Now you have a starting point to start building your Electron apps with Svelte at the frontend. While there are some starter templates available, the setup process for this is pretty straightforward and easy to do by yourself.&lt;/p>
&lt;p>If you&amp;rsquo;re interested in learning Svelte you can check out this tutorial here: &lt;a href="https://home.aveek.io/blog/post/get-started-with-svelte/">Get started with Svelte&lt;/a>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Pixel Weather</title><link>https://home.aveek.io/blog/post/pixel-weather/</link><pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/pixel-weather/</guid><description>&lt;p>Get the code here - &lt;a href="https://github.com/Aveek-Saha/pixel-weather">&lt;code>Pixel Weather&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
To try it out, download it here - &lt;a href="https://github.com/Aveek-Saha/pixel-weather/releases">&lt;code>Downloads&lt;/code>&lt;/a>&lt;/p>
&lt;h3 id="pixel-weather-is-a-small-and-compact-8-bit-style-weather-widget-designed-for-your-desktop">Pixel weather is a small and compact 8 bit style weather widget designed for your desktop.&lt;/h3>
&lt;h1 id="features">Features&lt;/h1>
&lt;ul>
&lt;li>It&amp;rsquo;s transparent background allows it to blend in with your current setup&lt;/li>
&lt;li>Always stays on your desktop so it won&amp;rsquo;t get in your way. This means it&amp;rsquo;s hidden when you switch windows with &lt;code>alt+tab&lt;/code>&lt;/li>
&lt;li>Switch between dark mode and light mode, for lighter and darker backgrounds respectively.&lt;/li>
&lt;li>Clean interface, with no clutter, all options can be accessed by right clicking.&lt;/li>
&lt;/ul>
&lt;h1 id="how-to-use">How to use&lt;/h1>
&lt;ul>
&lt;li>Install the package.&lt;/li>
&lt;li>Sign up and get your API key from the &lt;a href="https://darksky.net/dev">&lt;code>Dark Sky&lt;/code>&lt;/a> console.&lt;/li>
&lt;li>When you open the app for the first time, a settings menu pops up, paste your API key there.&lt;/li>
&lt;li>You can also change how often the weather is updated.&lt;/li>
&lt;li>After submitting the settings, right click, refresh and wait for the weather to update.&lt;/li>
&lt;li>You can choose where to place the widget by choosing from the Position menu.&lt;/li>
&lt;li>The menu can be accessed by right clicking anywhere on the widget.&lt;/li>
&lt;/ul>
&lt;h1 id="screenshots">Screenshots&lt;/h1>
&lt;p>&lt;img src="https://home.aveek.io/blog/pixelweather/screenshot1.png" alt="Screenshot1">&lt;/p>
&lt;p>&lt;img src="https://home.aveek.io/blog/pixelweather/screenshot2.png" alt="Screenshot2">&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Dusk Player</title><link>https://home.aveek.io/blog/post/music-player/</link><pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/music-player/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/MusicPlayer">&lt;code>Music Player&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demo, Download it here - &lt;a href="https://github.com/Aveek-Saha/MusicPlayer/releases">&lt;code>Downloads&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The idea for this music player was to keep things simple. you just load all your audio files from your music player, and start listening. The player always keeps the focus on the music.
Apart from the essential music controls, like play, pause, skip and seek, there is a playlist menu so that you can quickly switch songs.
It is built on Electron and uses Howler for handling music playback. AngularJS and Bootstrap are used for the UI, and JSmediatags to retrieve the ID3 tags, like album art, artist and title.&lt;/p>
&lt;h1 id="using-the-player">Using the player&lt;/h1>
&lt;p>On starting the music player, you’ll see an option called folder in the top menu, click on it. Select the folder with all your music, and your set to go. the player will automatically load all the supported audio files into a playlist. It also stores the location of the directory you last opened, and it&amp;rsquo;ll load your music from there when you open it next.&lt;/p>
&lt;p>The UI is fairly intuitive, there are play pause and skip buttons. Clicking on the progress bar will seek playback to that position in the song. There is a volume slider to fine tune the volume. The hamburger menu button toggles the playlist. And the last button is to shuffle tracks.&lt;/p>
&lt;h1 id="implementation">Implementation&lt;/h1>
&lt;p>The entire implementation is too long, so I&amp;rsquo;ll just give an outline here. The full code is at &lt;a href="https://github.com/Aveek-Saha/MusicPlayer">&lt;code>Music Player&lt;/code>&lt;/a>&lt;/p>
&lt;p>The user selects the folder with music in it via Electron’s dialog module. This is used to open a directory selector, when a directory is selected it returns a path to that directory which is then passed to a function. This function then uses the path to scan the directory and store the paths of all the files with supported extensions in a playList array.
The path of the selected directory is stored in a file, which will be read in the future so that the user doesn&amp;rsquo;t have to select a directory everytime.&lt;/p>
&lt;p>The actual audio playback is handled through Howler, which provides us with methods like Play, Pause, Seek, Skip and volume adjustment. These methods are implemented in the Player object prototype.
The functions implemented are-&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">play&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Play the song at playlist[index]
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">pause&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Pause all audio playback
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">skip&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">direction&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// skip to the next/previous/random track,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// calls skipTo
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">skipTo&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// stop whatever song is playing and
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// play the song that has been skipped to
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">step&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// as the song is playing, change the timer value
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// and move the progress bar
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">formatTime&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">secs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// by default the time is in seconds,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// so convert it into mins:seconds format
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">volume&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// volume tuning
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">seek&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// move the song along to the place
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// the user clicked on the progressbar
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Most audio files have some kind of metadata attached to them in the form of media tags. This metadata includes things like Title, Artist, Album and Album art.&lt;/p>
&lt;p>These tags are read using JSmediatags using which we retrieve the name of the song, the artist and the album art. the album art is decoded from base64 and displayed as an image. If there are no media tags for a file, it simply displays the file name.&lt;/p>
&lt;h1 id="features">Features&lt;/h1>
&lt;ul>
&lt;li>Supports: mp3, opus, ogg, wav, aac, m4a, webm.&lt;/li>
&lt;li>Quickly switch tracks in the same folder, from the playlist button.&lt;/li>
&lt;li>Play tracks on shuffle.&lt;/li>
&lt;li>Loads music from the last selected directory.&lt;/li>
&lt;li>Fine tune the volume from the volume slider.&lt;/li>
&lt;li>Reads ID3 tags and displays the artist and album art (if they exist).&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Bitcoin Price Tracker</title><link>https://home.aveek.io/blog/post/bitcoin-price-tracker/</link><pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/bitcoin-price-tracker/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/Bitcoin-price-tracker">&lt;code>Bitcoin Price Tracker&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demo, Download it here - &lt;a href="https://github.com/Aveek-Saha/Bitcoin-price-tracker/releases">&lt;code>Downloads&lt;/code>&lt;/a>&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This application was something of a test run, to get familiar with the Electron framework . For those of you that haven’t heard of it, Electron is a framework that allows you to build cross platform desktop apps with JavaScript, HTML, and CSS.&lt;/p>
&lt;p>Full disclosure, this was made by following a great tutorial by Gary Simon. Do check it out, he does a good job of explaining the basics and anyone with some experience in web development should be able to pick it up with no problem.&lt;/p>
&lt;h2 id="details">Details&lt;/h2>
&lt;p>I wont go into too much technical detail here, because the tutorial already does that far better than I could, but the basic idea is to make a simple desktop application for Linux, that notifies you when the Bitcoin price exceeds a limit set by you. Unfortunately, the notifications will only work in Linux and Mac OS, but not Windows because the notification system for non system apps was broken after the last update.&lt;/p>
&lt;p>The application uses axios to get the current bitcoin price from cryptocompare. Then we create a function called getBTC, which fetches the bitcoin price and then compares it to the value entered by the user. This function is executed every 10 seconds via setInterval. If the bitcoin price is found to be greater than the user value, a desktop notification is sent.&lt;/p>
&lt;p>The user enters the Price limit via another window, and the value entered by the user is sent back to the main window via the ipc.renderer.&lt;/p>
&lt;!-- raw HTML omitted --></description></item></channel></rss>