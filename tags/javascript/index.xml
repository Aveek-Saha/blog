<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on Aveek's Blog</title><link>https://home.aveek.io/blog/tags/javascript/</link><description>Recent content in JavaScript on Aveek's Blog</description><generator>Hugo -- gohugo.io</generator><managingEditor>aveek.s98@gmail.com (Aveek Saha)</managingEditor><webMaster>aveek.s98@gmail.com (Aveek Saha)</webMaster><lastBuildDate>Thu, 20 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://home.aveek.io/blog/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Making an online chess app with FireBase</title><link>https://home.aveek.io/blog/post/online-chess-firebase-svelte/</link><pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/online-chess-firebase-svelte/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/FireChess">&lt;code>FireChess&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
Check out the code in action here, play it yourself - &lt;a href="http://firechess0.web.app/">&lt;code>Live demo&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This is a follow up to my Online-Chess project where I created a chess website using sockets and hosted it on Heroku. However you don&amp;rsquo;t need any prior knowledge of that project to follow along.&lt;/p>
&lt;p>In this tutorial you&amp;rsquo;ll learn how to build a basic online Chess platform with multiple rooms with Firebase and Svelte.&lt;/p>
&lt;h2 id="whats-wrong-with-online-chess">What&amp;rsquo;s wrong with Online-Chess?&lt;/h2>
&lt;p>At the time I had created the project as a showcase for websockets first and as an actual place to play chess second. However this project has had far more users on the website playing chess than I anticipated and I kept running out of resources for the free Heroku tier. This meant that I got a lot of complaints that the website was inaccessible.&lt;/p>
&lt;p>FireChess is another approach to this problem that solves a lot of issues and adds more functionality.&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1></description></item><item><title>Create a bot that updates a pinned gist</title><link>https://home.aveek.io/blog/post/pinned-gist-bot/</link><pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/pinned-gist-bot/</guid><description>&lt;p>Get the code here: &lt;a href="https://github.com/Aveek-Saha/blog-box">&lt;code>blog-box&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>I recently came across this &lt;a href="https://github.com/matchai/awesome-pinned-gists">awesome list for pinned gists&lt;/a> and it piqued my curiosity. So this is basically a collection of repositories that allow you to automatically update a gist periodically with some information. This gist can then be pinned to your GitHub page for people to see when they visit your profile.&lt;/p>
&lt;p>For those of you that havent heard of gists, they&amp;rsquo;re a service provided by GitHub, you can check it out &lt;a href="https://gist.github.com/">here&lt;/a>. They&amp;rsquo;re basically a collection of files that can be forked and cloned like a GitHub repo.&lt;/p>
&lt;p>These periodically updating pinned gists have a nickname, &lt;strong>boxes&lt;/strong>. Some examples of what you can put on these gists from &lt;code>awesome-pinned-gists&lt;/code> include, your &lt;a href="https://github.com/matchai/bird-box">most recent tweet&lt;/a>, &lt;a href="https://github.com/jacc/music-box">weekly music listening report&lt;/a>, &lt;a href="https://github.com/mdluo/goodreads-box">books you&amp;rsquo;re currently reading&lt;/a>, etc.&lt;/p>
&lt;p>Basically if you know a service that has an API you can display it on a pinned gist. In this tutorial I&amp;rsquo;ll show you how to create a gist that updates regularly with Your latest Dev.to blog post, but this method can be adapted for any service with an API. You&amp;rsquo;re only limited by your imagination and publicly available APIs.&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;p>This tutorial will have four parts-&lt;/p>
&lt;ol>
&lt;li>Setup all the prerequisites before you start coding.&lt;/li>
&lt;li>Programatically update a gist.&lt;/li>
&lt;li>Get data from the API and update the gist.&lt;/li>
&lt;li>Setup a GitHub workflow to auto update.&lt;/li>
&lt;/ol>
&lt;h2 id="1-prerequisites">1. Prerequisites&lt;/h2>
&lt;h3 id="create-a-github-token">Create a GitHub token&lt;/h3>
&lt;p>Create a new personal access token at &lt;a href="https://github.com/settings/tokens">https://github.com/settings/tokens&lt;/a> and remember to save the token somewhere because you can only see it once.&lt;/p>
&lt;h3 id="creating-the-gist">Creating the Gist&lt;/h3>
&lt;p>The first thing we need to do is create a gist. So go to &lt;a href="https://gist.github.com/">https://gist.github.com/&lt;/a> and make one, create a file, name it whatever you want, and add whatever description and content you want for now. You&amp;rsquo;ll need to add some content to the file because you can&amp;rsquo;t create an empty gist.&lt;/p>
&lt;p>Once you&amp;rsquo;ve created a gist, the url will look something like this &lt;code>https://gist.github.com/&amp;lt;username&amp;gt;/&lt;/code> &lt;strong>&lt;code>&amp;lt;gist id&amp;gt;&lt;/code>&lt;/strong>. Copy this gist id and keep it somewhere for later use.&lt;/p>
&lt;h3 id="setup-the-project">Setup the project&lt;/h3>
&lt;p>Create a new repository on GitHub, clone it to your local setup and make it your working directory. Then we&amp;rsquo;ll set up npm, answer the questions asked and it should create a &lt;code>package.json&lt;/code> for you.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm init
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we&amp;rsquo;ll create the other two important files in this project, &lt;code>index.js&lt;/code> which will be our main file and &lt;code>action.yml&lt;/code>, which we&amp;rsquo;ll be using later when we&amp;rsquo;re setting up the GitHub action. We also need to create a &lt;code>.env&lt;/code> file that has our environment variables for local development.&lt;/p>
&lt;h3 id="install-the-dependencies">Install the dependencies&lt;/h3>
&lt;p>We&amp;rsquo;ll need a few packages for this project, how they&amp;rsquo;re used will become clear as you progress through this tutorial&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm i @octokit/rest axios dotenv wrap-ansi
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-updating-the-gist">2. Updating the Gist&lt;/h2>
&lt;h3 id="environment-variables">Environment variables&lt;/h3>
&lt;p>Before we do anything else, first add the environment variables to the &lt;code>.env&lt;/code> file. You can keep the &lt;code>DEV_USERNAME&lt;/code> field empty for now.&lt;/p>
&lt;p>You can store any API keys or secrets in this file. This file won&amp;rsquo;t be pushed to your repo, instead you&amp;rsquo;ll have to add the variables in this file as secrets under repository settings. Since I&amp;rsquo;m using the dev.to API, which doesn&amp;rsquo;t need an API key to get posts, I&amp;rsquo;m storing the username which is the only parameter you need to retrieve posts.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="nx">GIST_ID&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;Your gist id&amp;gt;&amp;#34;&lt;/span>
&lt;span class="nx">GH_TOKEN&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;Your github token&amp;gt;&amp;#34;&lt;/span>
&lt;span class="nx">DEV_USERNAME&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="main-script">Main script&lt;/h3>
&lt;p>Now we&amp;rsquo;ll write some code to update the gist we&amp;rsquo;ve created. Add this to &lt;code>index.js&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;dotenv&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Octokit&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;@octokit/rest&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Get the environment variables
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">GIST_ID&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">GH_TOKEN&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">githubToken&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">DEV_USERNAME&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">devUsername&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Authentication
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">octokit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Octokit&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">auth&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`token &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">githubToken&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// Function to update the gist contents
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">updateGist&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">gist&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get the gist you made using the gist id
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">octokit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gists&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">gist_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unable to get gist&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Only one file was created, so fetch it&amp;#39;s filename
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">filename&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">gist&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Update the gist
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// The description is displayed when the gist is pinned
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// so we can update the description along with the contents
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// to show more information when it&amp;#39;s pinned
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">octokit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gists&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">update&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">gist_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">description&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`This is some description`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">files&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`This is some example content`&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unable to update gist&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">updateGist&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">})();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To test whether this script works, run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">node index.js
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you check your gist, the description and content should have updated to whatever strings you passed to the update functions.&lt;/p>
&lt;h2 id="3-fetching-the-data">3. Fetching the data&lt;/h2>
&lt;p>Now we&amp;rsquo;re going to shift our focus to getting the most recent post from our dev.to account. In &lt;code>index.js&lt;/code> update/add these functions.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="c1">// The endpoint for the request
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">baseURL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;https://dev.to/api/articles&amp;#39;&lt;/span>
&lt;span class="c1">// Parameters to pass to the dev.to api
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">params&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">username&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">devUsername&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// This is useful if the string is too long to display on the pinned gist
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">truncate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">substr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;…&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="c1">// Get the most recent post
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">getPost&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">axios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">baseURL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">post&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">// Pass the post as a parameter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">updateGist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Pass the post as a parameter
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">updateGist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">gist&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">gist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">octokit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gists&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">gist_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unable to get gist&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">filename&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">gist&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">// Tags from the post
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">tags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tag_list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;, #&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// In the gist show the title, a short excerpt from the post
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// and the date the post was published in the contents of the gist
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sb">`📜 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">truncate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">title&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\s+/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n ▶ &lt;/span>&lt;span class="si">${&lt;/span>
&lt;span class="nx">truncate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">description&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\s+/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n🔖 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">tags&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n📆 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readable_publish_date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\s+/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// In the post description show the username, number of likes and comments
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">octokit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gists&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">update&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">gist_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">description&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`dev.to/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">devUsername&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> | ❤ &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">public_reactions_count&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> | 💬 &lt;/span>&lt;span class="si">${&lt;/span>
&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">comments_count&lt;/span>
&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">files&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">wrapAnsi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">content&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">hard&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">trim&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unable to update gist&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">getPost&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">})();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>wrapAnsii&lt;/code> library is used to wrap text that&amp;rsquo;s longer than a certain length. Otherwise the text will be abruptly cut off if it&amp;rsquo;s too long when pinned.&lt;/p>
&lt;p>Pin the gist to your profile and then run this script. You should get something that looks like this.&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/31800695/95653499-c52a4580-0b16-11eb-863a-e23c43e4ae21.png" alt="Screenshot">&lt;/p>
&lt;p>If you want to use a different API this step will vary for you, but the basic idea is still the same. Extract the data you need from the API and pass it to the update function so that it can display it on the gist.&lt;/p>
&lt;h2 id="4-setup-github-action">4. Setup GitHub Action&lt;/h2>
&lt;p>Now we have a script that updates our pinned gist with the desired blog post, but we&amp;rsquo;re running it manually. Now we&amp;rsquo;ll set up a GitHub action with a cron job so that it runs on a schedule and updates automatically.&lt;/p>
&lt;h3 id="setup-run-command">Setup run command&lt;/h3>
&lt;p>In &lt;code>action.yml&lt;/code> we&amp;rsquo;ll set up node and the file that should be run using node.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>blog-box&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">author&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&amp;lt;your-username&amp;gt;&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>GitHub&lt;span class="w"> &lt;/span>Action&lt;span class="w"> &lt;/span>for&lt;span class="w"> &lt;/span>updating&lt;span class="w"> &lt;/span>a&lt;span class="w"> &lt;/span>gist&lt;span class="w"> &lt;/span>with&lt;span class="w"> &lt;/span>your&lt;span class="w"> &lt;/span>latest&lt;span class="w"> &lt;/span>blog&lt;span class="w"> &lt;/span>post.&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">runs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">using&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>node12&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">main&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>./index.js&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="setup-workflow">Setup workflow&lt;/h3>
&lt;p>Create a new folder under &lt;code>.github/workflows/&lt;/code> and add a GitHub action file named &lt;code>update.yml&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Update&lt;span class="w"> &lt;/span>gist&lt;span class="w"> &lt;/span>with&lt;span class="w"> &lt;/span>latest&lt;span class="w"> &lt;/span>songs&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># THis option allows you to run the script manually&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">workflow_dispatch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># This sets up a cron job that runs the script once a day&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">schedule&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">cron&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0 0 * * *&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Create a job&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">blog-box&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>ubuntu-latest&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>actions/checkout@v2&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Install dependencies&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>npm&lt;span class="w"> &lt;/span>install&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Update&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>./&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Use the secrets as environment variables&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">GH_TOKEN&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>${{&lt;span class="w"> &lt;/span>secrets.GH_TOKEN&lt;span class="w"> &lt;/span>}}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">GIST_ID&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>${{&lt;span class="w"> &lt;/span>secrets.GIST_ID&lt;span class="w"> &lt;/span>}}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEV_USERNAME&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>${{&lt;span class="w"> &lt;/span>secrets.DEV_USERNAME&lt;span class="w"> &lt;/span>}}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to find out more about cron jobs and how to schedule them, check out this website: &lt;a href="https://crontab.guru/">https://crontab.guru/&lt;/a>.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Once you push your changes, go to &lt;code>actions &amp;gt; Update gist with latest post &amp;gt; Run workflow&lt;/code> in your GitHub repository. The action should run successfully and your pinned gist will show your most recent &lt;code>dev.tp&lt;/code> blog post. The workflow will run at 00:00 UTC automatically every day.&lt;/p></description></item><item><title>Getting started with Firebase Functions</title><link>https://home.aveek.io/blog/post/getting-started-with-firebase-functions/</link><pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/getting-started-with-firebase-functions/</guid><description>&lt;p>Check the final application out here - &lt;a href="pix2ascii.web.app">&lt;code>pix2ascii&lt;/code>&lt;/a>.&lt;/p>
&lt;p>The full code for this project can be found on &lt;a href="https://github.com/Aveek-Saha/pix2ascii">&lt;code>GitHub&lt;/code>&lt;/a>
or read the next part here: &lt;a href="https://home.aveek.io/blog/post/deploy-svelte-firebase/">&lt;code>Deploying Svelte apps to Firebase with GitHub actions&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="what-are-firebase-functions">What are Firebase functions?&lt;/h1>
&lt;p>From the &lt;a href="https://firebase.google.com/docs/functions">documentation&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Cloud Functions for Firebase is a serverless framework that lets you automatically run backend code in response to events triggered by Firebase features and HTTPS requests.&lt;/p>
&lt;/blockquote>
&lt;p>What this means is essentially you can write code that will run when certain events take place. These events can be http requests or an event triggered by another firebase service, like their database or storage solution. This means that you can essentially write server side code without having to worry about the specifics of managing and scaling servers, which makes life a lot easier as a developer.&lt;/p>
&lt;p>Not all servers can be replaced by cloud functions especially since only JavaScript or Typescript is supported for Firebase as of now. However there are a lot of simple tasks that you might have been considering using a server for, that can be handled by a cloud function.&lt;/p>
&lt;p>To demonstrate how to use Firebase cloud functions we’ll be creating a simple application. In this application you can upload an image which will be converted to ascii art. Probably not the most useful application in the world, but a fun project to help you get started with firebase functions. The backend of this application will only use Firebase cloud functions and for the frontend we’ll be using Svelte.&lt;/p>
&lt;p>I’ll be tackling the Frontend in another post so stay tuned for that. So in this tutorial you’ll learn how to create and deploy a Firebase function.&lt;/p>
&lt;h1 id="set-up-firebase">Set up Firebase&lt;/h1>
&lt;p>Before we start you’ll need an account to log in to the &lt;a href="https://console.firebase.google.com/">&lt;code>Firebase Console&lt;/code>&lt;/a>, and then you can follow the steps below.&lt;/p>
&lt;h3 id="1-create-a-firebase-project-">1. Create a Firebase project-&lt;/h3>
&lt;p>Go to the firebase console and create a new project. You can choose to set up Google analytics for the project, but it’s not really important for this application.&lt;/p>
&lt;h3 id="2-set-up-firebase-cli-">2. Set up Firebase CLI-&lt;/h3>
&lt;p>You’ll need to have Node.js installed already on your system. Install the cli through npm by running &lt;code>npm install -g firebase-tools&lt;/code>&lt;/p>
&lt;h3 id="3-initialize-the-firebase-sdk-">3. Initialize the Firebase SDK-&lt;/h3>
&lt;p>Run &lt;code>firebase login&lt;/code> to log in to the CLI via the browser using the account your new project is linked to.&lt;/p>
&lt;h3 id="4-initialize-the-project-">4. Initialize the project-&lt;/h3>
&lt;p>Create a new working directory for this project and navigate to that directory. Then run &lt;code>firebase init functions&lt;/code>.&lt;/p>
&lt;p>During the setup, Use an existing project, and select the project you’d created through the console in the step before. Select JavaScript as the language and pick install dependencies using npm when it offers you the option. Once all the dependencies have finished installing you’re ready for the next step!&lt;/p>
&lt;h1 id="creating-the-firebase-function">Creating the Firebase function&lt;/h1>
&lt;p>If the setup went correctly you should be seeing a folder called &lt;code>functions&lt;/code>. This is where the code for our function will be, specifically in &lt;code>index.js&lt;/code>.&lt;/p>
&lt;h2 id="the-api">The API&lt;/h2>
&lt;p>We’ll be setting up a basic Express server with only one endpoint that receives the uploaded image and then using this Express app as a cloud function. First install the required modules&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm i
npm i express busboy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to test the function locally, run &lt;code>firebase serve&lt;/code> and then use the url specified in the console to test the function.&lt;/p>
&lt;p>We’ll be uploading an image using a multipart form. Unfortunately common middleware for this purpose like Multer and Formidable don&amp;rsquo;t work properly with express in Cloud functions, so we’ll have to use a method shown in the &lt;a href="https://cloud.google.com/functions/docs/writing/http#multipart_data">documentation&lt;/a> that uses Busboy. The documentation does a pretty good job of explaining the code, so I’ll just be copying it here in &lt;code>index.js&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">functions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;firebase-functions&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">express&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;express&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">cors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;cors&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">Busboy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;busboy&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;path&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">os&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;os&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">express&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">runtimeOpts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">timeoutSeconds&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">120&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Automatically allow cross-origin requests
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cors&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">origin&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="p">}));&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">busboy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Busboy&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">headers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">headers&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">tmpdir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tmpdir&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">fields&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">uploads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="nx">busboy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;field&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">fieldname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Processed field &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">fieldname&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">.`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">fields&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">fieldname&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">val&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">fileWrites&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;span class="c1">// This code will process each file uploaded.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">busboy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;file&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">fieldname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filename&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Processed file &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">filepath&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tmpdir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filename&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">uploads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">fieldname&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">filepath&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">writeStream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createWriteStream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">filepath&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">writeStream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">promise&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;end&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">writeStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="nx">writeStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;finish&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">writeStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;error&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="nx">fileWrites&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">promise&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="nx">busboy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;finish&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fileWrites&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">file&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">uploads&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">uploads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unlinkSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">uploads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="nx">busboy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rawBody&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// Expose Express API as a single Cloud Function:
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">exports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ascii&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">functions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">runtimeOpts&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">https&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">app&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So now if we test the function using a service like Insomnia or Postman by uploading an image in a multi part form the path to the image uploaded should be logged in the console!&lt;/p>
&lt;h2 id="image-to-ascii">Image to ASCII&lt;/h2>
&lt;p>We’ll be creating a separate module for the logic to convert the image the user uploads to ASCII art. To convert the image we’ll be using a module called &lt;code>Jimp&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm i jimp
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a new file called &lt;code>img2ascii.js&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Jimp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;jimp&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Export the function so we can call it from the cloud function
&lt;/span>&lt;span class="c1">// The function takes the filepath, the dimensions of the image
&lt;/span>&lt;span class="c1">// and the kind of ascii art as parameters
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">exports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">convert&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Different kinds of character sets for visually different ends results
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">greyscale&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">gscale_70&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;@$B%8&amp;amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1{}[]?-_+~&amp;lt;&amp;gt;i!lI;:,\&amp;#34; ^`&amp;#39;. &amp;#34;&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">reverse&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">gscale_10&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;@%#*+=-:. &amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">reverse&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">gscale_block&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34; ░▒▓█&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">gscale&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">greyscale&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">norm_factor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">gscale&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>
&lt;span class="c1">// Jimp.read returns a promise, so we&amp;#39;ll pass that on
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">Jimp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">image&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Since the letters are almost twice as tall as they are wide,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// we&amp;#39;ll be scaling the height and then dividing by 2 so that the
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// result isn&amp;#39;t abnormally tall and proportions are preserved
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">round&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">width&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nx">image&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">resize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">height&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// resize
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nx">greyscale&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// set greyscale
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="nx">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">idx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">red&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">idx&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">green&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">idx&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">blue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">idx&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">alpha&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">idx&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">rgba&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">red&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">green&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">blue&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">alpha&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">intensity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rgba&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">norm_factor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="c1">// Map intensity to a character
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">gscale&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">intensity&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">matrix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;span class="c1">// Reshape the array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">matrix&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">splice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">width&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">toWrite&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="c1">// Convert the array to a string
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">matrix&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">element&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">toWrite&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">element&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">toWrite&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now to convert the image the user has passed to the function, we have to make a few changes to &lt;code>index.js&lt;/code>.&lt;/p>
&lt;p>Import the module we just created.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="p">...&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">p2a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./img2ascii.js&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To take the file passed and do the conversion, modify this part of the cloud function&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="p">...&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="nx">busboy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;finish&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fileWrites&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">art&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">file&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">uploads&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Call the conversion function on the file that&amp;#39;s been passed along with the other parameters
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">ascii&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">p2a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">convert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">uploads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nb">parseInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fields&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;width&amp;#39;&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="nx">fields&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;charset&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="c1">// Store the result in an array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">art&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ascii&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unlinkSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">uploads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Since we&amp;#39;re only allowing one file to be uploaded
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">art&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this stage if you test your function using Insomnia or Postman to create a multi part form, with an image, the width and the charset fields, and send it, you should see a string of ascii characters that represent your image being sent back in the response. We’re now ready for the next step!&lt;/p>
&lt;h1 id="deploy">Deploy&lt;/h1>
&lt;p>To deploy the function just run this command in the &lt;code>functions&lt;/code> folder.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">firebase deploy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the application has been deployed, the CLI will give you a public url that you can access from anywhere. It should look something like this. &lt;code>https://us-central1-pix2ascii.cloudfunctions.net/ascii&lt;/code>. You can test this deployed function in the same way you were testing it locally, just replace the url.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>We’ve now successfully created and deployed a function to firebase that we can use to convert an image to ASCII art. If all you want is the backend then that’s all you need.&lt;/p>
&lt;p>You’re free to use any hosting service along with any framework of your choice for the web UI. If you want to also learn how to build and deploy a svelte application to Firebase and automate the process using GitHub actions, be sure to look out for the next part of this tutorial.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Pixel Weather</title><link>https://home.aveek.io/blog/post/pixel-weather/</link><pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/pixel-weather/</guid><description>&lt;p>Get the code here - &lt;a href="https://github.com/Aveek-Saha/pixel-weather">&lt;code>Pixel Weather&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
To try it out, download it here - &lt;a href="https://github.com/Aveek-Saha/pixel-weather/releases">&lt;code>Downloads&lt;/code>&lt;/a>&lt;/p>
&lt;h3 id="pixel-weather-is-a-small-and-compact-8-bit-style-weather-widget-designed-for-your-desktop">Pixel weather is a small and compact 8 bit style weather widget designed for your desktop.&lt;/h3>
&lt;h1 id="features">Features&lt;/h1>
&lt;ul>
&lt;li>It&amp;rsquo;s transparent background allows it to blend in with your current setup&lt;/li>
&lt;li>Always stays on your desktop so it won&amp;rsquo;t get in your way. This means it&amp;rsquo;s hidden when you switch windows with &lt;code>alt+tab&lt;/code>&lt;/li>
&lt;li>Switch between dark mode and light mode, for lighter and darker backgrounds respectively.&lt;/li>
&lt;li>Clean interface, with no clutter, all options can be accessed by right clicking.&lt;/li>
&lt;/ul>
&lt;h1 id="how-to-use">How to use&lt;/h1>
&lt;ul>
&lt;li>Install the package.&lt;/li>
&lt;li>Sign up and get your API key from the &lt;a href="https://darksky.net/dev">&lt;code>Dark Sky&lt;/code>&lt;/a> console.&lt;/li>
&lt;li>When you open the app for the first time, a settings menu pops up, paste your API key there.&lt;/li>
&lt;li>You can also change how often the weather is updated.&lt;/li>
&lt;li>After submitting the settings, right click, refresh and wait for the weather to update.&lt;/li>
&lt;li>You can choose where to place the widget by choosing from the Position menu.&lt;/li>
&lt;li>The menu can be accessed by right clicking anywhere on the widget.&lt;/li>
&lt;/ul>
&lt;h1 id="screenshots">Screenshots&lt;/h1>
&lt;p>&lt;img src="https://home.aveek.io/blog/pixelweather/screenshot1.png" alt="Screenshot1">&lt;/p>
&lt;p>&lt;img src="https://home.aveek.io/blog/pixelweather/screenshot2.png" alt="Screenshot2">&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>YTDX</title><link>https://home.aveek.io/blog/post/ytdx/</link><pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/ytdx/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/ytdx">&lt;code>YTDX&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demo, Download it here - &lt;a href="https://github.com/Aveek-Saha/ytdx/releases">&lt;code>Downloads&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>YTDX or YouTube Downloader X is an application that allows you to download audio from YouTube videos.
Paste any valid video link into the URL bar and download the audio from the video.&lt;/p>
&lt;p>After the video is downloaded the application extracts the audio and stores it in the location you specified. The audio conversion is done by ffmpeg.&lt;/p>
&lt;h2 id="main-ui">Main UI&lt;/h2>
&lt;p>&lt;img src="https://home.aveek.io/blog/ytdx/screenshot1.png" alt="Screenshot1">&lt;/p>
&lt;h2 id="notification">Notification&lt;/h2>
&lt;p>&lt;img src="https://home.aveek.io/blog/ytdx/screenshot2.png" alt="Screenshot2">&lt;/p>
&lt;h1 id="instructions">Instructions&lt;/h1>
&lt;ul>
&lt;li>Select a folder to save the downloaded file in.&lt;/li>
&lt;li>Get a valid YouTube video URL and paste it in the URL bar.&lt;/li>
&lt;li>Choose the desired audio format and click download.&lt;/li>
&lt;li>When the file is finished downloading you&amp;rsquo;ll get a notification.&lt;/li>
&lt;li>Clicking on the notification will take you to the download location.&lt;/li>
&lt;/ul>
&lt;h2 id="available-audio-formats">Available audio formats&lt;/h2>
&lt;ul>
&lt;li>mp3&lt;/li>
&lt;li>flac&lt;/li>
&lt;li>wav&lt;/li>
&lt;li>Vorbis&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Making an online chess website with Socket.io</title><link>https://home.aveek.io/blog/post/making-an-online-chess-website-with-socketio/</link><pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/making-an-online-chess-website-with-socketio/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/Online-Chess">&lt;code>Online chess&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
Check out the code in action here, play it yourself - &lt;a href="https://chess0.herokuapp.com">&lt;code>Live demo&lt;/code>&lt;/a>&lt;/p>
&lt;p>Play the new and improved version here - &lt;a href="http://firechess0.web.app/">&lt;code>FireChess&lt;/code>&lt;/a>
Check out the new and improved codebase here - &lt;a href="https://github.com/Aveek-Saha/FireChess">&lt;code>FireChess GitHub&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In this tutorial you&amp;rsquo;ll learn how to build a basic online Chess platform with multiple rooms, where people can play against each other. We will be using Sockets to communicate between the client and the server.&lt;/p>
&lt;h3 id="note">Note:&lt;/h3>
&lt;p>At the time I had created the project as a showcase for websockets first and as an actual place to play chess second. However this project has had far more users on the website playing chess than I anticipated and I kept running out of resources for the free Heroku tier. This meant that I got a lot of complaints that the website was inaccessible.&lt;/p>
&lt;p>FireChess is another approach to this problem that solves a lot of issues and adds more functionality. Check it out here &lt;a href="http://firechess0.web.app/">&lt;code>FireChess&lt;/code>&lt;/a> if you just want a place to play chess with some friends.&lt;/p>
&lt;h1 id="socketio">Socket.io&lt;/h1>
&lt;p>From the socket.io documentation -&lt;/p>
&lt;blockquote>
&lt;p>Socket.IO is a library that enables real-time, bidirectional and event-based communication between the browser and the server.&lt;/p>
&lt;/blockquote>
&lt;p>Two important methods that you need know are-&lt;/p>
&lt;p>The &lt;code>emit&lt;/code> method emits an event and you can send data along with this event as long as it&amp;rsquo;s JSON encodable or binary data.&lt;/p>
&lt;pre>&lt;code>socket.emit('test', msg);
&lt;/code>&lt;/pre>&lt;p>The &lt;code>on&lt;/code> method listens for an event and it can receive data that has been emitted.&lt;/p>
&lt;pre>&lt;code>socket.on('test', (msg) =&amp;gt; {
console.log(msg);
});
&lt;/code>&lt;/pre>&lt;!-- raw HTML omitted -->
&lt;h1 id="file-structure">File Structure&lt;/h1>
&lt;p>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="nx">chess&lt;/span>
&lt;span class="o">|----&lt;/span>&lt;span class="nx">chessboard&lt;/span> &lt;span class="c1">// A folder for the chessboard.js library
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|----&lt;/span>&lt;span class="nx">img&lt;/span> &lt;span class="c1">// Images for the chess pieces
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|--&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span> &lt;span class="c1">// The actual game
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span> &lt;span class="c1">// The node server
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|--&lt;/span>&lt;span class="nx">full&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">html&lt;/span>
&lt;span class="o">|--&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">html&lt;/span>
&lt;span class="o">|&lt;/span>
&lt;span class="o">|--&lt;/span>&lt;span class="kr">package&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;p>Create a new project folder, cd to that directory and then run&lt;/p>
&lt;pre>&lt;code>npm init
&lt;/code>&lt;/pre>&lt;p>After that go to &lt;a href="http://chessboardjs.com/">&lt;code>Chessboard.js&lt;/code>&lt;/a> and download the latest version. Extract the contents to the &lt;code>chessboard&lt;/code> folder. Copy the &lt;code>img&lt;/code> folder from &lt;code>chessboard&lt;/code> to the root directory . We&amp;rsquo;re going to use this library to display and interact with the chessboard and the pieces.&lt;/p>
&lt;p>Now we&amp;rsquo;ll create the &lt;code>index.html&lt;/code> and &lt;code>game.js&lt;/code> files. Go to this &lt;a href="http://chessboardjs.com/examples#5003">&lt;code>Highlight Legal Moves&lt;/code>&lt;/a> example on the &lt;a href="http://chessboardjs.com/">&lt;code>Chessboard.js&lt;/code>&lt;/a> website.&lt;/p>
&lt;p>For checking valid moves, piece placement and check/checkmate detection we&amp;rsquo;ll be using another library called &lt;a href="https://github.com/jhlywa/chess.js">&lt;code>Chess.js&lt;/code>&lt;/a>. We&amp;rsquo;re going to include this via CDN in &lt;code>index.html&lt;/code>&lt;/p>
&lt;p>Copy the JavaScript section of the code into &lt;code>game.js&lt;/code>. Your File should look like this.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="kd">var&lt;/span> &lt;span class="nx">board&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">game&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Chess&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">removeGreySquares&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#board .square-55d63&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">css&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;background&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">greySquare&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">square&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">squareEl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#board .square-&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">square&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">background&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;#a9a9a9&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">squareEl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">hasClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;black-3c85d&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">background&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;#696969&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">squareEl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">css&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;background&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">background&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">onDragStart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// do not pick up pieces if the game is over
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// or if it&amp;#39;s not that side&amp;#39;s turn
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game_over&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">turn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;w&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/^b/&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">turn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/^w/&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">onDrop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">removeGreySquares&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// see if the move is legal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">move&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">move&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">from&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">to&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">promotion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;q&amp;#39;&lt;/span>
&lt;span class="c1">// NOTE: always promote to a queen for example simplicity
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="c1">// illegal move
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">move&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;snapback&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">onMouseoverSquare&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">square&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// get list of possible moves for this square
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">moves&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">moves&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">square&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">square&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">verbose&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// exit if there are no moves available for this square
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">moves&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// highlight the square they moused over
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">greySquare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">square&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// highlight the possible squares for this piece
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">moves&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">greySquare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">moves&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">onMouseoutSquare&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">square&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">removeGreySquares&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">onSnapEnd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">board&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">position&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fen&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">cfg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">draggable&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">position&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;start&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onDragStart&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onDragStart&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onDrop&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onDrop&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onMouseoutSquare&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onMouseoutSquare&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onMouseoverSquare&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onMouseoverSquare&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onSnapEnd&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onSnapEnd&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">board&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ChessBoard&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;board&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cfg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next up is &lt;code>index.html&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Chess 0&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.2/chess.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./chessboard/js/chessboard-1.0.0.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text/css&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./chessboard/css/chessboard-1.0.0.min.css&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;container&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- The chess board --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;board&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width: 500px; margin: auto&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./game.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you just double click on the &lt;code>index.html&lt;/code> file you should be able to see a simple chessboard and the pieces. You can move the pieces around, and hovering on a piece will show you the possible moves you can make. This is because of the integration with &lt;code>Chess.js&lt;/code> that does the move generation and valid move checking for us.&lt;/p>
&lt;p>In case a user tries to join a game that already has 2 players in it, we&amp;rsquo;ll redirect him to &lt;code>full.html&lt;/code>, which is just a basic html page that says the game is full.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">
&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Room Full&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css&amp;#34;&lt;/span>
&lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO&amp;#34;&lt;/span> &lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js&amp;#34;&lt;/span>
&lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy&amp;#34;&lt;/span>
&lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin: 4%&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;player&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin: auto&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>This room is full&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="packages">Packages&lt;/h1>
&lt;p>For this project we will be using only &lt;code>Express&lt;/code> and &lt;code>Socket.io&lt;/code>. To install them, run&lt;/p>
&lt;pre>&lt;code>npm install --save express
npm install --save socket.io
&lt;/code>&lt;/pre>&lt;h1 id="the-server">The Server&lt;/h1>
&lt;p>Create &lt;code>index.js&lt;/code> and require the following modules.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">express&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;express&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">http&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">socket&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;socket.io&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we&amp;rsquo;re going to declare a few variables&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="c1">// use 8080 as the default port number, process.env.PORT is
&lt;/span>&lt;span class="c1">//useful if you deploy to Heroku
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PORT&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="mi">8080&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">express&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// start the server
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">app&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// initialize a new instance of socket.io by passing the HTTP server object
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">io&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">server&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// keep track of how many players in a game (0, 1, 2)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">players&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// create an array of 100 games and initialize them
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">games&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">players&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="nx">pid&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">]};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Our routing is simple, we only need to show &lt;code>index.html&lt;/code> when &amp;ldquo;/&amp;rdquo; is accessed&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// Add the static directory for our js and css files
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">express&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">static&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">__dirname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sendFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">__dirname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;/index.html&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now its time to listen for the &lt;code>connection&lt;/code> event on the server&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;connection&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// just assign a random number to every player that has connected
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// the numbers have no significance so it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// doesn&amp;#39;t matter if 2 people get the same number
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">playerId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">playerId&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39; connected&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// if a user disconnects just print their playerID
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;disconnect&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">playerId&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39; disconnected&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;h1 id="the-client">The Client&lt;/h1>
&lt;p>Let&amp;rsquo;s turn our attention back to the client, &lt;code>index.html&lt;/code>. We&amp;rsquo;re going to add an input box where the player enters the room number he wants to join and once he hits a button, if the room is not full, he&amp;rsquo;ll join the room.&lt;/p>
&lt;p>After adding that and a few divs to display some information, we add bootstrap and the final &lt;code>index.html&lt;/code> looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Chess 0&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- Adding bootstrap--&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css&amp;#34;&lt;/span>
&lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO&amp;#34;&lt;/span> &lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js&amp;#34;&lt;/span>
&lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy&amp;#34;&lt;/span>
&lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.2/chess.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./chessboard/js/chessboard-1.0.0.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text/css&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./chessboard/css/chessboard-1.0.0.min.css&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- Adding some style --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">number&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="nd">-webkit-inner-spin-button&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">number&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="nd">-webkit-outer-spin-button&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kp">-webkit-&lt;/span>&lt;span class="k">appearance&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">#&lt;/span>&lt;span class="nn">roomNumbers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="kt">%&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;container&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- The chess board --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;board&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width: 500px; margin: auto&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin: auto&amp;#34;&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- Shows the player number and color --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34; player&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;roomNumbers&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Enter a room number between 0 and 99&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;row&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;number&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;room&amp;#34;&lt;/span> &lt;span class="na">min&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="na">max&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;99&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;form-control form-control-md number&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- A button that connects the user to the given valid room number --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;button&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;btn btn-success&amp;#34;&lt;/span> &lt;span class="na">onclick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;connect()&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Connect&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- Displays weather the game is in progress, or over --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;state&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Join Game&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./game.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we have to modify &lt;code>game.js&lt;/code> so that it communicates with the server. After initializing the socket we can communicate via the two methods mentioned earlier.&lt;/p>
&lt;p>We&amp;rsquo;ll start off modifying &lt;code>game.js&lt;/code> by adding a few variables.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="c1">// creates a new chess game using the chess.js library
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">game&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Chess&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">//initialize the socket
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">socket&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// piece color
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;white&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// number of players in the current room
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">players&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// the room number between 0 and 99
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">roomId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if the both players have joined then it will be false
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">play&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// For some DOM manipulation later
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;room&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">roomNumber&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;roomNumbers&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;button&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;state&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;h1 id="more-server-stuff">More Server Stuff&lt;/h1>
&lt;p>We set up the client side socket, and we will be able to communicate between the client and server. But before that we have a few more things to set up here, inside&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;connection&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;ll be emitting and receiving some events from the client here and after this, we&amp;rsquo;ll set up the emitters and receivers on the client side too.&lt;/p>
&lt;p>What we&amp;rsquo;ll use the for server here is basically passing on the message from one client to the other. So in most of the &lt;code>socket.on()&lt;/code> function callbacks, you&amp;rsquo;ll see a &lt;code>socket.emit&lt;/code> function, so that the server can pass on the event to the rest of the clients. since the server will emit events to all clients. The clients will know if the event was meant for them because we pass the &lt;code>roomId&lt;/code> in the message. The &lt;code>roomId&lt;/code> is checked on the client side. This method isn&amp;rsquo;t secure, but it&amp;rsquo;s fine for our small application.&lt;/p>
&lt;p>This part is added in the &lt;code>io.on('connection')&lt;/code> callback in &lt;code>index.js&lt;/code> after the playerID is generated. We&amp;rsquo;ll also add a new function on &lt;code>disconnect&lt;/code> to free up room space when players disconnect.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="kd">var&lt;/span> &lt;span class="nx">color&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// black or white
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// &amp;#39;joined&amp;#39; is emitted when the player enters a room number and clicks
&lt;/span>&lt;span class="c1">// the connect button the room ID that the player entered gets passed as a message
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;joined&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// if the room is not full then add the player to that room
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">players&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">players&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">pid&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">players&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">playerId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// else emit the full event
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;full&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">roomId&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="nx">players&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">players&lt;/span>
&lt;span class="c1">// the first player to join the room gets white
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">players&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;black&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;white&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is an important event because, once this is emitted the game
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// will be set up in the client side, and it&amp;#39;ll display the chess board
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;player&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">playerId&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">players&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">color&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">roomId&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// The client side emits a &amp;#39;move&amp;#39; event when a valid move has been made.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;move&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// pass on the move event to the other clients
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">broadcast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;move&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// &amp;#39;play&amp;#39; is emitted when both players have joined and the game can start
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;play&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">broadcast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;play&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ready &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// when the user disconnects from the server, remove him from the game room
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;disconnect&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">pid&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">playerId&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">pid&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">playerId&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">players&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">playerId&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39; disconnected&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;h1 id="back-to-the-client">Back to the Client&lt;/h1>
&lt;p>After setting up our server to relay messages back and forth from clients we set up the client to respond to the server emitted events. So let&amp;rsquo;s get back to &lt;code>game.js&lt;/code>.&lt;/p>
&lt;p>First thing we&amp;rsquo;ll do is set up a listener for the &amp;lsquo;player&amp;rsquo; event, which means that a player has joined the event and the board will be set up, along with the player&amp;rsquo;s color. The code we wrote to create the board in the first step also goes in this.&lt;/p>
&lt;p>Put this at the bottom of &lt;code>game.js&lt;/code>, after removing the old &lt;code>cfg&lt;/code> and &lt;code>board&lt;/code> variables.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;player&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">plno&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;player&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// we&amp;#39;re passing an object -
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// { playerId, players, color, roomId } as msg
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">color&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// show the players number and color in the player div
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">players&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">players&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">plno&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Player &amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">players&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34; : &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">color&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// emit the play event when 2 players have joined
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">players&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="nx">play&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// relay it to the other player that is in the room
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;play&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// change the state from &amp;#39;join room&amp;#39; to -
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Game in Progress&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// if only one person is in the room
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Waiting for Second player&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">cfg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">orientation&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">color&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">draggable&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">position&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;start&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onDragStart&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onDragStart&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onDrop&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onDrop&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onMouseoutSquare&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onMouseoutSquare&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onMouseoverSquare&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onMouseoverSquare&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onSnapEnd&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onSnapEnd&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">board&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ChessBoard&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;board&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cfg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">board&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we need to modify some of the functions that we copied from the example at &lt;a href="http://chessboardjs.com/examples#5003">&lt;code>chessboardjs&lt;/code>&lt;/a>.&lt;/p>
&lt;p>For &lt;code>onDragStart&lt;/code> we add a few more conditions to check if the move is valid or not. The conditions we added are -&lt;/p>
&lt;pre>&lt;code>play || // check if both players have joined
// if the player is white, he cannot move black pieces and vice versa
(game.turn() === 'w' &amp;amp;&amp;amp; color === 'black') ||
(game.turn() === 'b' &amp;amp;&amp;amp; color === 'white')
&lt;/code>&lt;/pre>&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="kd">var&lt;/span> &lt;span class="nx">onDragStart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// A few more rules have been added
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game_over&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">play&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">turn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;w&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/^b/&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">turn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/^w/&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">turn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;w&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;black&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">turn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;white&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function &lt;code>onDrop&lt;/code>, is when the pieces are actually moved. So when the player makes a move and drops a move, the &amp;lsquo;move&amp;rsquo; event is emitted.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="kd">var&lt;/span> &lt;span class="nx">onDrop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">removeGreySquares&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// see if the move is legal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">move&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">move&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">from&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">to&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">promotion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;q&amp;#39;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game_over&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;GAME OVER&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;gameOver&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">roomId&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// illegal move
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">move&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;snapback&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if the move is allowed, emit the move event.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;move&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">move&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">move&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">board&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fen&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="nx">room&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">roomId&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we need to add some listeners, so that changes that are sent via events are reflected in the client.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="c1">// if the room is full (players &amp;gt; 2), redirect the user
&lt;/span>&lt;span class="c1">// to the full.html page we made earlier
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;full&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">roomId&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assign&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">href&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;full.html&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// change play to false when both players have
&lt;/span>&lt;span class="c1">// joined the room, so that they can start playing
&lt;/span>&lt;span class="c1">// (when play is false the players can play)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;play&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">roomId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">play&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Game in progress&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// when a move happens, check if it was meant for the clients room
&lt;/span>&lt;span class="c1">// if yes, then make the move on the clients board
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;move&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">room&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">roomId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">move&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">board&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">position&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fen&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;moved&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>One last method requires implementation, the &lt;code>connect&lt;/code> function. When we click the connect button it needs to emit an event with the room id that the player has entered.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="kd">var&lt;/span> &lt;span class="nx">connect&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// extract the value of the input field
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">roomId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">room&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if the room number is valid
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">roomId&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">parseInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">room&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">remove&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">roomNumber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Room Number &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">roomId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">remove&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// emit the &amp;#39;joined&amp;#39; event which we have set up a listener for on the server
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;joined&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">roomId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="checking-if-it-works">Checking if it works&lt;/h1>
&lt;p>For the complete code, check the repo, &lt;a href="https://github.com/Aveek-Saha/Online-Chess">&lt;code>Online chess&lt;/code>&lt;/a>.&lt;/p>
&lt;p>cd to the project directory, and then run&lt;/p>
&lt;pre>&lt;code>node index.js
&lt;/code>&lt;/pre>&lt;p>If you&amp;rsquo;ve done everything correctly you&amp;rsquo;ll see something like this &lt;a href="https://chess0.herokuapp.com">&lt;code>Live demo&lt;/code>&lt;/a> here. You can open up as many instances as you want and try playing with your friends.&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>Making the Chrome dinosaur game with Phaser</title><link>https://home.aveek.io/blog/post/chrome-dinosaur-game-tutorial-with-phaser/</link><pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/chrome-dinosaur-game-tutorial-with-phaser/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/Chrome-dinosaur-game-clone">&lt;code>Dinosaur game code&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
Check out the code in action here, play it yourself - &lt;a href="https://aveeksaha.gitlab.io/runny/">&lt;code>Live demo&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Chrome has this really simple and fun game that you can play when your WiFi is down. It consists of a small dinosaur that has to jump over cacti. This game has a couple of core mechanics, a player that jumps when the up key is pressed, and an infinite number of randomly generated obstacles for the player to jump over.&lt;/p>
&lt;p>Both these things can be easily achieved in Phaser, which is a 2D game framework for making HTML browser games. We&amp;rsquo;re going to create a game with almost the same mechanics but with a different look.&lt;/p>
&lt;p>I&amp;rsquo;m going to call it &lt;code>Runny&lt;/code>&lt;/p>
&lt;p>If you&amp;rsquo;re new to phaser I would suggest reading a getting started tutorial.&lt;/p>
&lt;h1 id="file-structure">File Structure&lt;/h1>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">runny&lt;/span>
&lt;span class="o">|---&lt;/span>&lt;span class="nx">assets&lt;/span> &lt;span class="c1">// A folder for all our tiles and sprites
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|---&lt;/span>&lt;span class="nx">js&lt;/span> &lt;span class="c1">// All the javascript files
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">boot&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">gameover&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">gametitle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">phaser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">preload&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="o">|&lt;/span>
&lt;span class="o">|--&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">html&lt;/span> &lt;span class="c1">// Where everything comes together
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>For this project we&amp;rsquo;ll only be using &lt;code>preload.js&lt;/code> and &lt;code>main.js&lt;/code> from the &lt;code>js folder&lt;/code>&lt;/p>
&lt;p>The boilerplate code was taken from &lt;a href="https://www.joshmorony.com/">&lt;code>Joshua Morony's website&lt;/code>&lt;/a> , download the files &lt;a href="https://www.joshmorony.com/wp-content/uploads/2015/03/phaser-template.zip">&lt;code>Here&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="assets">Assets&lt;/h1>
&lt;p>We need three basic kinds of tiles- the ground, the player and the obstacles. I&amp;rsquo;ll be using 2 different png files for the obstacles and the ground. For the player I&amp;rsquo;m going to use a sprite sheet because it can be animated.&lt;/p>
&lt;p>The ground and obstacle tiles were Made by &lt;a href="http://kenney.nl/assets?q=2d">&lt;code>Kenny&lt;/code>&lt;/a> and the player sprite sheet was made by &lt;a href="https://arks.itch.io/dino-characters">&lt;code>arks&lt;/code>&lt;/a>.&lt;/p>
&lt;h1 id="preloadjs">Preload.js&lt;/h1>
&lt;p>Here we load the assets that we need before we use them. In preload.js, change
&lt;code>this.game.state.start(&amp;quot;GameTitle&amp;quot;);&lt;/code> to
&lt;code>this.game.state.start(&amp;quot;Main&amp;quot;);&lt;/code>
&lt;!-- raw HTML omitted -->
Then add the following
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">preload&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="c1">// ground tile
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">image&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;tile&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;assets/tile.png&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// obstacle tile
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">image&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;box&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;assets/box.png&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// player sprite
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spritesheet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;player&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;assets/player.png&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h1 id="mainjs">Main.js&lt;/h1>
&lt;p>This is where the fun stuff happens!&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="create">Create&lt;/h3>
&lt;p>In the create function we initialize a few variables that we&amp;rsquo;ll be using later.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileVelocity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">450&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// velocity of the obstacles
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1500&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// rate at which the obstacles appear on screen
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// is the player jumping?
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// add keyboard input
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cursors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keyboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createCursorKeys&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// set a blue background color
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backgroundColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;479cde&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// start the phaser arcade physics system
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">physics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startSystem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Phaser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Physics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ARCADE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// execute addObstacles at the rate we set
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">events&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">loop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addObstacles&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Now we need 2 groups, one for the ground and one for the obstacles &lt;!-- raw HTML omitted -->&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// the floor group
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">group&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enableBody&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createMultiple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ceil&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileWidth&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;tile&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// the obstacle group
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">group&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enableBody&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createMultiple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;box&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bringToTop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addBase&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// add the ground for the player to run on
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createPlayer&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// add the player to the game
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>&lt;code>Final create function&lt;/code>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">create&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileVelocity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">450&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1500&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileWidth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getImage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;tile&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileHeight&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getImage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;tile&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxHeight&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getImage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;box&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backgroundColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;479cde&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">physics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startSystem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Phaser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Physics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ARCADE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">group&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enableBody&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createMultiple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ceil&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileWidth&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;tile&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">group&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enableBody&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createMultiple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;box&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bringToTop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addBase&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createPlayer&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cursors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keyboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createCursorKeys&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">events&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">loop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addObstacles&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="add-base">Add Base&lt;/h3>
&lt;p>Now our player will need a platform to run on. The ground is actually not going to move, so we can just set a fixed number of tiles based on the size of the screen. Let&amp;rsquo;s add the base.&lt;/p>
&lt;p>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">addBase&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate how many tiles are needed
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">tilesNeeded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ceil&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileWidth&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// the tiles should be at the bottom of the screen
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileHeight&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">tilesNeeded&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// add one tile after the other
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileWidth&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">tile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getFirstDead&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">tile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// set the x and y coordinates
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">tile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">immovable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="create-the-player">Create the Player&lt;/h3>
&lt;p>Since the player has something to stand on now, we can go ahead and create the player.&lt;/p>
&lt;p>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">createPlayer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// spawn the player a to the left and a little above the ground
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sprite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileHeight&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;player&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// depends on the size of your sprite
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scale&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">anchor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// enable arcade physics on the player
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">physics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arcade&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// the player has to fall down once it jumps
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gravity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2200&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bounce&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">drag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">150&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// since it is a sprite sheet, you can set animations
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">walk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">animations&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;walk&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// play the walk animation at 20fps
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">animations&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">play&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;walk&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="add-the-obstacles">Add the Obstacles&lt;/h3>
&lt;p>Just having the player jump without anything to jump over would be pretty boring, so we&amp;rsquo;re going to add some boxes. In case you haven&amp;rsquo;t realized already, we haven&amp;rsquo;t given the player a velocity. This is because the player isn&amp;rsquo;t actually going to move, we can simply create the illusion of movement by giving the obstacles a velocity in the direction of the player.&lt;/p>
&lt;p>Also to keep things interesting, the height of the obstacles the player has to jump over is random and based on that the player can either do a single jump or a double jump. We&amp;rsquo;ll implement the jumping function later.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">addObstacles&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Randomly decide how tall the stack of boxes is going to be
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// maximum number of tiles that the player can jump over is 4
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">tilesNeeded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">// slowly increase the difficulty by increasing how often boxes spawn and how fast they move
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rate&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rate&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileVelocity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">675000&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rate&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Add the boxes to the game
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">tilesNeeded&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// we want the boxes to be created just outside the right side of the screen
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addBox&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileHeight&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxHeight&lt;/span> &lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The function above doesn&amp;rsquo;t actually add the boxes to the map, that&amp;rsquo;s done by &lt;code>addBox&lt;/code>, which creates a box at the given x and y coordinates.&lt;/p>
&lt;p>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">addBox&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// get the boxes that have already been moved outside the screen
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">tile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getFirstDead&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">tile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// set the velocity of the set of boxes
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">tile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">velocity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileVelocity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">tile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">immovable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">tile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">checkWorldBounds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// destroy them when they go outside the screen
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">tile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">outOfBoundsKill&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="movement">Movement&lt;/h3>
&lt;p>Now we need to give the player a way to actually jump over the boxes when we press the UP arrow. This is taken care of in the &lt;code>update&lt;/code> function which can constantly check for input. We&amp;rsquo;ll also be implementing a double jump mechanism that we talked about earlier.
This isn&amp;rsquo;t a part of the original game, but makes it more interesting. We&amp;rsquo;ll also be checking for collisions between the other tiles and the player.If the player touches a box, the game is over.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">update&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// collide with the floor
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">physics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arcade&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">collide&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// collide with the boxes and call gameOver when the player hits a box
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">physics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arcade&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">collide&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gameOver&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// implementing the double jump
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">onTheGround&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">touching&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">down&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// If the player is touching the ground, let him have 2 jumps
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">onTheGround&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Jump!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumps&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">upInputIsActive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">velocity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Reduce the number of available jumps if the jump input is released
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumping&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">upInputReleased&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumps&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>There are 2 more methods we need to implement, one for checking if the up arrow is held down, and one to check if it&amp;rsquo;s released.&lt;/p>
&lt;p>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// This function returns true when the player presses the &amp;#34;jump&amp;#34; control
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">upInputIsActive&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">duration&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">isActive&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">isActive&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keyboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">downDuration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Phaser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Keyboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">duration&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">isActive&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">activePointer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">justPressed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">duration&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1000&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">activePointer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">activePointer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">isActive&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="c1">// This function returns true when the player releases the &amp;#34;jump&amp;#34; control
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">upInputReleased&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">released&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">released&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keyboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">upDuration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Phaser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Keyboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UP&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">released&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">activePointer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">justReleased&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">released&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h1 id="game-over">Game Over&lt;/h1>
&lt;p>For the last part of our project, we need to do something when the player hits a box and the game is over. In this case since we don&amp;rsquo;t have a Start Screen we&amp;rsquo;ll just load up the game again, i.e &lt;code>main.js&lt;/code>
So put this line in &lt;code>gameOver&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;GameOver&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;!-- raw HTML omitted --></description></item><item><title>Dusk Player</title><link>https://home.aveek.io/blog/post/music-player/</link><pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/music-player/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/MusicPlayer">&lt;code>Music Player&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demo, Download it here - &lt;a href="https://github.com/Aveek-Saha/MusicPlayer/releases">&lt;code>Downloads&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The idea for this music player was to keep things simple. you just load all your audio files from your music player, and start listening. The player always keeps the focus on the music.
Apart from the essential music controls, like play, pause, skip and seek, there is a playlist menu so that you can quickly switch songs.
It is built on Electron and uses Howler for handling music playback. AngularJS and Bootstrap are used for the UI, and JSmediatags to retrieve the ID3 tags, like album art, artist and title.&lt;/p>
&lt;h1 id="using-the-player">Using the player&lt;/h1>
&lt;p>On starting the music player, you’ll see an option called folder in the top menu, click on it. Select the folder with all your music, and your set to go. the player will automatically load all the supported audio files into a playlist. It also stores the location of the directory you last opened, and it&amp;rsquo;ll load your music from there when you open it next.&lt;/p>
&lt;p>The UI is fairly intuitive, there are play pause and skip buttons. Clicking on the progress bar will seek playback to that position in the song. There is a volume slider to fine tune the volume. The hamburger menu button toggles the playlist. And the last button is to shuffle tracks.&lt;/p>
&lt;h1 id="implementation">Implementation&lt;/h1>
&lt;p>The entire implementation is too long, so I&amp;rsquo;ll just give an outline here. The full code is at &lt;a href="https://github.com/Aveek-Saha/MusicPlayer">&lt;code>Music Player&lt;/code>&lt;/a>&lt;/p>
&lt;p>The user selects the folder with music in it via Electron’s dialog module. This is used to open a directory selector, when a directory is selected it returns a path to that directory which is then passed to a function. This function then uses the path to scan the directory and store the paths of all the files with supported extensions in a playList array.
The path of the selected directory is stored in a file, which will be read in the future so that the user doesn&amp;rsquo;t have to select a directory everytime.&lt;/p>
&lt;p>The actual audio playback is handled through Howler, which provides us with methods like Play, Pause, Seek, Skip and volume adjustment. These methods are implemented in the Player object prototype.
The functions implemented are-&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">play&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Play the song at playlist[index]
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">pause&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Pause all audio playback
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">skip&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">direction&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// skip to the next/previous/random track,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// calls skipTo
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">skipTo&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// stop whatever song is playing and
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// play the song that has been skipped to
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">step&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// as the song is playing, change the timer value
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// and move the progress bar
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">formatTime&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">secs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// by default the time is in seconds,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// so convert it into mins:seconds format
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">volume&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// volume tuning
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">seek&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// move the song along to the place
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// the user clicked on the progressbar
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Most audio files have some kind of metadata attached to them in the form of media tags. This metadata includes things like Title, Artist, Album and Album art.&lt;/p>
&lt;p>These tags are read using JSmediatags using which we retrieve the name of the song, the artist and the album art. The album art is decoded from base64 and displayed as an image. If there are no media tags for a file, it simply displays the file name.&lt;/p>
&lt;h1 id="features">Features&lt;/h1>
&lt;ul>
&lt;li>Supports: mp3, opus, ogg, wav, aac, m4a, webm.&lt;/li>
&lt;li>Quickly switch tracks in the same folder, from the playlist button.&lt;/li>
&lt;li>Play tracks on shuffle.&lt;/li>
&lt;li>Loads music from the last selected directory.&lt;/li>
&lt;li>Fine tune the volume from the volume slider.&lt;/li>
&lt;li>Reads ID3 tags and displays the artist and album art (if they exist).&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>MEAN Todo app</title><link>https://home.aveek.io/blog/post/mean-todo-app/</link><pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/mean-todo-app/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/MEAN-todo-app">&lt;code>MEAN Todo app&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demoCheck it out here - &lt;a href="https://todo0.herokuapp.com/">&lt;code>Live demo&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The MEAN stack, for those of you that haven’t heard of it, is a free JavaScript software stack for building modern web applications. This stack consists of – MongoDB, Express, Angular, and NodeJS. MongoDB is a NoSQL database that is highly scalable. Express is a middle-ware library that deals with routing in this case. AngularJS is a front end JavaScript library for creating UI. NodeJS is a JavaScript run-time environment that executes JavaScript code outside the browser, it allows us to run JavaScript on the server.&lt;/p>
&lt;h1 id="crud-operations">CRUD Operations&lt;/h1>
&lt;p>At the heart of it all, what the app does is Create, Read, Update, and Delete documents in the database. The rest of the application simply provides an interface, both front end and back end to facilitate this. The Mongoose library has been used to interact with the MLabs MongoDB database.&lt;/p>
&lt;p>Using Express we set up the routing for the CRUD operations, using the get method for Reading the list of existing Todos.&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/api/todos&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;{&lt;/span>
&lt;span class="nx">Todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>The post method for Creating new Todos.&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/api/todos&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;{&lt;/span>
&lt;span class="nx">Todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">done&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;false&amp;#39;&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">Todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>The delete method for Deleting specific Todos. For the delete function we pass the ID of the todo to be deleted as a parameter.&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/api/todos/:todo_id&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;{&lt;/span>
&lt;span class="nx">Todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">remove&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">params&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">todo_id&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">Todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>On our front end, we have a counter that shows the number of tasks to do. This is found by simply counting the number of elements in the response by the get function. Below this is a list of todos, which have been fetched by querying the database for all documents in the todo collection. This is passed as an array to an Angular variable and we iterate through it to create the list of todos.&lt;/p>
&lt;p>Each todo in this list has its own unique id, which is automatically created in mongodb when a new document is inserted. There is a delete button next to the text content of each task. On pressing this, the id of the todo is passed as a parameter to the delete method for Deleting specific Todos, and it updates the list.&lt;/p>
&lt;p>There’s a form by which a user can enter a new task to do. On submitting this form, the text entered by the user is sent as a parameter to the route for the post method for Creating new Todos. This function in turn creates a new document in the database, and the list of todos is updated with the new task.&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>Bitcoin Price Tracker</title><link>https://home.aveek.io/blog/post/bitcoin-price-tracker/</link><pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/bitcoin-price-tracker/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/Bitcoin-price-tracker">&lt;code>Bitcoin Price Tracker&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demo, Download it here - &lt;a href="https://github.com/Aveek-Saha/Bitcoin-price-tracker/releases">&lt;code>Downloads&lt;/code>&lt;/a>&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This application was something of a test run, to get familiar with the Electron framework . For those of you that haven’t heard of it, Electron is a framework that allows you to build cross platform desktop apps with JavaScript, HTML, and CSS.&lt;/p>
&lt;p>Full disclosure, this was made by following a great tutorial by Gary Simon. Do check it out, he does a good job of explaining the basics and anyone with some experience in web development should be able to pick it up with no problem.&lt;/p>
&lt;h2 id="details">Details&lt;/h2>
&lt;p>I wont go into too much technical detail here, because the tutorial already does that far better than I could, but the basic idea is to make a simple desktop application for Linux, that notifies you when the Bitcoin price exceeds a limit set by you. Unfortunately, the notifications will only work in Linux and Mac OS, but not Windows because the notification system for non system apps was broken after the last update.&lt;/p>
&lt;p>The application uses axios to get the current bitcoin price from cryptocompare. Then we create a function called getBTC, which fetches the bitcoin price and then compares it to the value entered by the user. This function is executed every 10 seconds via setInterval. If the bitcoin price is found to be greater than the user value, a desktop notification is sent.&lt;/p>
&lt;p>The user enters the Price limit via another window, and the value entered by the user is sent back to the main window via the ipc.renderer.&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>E-commerce Website Template</title><link>https://home.aveek.io/blog/post/ecommerce-website-template/</link><pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/ecommerce-website-template/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/ecommerce-website-template">&lt;code>E-commerce template&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demo, check this out - &lt;a href="http://eshop.byethost22.com/">&lt;code>Demo&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>A common thing that most of us on the internet have done, is shop online. The idea of spending your hard earned money online is as addictive and dopamine inducing to those that enjoy the same thing in a mall. This project is an attempt to create a template for a simple e-commerce site, without any payment capability.&lt;/p>
&lt;p>On loading the site, you can either login with an existing account or create a new one. Account details are stored in a SQL database, and passwords are hashed for security.&lt;/p>
&lt;h1 id="logging-in-as-a-user">Logging in as a User&lt;/h1>
&lt;p>Once logged in, you’ll be able to see all product listings along with the price of the product and a button to add the product to your cart. If you click on a product, It’ll take you to a Product detail page, displaying more information like a full product description and a list of dealers.&lt;/p>
&lt;p>On the nav bar, you can check how many items are in your cart, clicking on it will take you to a page with the breakdown of the current bill, you can remove items from here by deleting them, or you can change the quantity of any item in the cart. This page Displays your account details like, Name, address and phone number. you can proceed to checkout from here and place your order, this order is stored in an SQL database. Currently there is no way for a user to view the orders he’s already placed.&lt;/p>
&lt;p>There is also a messaging facility available, and you can enter the email of the user you want to message, and send messages back and forth from that user.&lt;/p>
&lt;h1 id="logging-in-as-an-admin">Logging in as an Admin&lt;/h1>
&lt;p>If you are logged in as an admin, you will have the option to create new products, and add their details.&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>Word Suggestion App</title><link>https://home.aveek.io/blog/post/word-suggestion-app/</link><pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/word-suggestion-app/</guid><description>&lt;p>We often find ourselves grasping at a word that’s on the tip of our tongue but we just can’t pin it down, or wanting to check the spelling of a word that we’re not sure of.&lt;/p>
&lt;p>Since this is such a common problem, I decided to use My front end knowledge and data structures to come up with a solution. This project has 2 parts.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h1 id="the-c-part">The C part:&lt;/h1>
&lt;p>I made a C program that uses a list of words, to build a trie, which is a kind of search tree. When this program runs, and an input word is given, it displays a list of words that are close or similar to it.
There is also a spell check mode that will display if a word is correctly spelled or not. This program also creates a text file of the most frequently spelt incorrect words. Once this was done, I moved on the the front end part.&lt;/p>
&lt;h1 id="the-web-interface">The web interface:&lt;/h1>
&lt;p>Using php’s exec function I piped the output of this program to a PHP array. This PHP file is then asynchronously called when the user presses “alt +h”. Then I added some CSS to make the whole thing look nice.&lt;/p>
&lt;h1 id="the-final-features-features-include">The final features features include:&lt;/h1>
&lt;p>Two modes of operation that can be toggled-
A word suggestion mode- Where the user can type in a partially completed word and the app will suggest predictions.
A spell check mode- Where the user can enter a word and check if the spelling is correct, if it is not the app also suggests words that may contain the correct spelling of the word that the user was trying to type.
The app keeps a track of the the 5 most frequently misspelt words
The word of the day (the most frequently incorrectly spelt word) can be seen from the spelling.php page
I used an Apache server to host this application.&lt;/p>
&lt;p>If you want the code for this project, fork this Github repo - &lt;a href="https://github.com/Aveek-Saha/Autocorrect-and-spellcheck-webapp">https://github.com/Aveek-Saha/Autocorrect-and-spellcheck-webapp&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demo, check this out – &lt;a href="https://autocorrect-and-spellcheck.herokuapp.com/">https://autocorrect-and-spellcheck.herokuapp.com/&lt;/a>
Note: For the live demo I’m taking the input directly from the word list in php by storing the txt file in an array, this is because the ‘exec’ function does not work on the server.&lt;/p>
&lt;!-- raw HTML omitted --></description></item></channel></rss>