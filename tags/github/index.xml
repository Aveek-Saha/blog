<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitHub on Aveek's Blog</title><link>https://home.aveek.io/blog/tags/github/</link><description>Recent content in GitHub on Aveek's Blog</description><generator>Hugo -- gohugo.io</generator><managingEditor>aveek.s98@gmail.com (Aveek Saha)</managingEditor><webMaster>aveek.s98@gmail.com (Aveek Saha)</webMaster><lastBuildDate>Tue, 10 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://home.aveek.io/blog/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting started with Ionic 5 and Vue</title><link>https://home.aveek.io/blog/post/getting-started-with-ionic-vue/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/getting-started-with-ionic-vue/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/MovieVue/">&lt;code>Movie Vue&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
Download the app here - &lt;a href="https://github.com/Aveek-Saha/MovieVue/releases/">&lt;code>Download&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Javascript has come a long way from when it used to be just a way to make web pages more dynamic, now we can use it to write server side code and even make desktop and mobile applications. The later is what what we&amp;rsquo;ll be exploring today, using &lt;a href="https://ionicframework.com/">&lt;code>Ionic&lt;/code>&lt;/a> and &lt;a href="https://vuejs.org/">&lt;code>Vue.js&lt;/code>&lt;/a>.&lt;/p>
&lt;p>In this tutorial we&amp;rsquo;ll be focusing on learning how to use &lt;code>Ionic&lt;/code>, and it assumes you have basic knowledge of &lt;code>Vue&lt;/code> concepts. If you want to learn &lt;code>Vue&lt;/code> check out this tutorial: &lt;a href="https://home.aveek.io/blog/post/getting-started-with-vuejs-and-the-github-api/">&lt;code>Getting started with Vue and the GitHub API&lt;/code>&lt;/a>, where I go over all the basic concepts in &lt;code>Vue&lt;/code>.&lt;/p>
&lt;h1 id="what-is-ionic">What is Ionic?&lt;/h1>
&lt;p>From the ionic team:&lt;/p>
&lt;blockquote>
&lt;p>Ionic is an open source mobile UI toolkit for building high quality, cross-platform native and web app experiences.&lt;/p>
&lt;/blockquote>
&lt;p>Ionic will provide us with UI components that will look at home on mobile platforms, and function virtually indistinguishably from any native app.&lt;/p>
&lt;p>Ionic gives you a choice between Angular, React, Vue, or vanilla JavaScript. However, note that not all components are available for all frameworks, so take a look at all the components you want to use and check if they&amp;rsquo;re available for your framework before you start.&lt;/p>
&lt;p>With Ionic you can also use native device functionality, like accessing the camera or using the location on a mobile service, though take note that this service is a part of their enterprise edition.&lt;/p>
&lt;h1 id="what-are-we-building">What are we building?&lt;/h1>
&lt;p>We&amp;rsquo;ll be building a mobile application where users can see a list of movies that are currently playing, popular movies, top rated movies and new movies that are going to release.&lt;/p>
&lt;p>App Features:&lt;/p>
&lt;ol>
&lt;li>A slide out menu from where you can see the different movie lists, Now Playing, Popular, Upcoming, or Top Rated.&lt;/li>
&lt;li>Each movie will have a background image, the title, the average rating of the movie and the description.&lt;/li>
&lt;li>Infinite scroll, once you reach the end of the page, new content automatically loads.&lt;/li>
&lt;li>Swipe down on any page to refresh it.&lt;/li>
&lt;li>Show region specific movies&lt;/li>
&lt;/ol>
&lt;p>To get our movies, we&amp;rsquo;ll be using the &lt;a href="https://developers.themoviedb.org/3/movies/get-now-playing">&lt;code>TMDb api&lt;/code>&lt;/a> and to get our location we&amp;rsquo;ll be using &lt;a href="http://ip-api.com/json/">&lt;code>ip-api&lt;/code>&lt;/a>.&lt;/p>
&lt;h3 id="result">Result&lt;/h3>
&lt;p>{{ &lt;!-- raw HTML omitted --> }}
&lt;!-- raw HTML omitted -->
Your browser does not support the video tag.
{{ &lt;!-- raw HTML omitted --> }}&lt;/p>
&lt;ol>
&lt;li>Install ionic cli&lt;/li>
&lt;li>Start an iconic app&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>npm install -g @ionic/cli
ionic start MovieVue sidemenu --type vue
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>
&lt;p>cd into it and run
ionic serve&lt;/p>
&lt;/li>
&lt;li>
&lt;p>do coding&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Build
ionic build&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>ionic cap add android&lt;/p>
&lt;ol start="6">
&lt;li>Download android studio
Use standard install type&lt;/li>
&lt;/ol>
&lt;p>ionic cap open android&lt;/p>
&lt;p>wait for gradle to sync&lt;/p>
&lt;p>open SDK tools if needed&lt;/p>
&lt;p>Build, then run&lt;/p>
&lt;p>Icons in the app &amp;gt; res &amp;gt; mipmap folder&lt;/p>
&lt;p>select image using path&lt;/p>
&lt;p>build &amp;gt; Build bundles/ apk &amp;gt; Build Apk&lt;/p>
&lt;p>build under path&lt;/p>
&lt;p>MovieVue\android\app\build\outputs\apk\debug&lt;/p></description></item><item><title>Create a bot that updates a pinned gist</title><link>https://home.aveek.io/blog/post/pinned-gist-bot/</link><pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/pinned-gist-bot/</guid><description>&lt;p>Get the code here: &lt;a href="https://github.com/Aveek-Saha/blog-box">&lt;code>blog-box&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>I recently came across this &lt;a href="https://github.com/matchai/awesome-pinned-gists">awesome list for pinned gists&lt;/a> and it piqued my curiosity. So this is basically a collection of repositories that allow you to automatically update a gist periodically with some information. This gist can then be pinned to your GitHub page for people to see when they visit your profile.&lt;/p>
&lt;p>For those of you that havent heard of gists, they&amp;rsquo;re a service provided by GitHub, you can check it out &lt;a href="https://gist.github.com/">here&lt;/a>. They&amp;rsquo;re basically a collection of files that can be forked and cloned like a GitHub repo.&lt;/p>
&lt;p>These periodically updating pinned gists have a nickname, &lt;strong>boxes&lt;/strong>. Some examples of what you can put on these gists from &lt;code>awesome-pinned-gists&lt;/code> include, your &lt;a href="https://github.com/matchai/bird-box">most recent tweet&lt;/a>, &lt;a href="https://github.com/jacc/music-box">weekly music listening report&lt;/a>, &lt;a href="https://github.com/mdluo/goodreads-box">books you&amp;rsquo;re currently reading&lt;/a>, etc.&lt;/p>
&lt;p>Basically if you know a service that has an API you can display it on a pinned gist. In this tutorial I&amp;rsquo;ll show you how to create a gist that updates regularly with Your latest Dev.to blog post, but this method can be adapted for any service with an API. You&amp;rsquo;re only limited by your imagination and publicly available APIs.&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;p>This tutorial will have four parts-&lt;/p>
&lt;ol>
&lt;li>Setup all the prerequisites before you start coding.&lt;/li>
&lt;li>Programatically update a gist.&lt;/li>
&lt;li>Get data from the API and update the gist.&lt;/li>
&lt;li>Setup a GitHub workflow to auto update.&lt;/li>
&lt;/ol>
&lt;h2 id="1-prerequisites">1. Prerequisites&lt;/h2>
&lt;h3 id="create-a-github-token">Create a GitHub token&lt;/h3>
&lt;p>Create a new personal access token at &lt;a href="https://github.com/settings/tokens">https://github.com/settings/tokens&lt;/a> and remember to save the token somewhere because you can only see it once.&lt;/p>
&lt;h3 id="creating-the-gist">Creating the Gist&lt;/h3>
&lt;p>The first thing we need to do is create a gist. So go to &lt;a href="https://gist.github.com/">https://gist.github.com/&lt;/a> and make one, create a file, name it whatever you want, and add whatever description and content you want for now. You&amp;rsquo;ll need to add some content to the file because you can&amp;rsquo;t create an empty gist.&lt;/p>
&lt;p>Once you&amp;rsquo;ve created a gist, the url will look something like this &lt;code>https://gist.github.com/&amp;lt;username&amp;gt;/&lt;/code> &lt;strong>&lt;code>&amp;lt;gist id&amp;gt;&lt;/code>&lt;/strong>. Copy this gist id and keep it somewhere for later use.&lt;/p>
&lt;h3 id="setup-the-project">Setup the project&lt;/h3>
&lt;p>Create a new repository on GitHub, clone it to your local setup and make it your working directory. Then we&amp;rsquo;ll set up npm, answer the questions asked and it should create a &lt;code>package.json&lt;/code> for you.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm init
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we&amp;rsquo;ll create the other two important files in this project, &lt;code>index.js&lt;/code> which will be our main file and &lt;code>action.yml&lt;/code>, which we&amp;rsquo;ll be using later when we&amp;rsquo;re setting up the GitHub action. We also need to create a &lt;code>.env&lt;/code> file that has our environment variables for local development.&lt;/p>
&lt;h3 id="install-the-dependencies">Install the dependencies&lt;/h3>
&lt;p>We&amp;rsquo;ll need a few packages for this project, how they&amp;rsquo;re used will become clear as you progress through this tutorial&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm i @octokit/rest axios dotenv wrap-ansi
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-updating-the-gist">2. Updating the Gist&lt;/h2>
&lt;h3 id="environment-variables">Environment variables&lt;/h3>
&lt;p>Before we do anything else, first add the environment variables to the &lt;code>.env&lt;/code> file. You can keep the &lt;code>DEV_USERNAME&lt;/code> field empty for now.&lt;/p>
&lt;p>You can store any API keys or secrets in this file. This file won&amp;rsquo;t be pushed to your repo, instead you&amp;rsquo;ll have to add the variables in this file as secrets under repository settings. Since I&amp;rsquo;m using the dev.to API, which doesn&amp;rsquo;t need an API key to get posts, I&amp;rsquo;m storing the username which is the only parameter you need to retrieve posts.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="nx">GIST_ID&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;Your gist id&amp;gt;&amp;#34;&lt;/span>
&lt;span class="nx">GH_TOKEN&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;Your github token&amp;gt;&amp;#34;&lt;/span>
&lt;span class="nx">DEV_USERNAME&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="main-script">Main script&lt;/h3>
&lt;p>Now we&amp;rsquo;ll write some code to update the gist we&amp;rsquo;ve created. Add this to &lt;code>index.js&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;dotenv&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Octokit&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;@octokit/rest&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Get the environment variables
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">GIST_ID&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">GH_TOKEN&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">githubToken&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">DEV_USERNAME&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">devUsername&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Authentication
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">octokit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Octokit&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">auth&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`token &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">githubToken&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// Function to update the gist contents
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">updateGist&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">gist&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get the gist you made using the gist id
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">octokit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gists&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">gist_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unable to get gist&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Only one file was created, so fetch it&amp;#39;s filename
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">filename&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">gist&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Update the gist
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// The description is displayed when the gist is pinned
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// so we can update the description along with the contents
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// to show more information when it&amp;#39;s pinned
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">octokit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gists&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">update&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">gist_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">description&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`This is some description`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">files&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`This is some example content`&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unable to update gist&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">updateGist&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">})();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To test whether this script works, run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">node index.js
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you check your gist, the description and content should have updated to whatever strings you passed to the update functions.&lt;/p>
&lt;h2 id="3-fetching-the-data">3. Fetching the data&lt;/h2>
&lt;p>Now we&amp;rsquo;re going to shift our focus to getting the most recent post from our dev.to account. In &lt;code>index.js&lt;/code> update/add these functions.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="c1">// The endpoint for the request
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">baseURL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;https://dev.to/api/articles&amp;#39;&lt;/span>
&lt;span class="c1">// Parameters to pass to the dev.to api
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">params&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">username&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">devUsername&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// This is useful if the string is too long to display on the pinned gist
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">truncate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">substr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;…&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="c1">// Get the most recent post
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">getPost&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">axios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">baseURL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">post&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">// Pass the post as a parameter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">updateGist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Pass the post as a parameter
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">updateGist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">gist&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">gist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">octokit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gists&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">gist_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unable to get gist&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">filename&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">gist&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">// Tags from the post
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">tags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tag_list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;, #&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// In the gist show the title, a short excerpt from the post
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// and the date the post was published in the contents of the gist
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sb">`📜 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">truncate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">title&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\s+/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n ▶ &lt;/span>&lt;span class="si">${&lt;/span>
&lt;span class="nx">truncate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">description&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\s+/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n🔖 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">tags&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n📆 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readable_publish_date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\s+/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// In the post description show the username, number of likes and comments
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">octokit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gists&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">update&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">gist_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">description&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`dev.to/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">devUsername&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> | ❤ &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">public_reactions_count&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> | 💬 &lt;/span>&lt;span class="si">${&lt;/span>
&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">comments_count&lt;/span>
&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">files&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">wrapAnsi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">content&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">hard&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">trim&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unable to update gist&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">getPost&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">})();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>wrapAnsii&lt;/code> library is used to wrap text that&amp;rsquo;s longer than a certain length. Otherwise the text will be abruptly cut off if it&amp;rsquo;s too long when pinned.&lt;/p>
&lt;p>Pin the gist to your profile and then run this script. You should get something that looks like this.&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/31800695/95653499-c52a4580-0b16-11eb-863a-e23c43e4ae21.png" alt="Screenshot">&lt;/p>
&lt;p>If you want to use a different API this step will vary for you, but the basic idea is still the same. Extract the data you need from the API and pass it to the update function so that it can display it on the gist.&lt;/p>
&lt;h2 id="4-setup-github-action">4. Setup GitHub Action&lt;/h2>
&lt;p>Now we have a script that updates our pinned gist with the desired blog post, but we&amp;rsquo;re running it manually. Now we&amp;rsquo;ll set up a GitHub action with a cron job so that it runs on a schedule and updates automatically.&lt;/p>
&lt;h3 id="setup-run-command">Setup run command&lt;/h3>
&lt;p>In &lt;code>action.yml&lt;/code> we&amp;rsquo;ll set up node and the file that should be run using node.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>blog-box&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">author&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&amp;lt;your-username&amp;gt;&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>GitHub&lt;span class="w"> &lt;/span>Action&lt;span class="w"> &lt;/span>for&lt;span class="w"> &lt;/span>updating&lt;span class="w"> &lt;/span>a&lt;span class="w"> &lt;/span>gist&lt;span class="w"> &lt;/span>with&lt;span class="w"> &lt;/span>your&lt;span class="w"> &lt;/span>latest&lt;span class="w"> &lt;/span>blog&lt;span class="w"> &lt;/span>post.&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">runs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">using&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>node12&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">main&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>./index.js&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="setup-workflow">Setup workflow&lt;/h3>
&lt;p>Create a new folder under &lt;code>.github/workflows/&lt;/code> and add a GitHub action file named &lt;code>update.yml&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Update&lt;span class="w"> &lt;/span>gist&lt;span class="w"> &lt;/span>with&lt;span class="w"> &lt;/span>latest&lt;span class="w"> &lt;/span>songs&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># THis option allows you to run the script manually&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">workflow_dispatch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># This sets up a cron job that runs the script once a day&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">schedule&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">cron&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0 0 * * *&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Create a job&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">blog-box&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>ubuntu-latest&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>actions/checkout@v2&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Install dependencies&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>npm&lt;span class="w"> &lt;/span>install&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Update&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>./&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Use the secrets as environment variables&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">GH_TOKEN&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>${{&lt;span class="w"> &lt;/span>secrets.GH_TOKEN&lt;span class="w"> &lt;/span>}}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">GIST_ID&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>${{&lt;span class="w"> &lt;/span>secrets.GIST_ID&lt;span class="w"> &lt;/span>}}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEV_USERNAME&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>${{&lt;span class="w"> &lt;/span>secrets.DEV_USERNAME&lt;span class="w"> &lt;/span>}}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to find out more about cron jobs and how to schedule them, check out this website: &lt;a href="https://crontab.guru/">https://crontab.guru/&lt;/a>.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Once you push your changes, go to &lt;code>actions &amp;gt; Update gist with latest post &amp;gt; Run workflow&lt;/code> in your GitHub repository. The action should run successfully and your pinned gist will show your most recent &lt;code>dev.tp&lt;/code> blog post. The workflow will run at 00:00 UTC automatically every day.&lt;/p></description></item><item><title>How to create a GitHub profile Readme</title><link>https://home.aveek.io/blog/post/create-github-profile-readme/</link><pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/create-github-profile-readme/</guid><description>&lt;p>If you want to see what this looks like - &lt;a href="https://github.com/Aveek-Sahar">&lt;code>My gitHub Profile&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
You can also check out the repository here - &lt;a href="https://github.com/Aveek-Saha/aveek-saha">&lt;code>Aveek-Saha&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>GitHub has recently added the ability to create a README for your profile that acts as an About Me section or an Introduction to your profile.&lt;/p>
&lt;p>This can be helpful because the GitHub bios have a character limit and you might not be able to fit everything you want in there. So your profile readme is a good way to show visitors to your profile everything you need to introduce yourself.&lt;/p>
&lt;h1 id="steps">Steps&lt;/h1>
&lt;p>To get this About me section, follow these steps:&lt;/p>
&lt;ol>
&lt;li>Create a new repository&lt;/li>
&lt;li>Set the repository name to your github username&lt;/li>
&lt;li>Make sure the repository is public&lt;/li>
&lt;li>Select the option to initialize the repository with a README&lt;/li>
&lt;li>Create Repository&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://home.aveek.io/blog/githubprofile/screenshot1.png" alt="Screenshot1">&lt;/p>
&lt;p>Now if you check your Github profile, you should see something like this above your pinned repos.&lt;/p>
&lt;p>&lt;img src="https://home.aveek.io/blog/githubprofile/screenshot2.png" alt="Screenshot2">&lt;/p>
&lt;p>You can look around and find some really interesting things to do with your bio, your imagination is your only limitation.&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>Getting started with Vue and the GitHub API</title><link>https://home.aveek.io/blog/post/getting-started-with-vuejs-and-the-github-api/</link><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/getting-started-with-vuejs-and-the-github-api/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/GithubStats">&lt;code>GitHub Stats&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demo, try it out here - &lt;a href="https://githubstats0.firebaseapp.com/">&lt;code>Live Demo&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This tutorial is for beginners to Vue.js, which is a progressive JavaScript framework like Angular and React. You can read more about vue &lt;a href="https://vuejs.org/">&lt;code>here&lt;/code>&lt;/a>. Since Vue is a JavaScript framework, you&amp;rsquo;ll need basic knowledge of HTML, JS and CSS to follow along.&lt;/p>
&lt;p>I&amp;rsquo;ll be teaching you how to make a web app where you can check the download counts of GitHub releases, by querying the &lt;a href="https://developer.github.com/v3/">&lt;code>GitHub API&lt;/code>&lt;/a>.&lt;/p>
&lt;h3 id="what-are-releases">What are releases?&lt;/h3>
&lt;p>Releases are GitHub&amp;rsquo;s way of packaging and providing software to users. Repository owners can upload downloadable files that users can install or extract on to their systems as a way of distributing software. An example can be seen here &lt;a href="https://github.com/Aveek-Saha/MusicPlayer/releases">&lt;code>Music Player releases&lt;/code>&lt;/a>.&lt;/p>
&lt;p>There is one issue with this system though, it doesn&amp;rsquo;t display the number of times your software or packages were downloaded. It is very likely that someone who released software would want to know how popular it is, or how many people are using his software. So we&amp;rsquo;re going to build an application that helps us fill this void.&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;p>There are many ways to include Vue.js in an application, but for this tutorial we will be using the Vue CLI.&lt;/p>
&lt;p>Install the CLI.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">npm&lt;/span> &lt;span class="nx">install&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">g&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="nx">vue&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">cli&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>To create a new project, run:
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">vue&lt;/span> &lt;span class="nx">create&lt;/span> &lt;span class="nx">vue&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">tut&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
You&amp;rsquo;ll get a prompt to choose a &lt;code>default&lt;/code> preset or &lt;code>manually select features&lt;/code>. The default option will be fine for us, so just press enter and wait for the CLI to initialize the project. Cd into the directory and run &lt;code>npm run serve&lt;/code>. If the project was created properly, you should see a default web page when you go to &lt;code>http://localhost:8080&lt;/code>.&lt;/p>
&lt;p>The project folder will have a structure like this
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">vue&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">tut&lt;/span>
&lt;span class="o">|----&lt;/span>&lt;span class="nx">node_modules&lt;/span>
&lt;span class="o">|&lt;/span>
&lt;span class="o">|----&lt;/span>&lt;span class="kr">public&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">html&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">favicon&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ico&lt;/span>
&lt;span class="o">|&lt;/span>
&lt;span class="o">|----&lt;/span>&lt;span class="nx">src&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|----&lt;/span>&lt;span class="nx">assets&lt;/span> &lt;span class="c1">// logo.png
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|----&lt;/span>&lt;span class="nx">components&lt;/span> &lt;span class="c1">// contains a HelloWorld.vue component
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">vue&lt;/span> &lt;span class="c1">// main component
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="o">|&lt;/span>
&lt;span class="o">|--&lt;/span> &lt;span class="c1">// other files...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|--&lt;/span>&lt;span class="kr">package&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>Some useful Scripts:&lt;/p>
&lt;ul>
&lt;li>Run on localhost: &lt;code>npm run serve&lt;/code>&lt;/li>
&lt;li>Build for production: &lt;code>npm run build&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>We&amp;rsquo;ll be working with mostly the files in the &lt;code>src&lt;/code> folder. In &lt;code>index.html&lt;/code> we&amp;rsquo;re going to add Bootstrap and JQuery to give our app some visual appeal. Put the following in the head tag.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css&amp;#34;&lt;/span> &lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO&amp;#34;&lt;/span> &lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://code.jquery.com/jquery-3.3.1.slim.min.js&amp;#34;&lt;/span> &lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&amp;#34;&lt;/span>
&lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js&amp;#34;&lt;/span> &lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49&amp;#34;&lt;/span>
&lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js&amp;#34;&lt;/span> &lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy&amp;#34;&lt;/span>
&lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>We will get the download numbers of each file in the releases through the GitHub API. To make these Api requests we&amp;rsquo;re going to use &lt;code>Axios&lt;/code>, which is a promise based HTTP client for the browser and node.js. To add axios run &lt;code>npm i axios&lt;/code>.&lt;/p>
&lt;h1 id="components">Components&lt;/h1>
&lt;p>Vue components have 3 parts&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- for HTML and components --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c1">// data and methods of the component
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">/* styles for the component */&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Let&amp;rsquo;s start off by renaming &lt;code>HellWorld.vue&lt;/code> to something more apt, like &lt;code>Data.vue&lt;/code>, since we&amp;rsquo;re going to process and display the API request data there. After renaming be sure to rename all the occurrences of &lt;code>HellWorld&lt;/code> with &lt;code>Data&lt;/code>, in both &lt;code>Data.vue&lt;/code> and &lt;code>App.vue&lt;/code>.&lt;/p>
&lt;p>In &lt;code>Data.vue&lt;/code> remove everything in between the &lt;code>style&lt;/code> tag and the &lt;code>template&lt;/code> tag. Your file should look like this.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span> &lt;span class="na">scoped&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>We&amp;rsquo;re going to add a navbar, a container div and some styles to &lt;code>App.vue&lt;/code> and the file should look like this.
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;app&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- added a navbar --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">nav&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;navbar navbar-dark bg-dark&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;navbar-brand mb-0 h2&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>GitHub Download Stats&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://aveek-saha.github.io/&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;navbar-brand mb-0 h1 text-right&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">i&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;fab fa-github fa-inverse&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">i&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">nav&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- wrapped the data component in a container --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;container&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- inject the Data component --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Data&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c1">// import the data component
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="nx">Data&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./components/Data.vue&amp;#39;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;app&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">components&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Data&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">/* global styles */&lt;/span>
&lt;span class="nt">body&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#FEFEFE&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">asset&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">word-break&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">break-all&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">#&lt;/span>&lt;span class="nn">app&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">font-family&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Avenir&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Helvetica&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Arial&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">sans-serif&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kp">-webkit-&lt;/span>&lt;span class="n">font-smoothing&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">antialiased&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kp">-moz-&lt;/span>&lt;span class="n">osx-font-smoothing&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">grayscale&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
This is basically all the modification we&amp;rsquo;ll be doing to &lt;code>App.vue&lt;/code>. All the magic happens in &lt;code>Data.vue&lt;/code>, where our main logic resides.&lt;/p>
&lt;h3 id="datavue">Data.vue&lt;/h3>
&lt;p>This is where we&amp;rsquo;ll be making the API requests and in order to use &lt;code>axios&lt;/code> it has to be imported to the component. Along with this, we&amp;rsquo;ll also be creating some variables in the &lt;code>script&lt;/code> section of this component.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// import axios
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="nx">axios&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;axios&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// all the data belonging to this component goes
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// to data() and is returned as an object
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// declare some variables that we&amp;#39;ll use later
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// owner of the repository
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">username&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// name of the repo
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">repository&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// list of releases
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">releases&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;span class="c1">// total downloads of all releases combined
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">grandTotal&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// if the query returned a status 404 or not
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">success&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// does the repository have any releases?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">empty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// base url
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">url&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Now we need to make a form so that people can enter &lt;code>username&lt;/code> and &lt;code>repository&lt;/code>, we&amp;rsquo;ll add this in the &lt;code>template&lt;/code> tag.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;row justify-content-center&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col-lg-6&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card bg-light shadow-sm mb-3 rounded&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin-top: 2%&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card-body&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h5&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card-title&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Enter Details&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h5&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;form-group&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;form-control form-control-sm&amp;#34;&lt;/span> &lt;span class="na">v-model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span> &lt;span class="na">placeholder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Your username&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;form-group&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;form-control form-control-sm&amp;#34;&lt;/span> &lt;span class="na">v-model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;repository&amp;#34;&lt;/span>
&lt;span class="na">list&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;repos&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;repository&amp;#34;&lt;/span> &lt;span class="na">placeholder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Repository name&amp;#34;&lt;/span> &lt;span class="na">v-on:keyup&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">enter&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sendReq&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;btn btn-outline-dark&amp;#34;&lt;/span> &lt;span class="na">v-on:click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sendReq&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Submit&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Shown in the code above are two important concepts in Vue:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Data Binding-&lt;/strong>
In this line below we use &lt;code>v-model=&amp;quot;username&amp;quot;&lt;/code> this means that we&amp;rsquo;re binding the value of the input to the variable &lt;code>username&lt;/code>. As the value of the input field changes, so does the variable &lt;code>username&lt;/code> in &lt;code>data()&lt;/code> and vice versa.
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;form-control form-control-sm&amp;#34;&lt;/span>
&lt;span class="na">v-model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span> &lt;span class="na">placeholder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Your username&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Event Handling-&lt;/strong>
Here we use &lt;code>v-on:click=&amp;quot;sendReq&amp;quot;&lt;/code> which means that when we click on this button it will call &lt;code>sendReq&lt;/code> which is a method we will be implementing now.
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;btn btn-outline-dark&amp;#34;&lt;/span> &lt;span class="na">v-on:click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sendReq&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Submit&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>So now we have the input form, that does nothing when we click Submit as of now. We need to write the &lt;code>sendReq&lt;/code> method which is going to send a request to the GitHub api. Make the following changes in &lt;code>script&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="nx">axios&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;axios&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">data&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">username&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">repository&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">releases&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;span class="nx">grandTotal&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">success&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">empty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">url&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="c1">// add methods
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">methods&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">sendReq&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">that&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">empty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// get data using a promise with axios
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// the request url has the format base + /repos/:user/:repo/releases
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">axios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">url&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;/repos/&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">username&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">repository&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;/releases&amp;#34;&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>
&lt;span class="c1">// the total of all the release downloads
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">grandTotal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// total of a particular release version
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">assets&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// add up the download counts of the individual
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// binary/packaged files for a particular release version
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">total&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nb">parseInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">assets&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">download_count&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// add a new field to the data object
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">total&lt;/span>
&lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">grandTotal&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">total&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// that.releases is an array of releases
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">releases&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">data&lt;/span>
&lt;span class="c1">// if we got this far that means the request was a success
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">success&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="c1">// check if there are any releases for the repo
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">empty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// if there&amp;#39;s an error then the request was not a success
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">success&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">empty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>So now if we enter a valid &lt;code>username&lt;/code> and &lt;code>repository&lt;/code> and click Submit, the response will be stored in &lt;code>releases&lt;/code>. Now we need a way to display the information that we got. Since &lt;code>releases&lt;/code> is an array, we&amp;rsquo;ll use &lt;code>v-for&lt;/code> to iteratively display one card for each release.&lt;/p>
&lt;p>For this, we&amp;rsquo;re going to create a new component called &lt;code>Card&lt;/code>, and we&amp;rsquo;ll pass data from the &lt;code>Data&lt;/code> component via &lt;strong>props&lt;/strong> (Properties). This means that whatever value we pass to a prop from the parent can be read by the child component and becomes a property of that component.&lt;/p>
&lt;p>Add the following lines to &lt;code>Data.vue&lt;/code>&lt;/p>
&lt;p>In &lt;code>Template&lt;/code>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;row justify-content-center&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col-lg-6&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h5&lt;/span> &lt;span class="na">v-if&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;grandTotal &amp;amp;&amp;amp; success&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin-bottom: 3%;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
Total Downloads: {{grandTotal.toLocaleString()}}
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h5&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- show a card for every element in releases --&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- release and index are props in the &amp;lt;Card&amp;gt; component --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Card&lt;/span> &lt;span class="na">v-for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;(release , index) in releases&amp;#34;&lt;/span> &lt;span class="na">:key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;index&amp;#34;&lt;/span> &lt;span class="na">v-bind:release&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;release&amp;#34;&lt;/span> &lt;span class="na">v-bind:index&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;index&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">Card&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- if request not successful then say that the repo could not be found --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h5&lt;/span> &lt;span class="na">v-if&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;!success&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin: 2%;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
No repository found
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h5&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- if the repo exists but it has no releases, show that it has none --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h5&lt;/span> &lt;span class="na">v-if&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;empty&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin: 2%;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
No Releases
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h5&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>In &lt;code>script&lt;/code> add
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// card component that we&amp;#39;ll be creating
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="nx">Card&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./Card.vue&amp;#39;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">components&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Card&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="c1">// ... rest of the exports
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>Here we get to see 3 more important features of Vue:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>List Rendering-&lt;/strong>
The &lt;code>v-for&lt;/code> directive is used to render a list of items based on an array. Another way to use the &lt;code>v-for&lt;/code> directive is &lt;code>v-for=&amp;quot;item in items&amp;quot;&lt;/code>, which is simpler. In this case we render cards based on the values of the &lt;code>releases&lt;/code> array.
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card shadow-sm mb-3 rounded&amp;#34;&lt;/span>
&lt;span class="na">v-for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;(release , index) in releases&amp;#34;&lt;/span> &lt;span class="na">:key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;index&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Conditional Rendering-&lt;/strong>
We use &lt;code>v-if&lt;/code> to show or hide content based on conditions. For example in this case, we want to show this message only when the GET request was not successful. &lt;code>v-if&lt;/code> can be used with &lt;code>v-else&lt;/code> and &lt;code>v-else-if&lt;/code>.
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h5&lt;/span> &lt;span class="na">v-if&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;!success&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin: 2%;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
No repository found
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h5&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Class and style binding-&lt;/strong>
The &lt;code>v-bind:class&lt;/code> or &lt;code>v-bind:style&lt;/code> can be used to manipulate the class or style of an element based on a condition. As you&amp;rsquo;ll see below, if &lt;code>release.prerelease&lt;/code> is true then the div will be given a class of &lt;code>alert-warning&lt;/code>, and if &lt;code>index == 0&lt;/code> i.e. it&amp;rsquo;s the first element in the array, then the div will be given a class of &lt;code>alert-success&lt;/code>.
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card-header&amp;#34;&lt;/span>
&lt;span class="na">v-bind:class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{ &amp;#39;alert-warning&amp;#39;: release.prerelease , &amp;#39;alert-success&amp;#39;: index == 0 }&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="cardvue">Card.vue&lt;/h3>
&lt;p>Now we&amp;rsquo;ll be creating the card component. Create a file called &lt;code>Card.vue&lt;/code> and put the following in the file.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card shadow-sm mb-3 rounded &amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin-top: 2%; text-align:left&amp;#34;&lt;/span> &lt;span class="na">v-if&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;success&amp;#34;&lt;/span> &lt;span class="na">v-for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;(release , index) in releases&amp;#34;&lt;/span> &lt;span class="na">:key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;index&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card-header&amp;#34;&lt;/span> &lt;span class="na">v-bind:class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{ &amp;#39;alert-warning&amp;#39;: release.prerelease , &amp;#39;alert-success&amp;#39;: index == 0 }&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h5&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card-title&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin-bottom:0px&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- Use the prop values passed by the parent --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">v-bind:href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;release.html_url&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;alert-link&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color:inherit&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> {{release.tag_name}}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="ni">&amp;amp;nbsp;&lt;/span>&amp;gt; &lt;span class="ni">&amp;amp;nbsp;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text-muted h6&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
{{release.total.toLocaleString()}} downloads
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h5&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card-body&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- create a table with the name of the file and the number of downloads --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">table&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;table table-borderless table-sm&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">thead&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">th&lt;/span> &lt;span class="na">scope&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Name&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">th&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">th&lt;/span> &lt;span class="na">scope&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Downloads&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">th&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">thead&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tbody&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tr&lt;/span> &lt;span class="na">v-for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;( asset , index) in release.assets&amp;#34;&lt;/span> &lt;span class="na">:key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;index&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">th&lt;/span> &lt;span class="na">scope&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;row&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;asset&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>{{asset.name}}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">th&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>{{asset.download_count.toLocaleString()}} &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tbody&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">table&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Card&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// Props that become properties when release and index are passed from the parent
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;release&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;index&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span> &lt;span class="na">scoped&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">alert-warning&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">inherit&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">alert-success&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">inherit&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h1 id="wrapping-it-up">Wrapping it up&lt;/h1>
&lt;p>Now if we serve the application with &lt;code>npm run serve&lt;/code>, you should see something like this:&lt;/p>
&lt;p>&lt;img src="https://home.aveek.io/blog/githubstats/screenshot2.png" alt="Screenshot1">&lt;/p>
&lt;p>When you click submit, or enter after typing a valid repository with releases, you should see the total downloads and the downloads for each individual release:&lt;/p>
&lt;p>&lt;img src="https://home.aveek.io/blog/githubstats/screenshot3.png" alt="Screenshot2">&lt;/p>
&lt;p>That&amp;rsquo;s it! You&amp;rsquo;ve made a real world application using Vue from scratch and used some important features like-&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Data Binding&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Event Handling&lt;/strong>&lt;/li>
&lt;li>&lt;strong>List Rendering&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Conditional Rendering&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Class and style binding&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>A slightly modified version of this project can be found on my GitHub - &lt;a href="https://github.com/Aveek-Saha/GithubStats">&lt;code>GitHub Stats&lt;/code>&lt;/a>&lt;/p>
&lt;p>And a live version of the code above can be found here - &lt;a href="https://githubstats0.firebaseapp.com/">&lt;code>Live Demo&lt;/code>&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item></channel></rss>