<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>indexeddb on Aveek's Blog</title><link>https://home.aveek.io/blog/tags/indexeddb/</link><description>Recent content in indexeddb on Aveek's Blog</description><generator>Hugo -- gohugo.io</generator><managingEditor>aveek.s98@gmail.com (Aveek Saha)</managingEditor><webMaster>aveek.s98@gmail.com (Aveek Saha)</webMaster><lastBuildDate>Fri, 17 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://home.aveek.io/blog/tags/indexeddb/index.xml" rel="self" type="application/rss+xml"/><item><title>Get started with Svelte</title><link>https://home.aveek.io/blog/post/get-started-with-svelte/</link><pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/get-started-with-svelte/</guid><description>
&lt;p>Live demo - &lt;a href="https://svelte-tut.netlify.com/">&lt;code>Demo&lt;/code>&lt;/a>&lt;/p>
&lt;p>Code for this tutorial can be found on &lt;a href="https://gitlab.com/aveeksaha/svelte-tut">&lt;code>Gitlab&lt;/code>&lt;/a>&lt;/p>
&lt;p>Live demo - &lt;a href="https://svelte-tut.netlify.com/">&lt;code>Demo&lt;/code>&lt;/a>&lt;/p>
&lt;p>Code for this tutorial can be found on &lt;a href="https://gitlab.com/aveeksaha/svelte-tut">&lt;code>Gitlab&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="what-is-svelte">What is Svelte?&lt;/h1>
&lt;blockquote>
&lt;p>Svelte is a new way to build web applications. It&amp;rsquo;s a compiler that takes your declarative components and converts them into efficient JavaScript that surgically updates the DOM.&lt;/p>
&lt;/blockquote>
&lt;p>Svelte is different from traditional component frameworks like Vue or React because it is essentially a compiler that converts your code into vanilla JavaScript at build time. This allows you to create reactive components without the performance overhead of the Virtual DOM.&lt;/p>
&lt;p>You can read more about them on their website &lt;a href="https://svelte.dev/">&lt;code>Svelte&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;p>Like all great tutorials, today I&amp;rsquo;ll be showing you how to make a ToDo application using Svelte.&lt;/p>
&lt;p>For this tutorial we&amp;rsquo;ll be building on the Svelte boilerplate and we&amp;rsquo;ll need &lt;code>degit&lt;/code> for that so start by installing &lt;code>degit&lt;/code> using&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm install -g degit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we install the boilerplate and install all the dependencies.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npx degit sveltejs/template svelte_tut
&lt;span class="nb">cd&lt;/span> svelte_tut
npm install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To run the dev server run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm run dev
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then open http://localhost:5000, you should see something like this&lt;/p>
&lt;p>&lt;img src="https://home.aveek.io/blog/svelte/svelte_1.png" alt="Screenshot1">&lt;/p>
&lt;h1 id="making-the-app">Making the app&lt;/h1>
&lt;p>Open &lt;code>src/App.svelte&lt;/code> and replace the code that was there with&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c1">// Variable to store user input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Array to store tasks
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;eat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;sleep&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>We can use Svelte to bind the variable &lt;code>task&lt;/code> to an input element, and add a function to push a new element into the array whenever we press a button.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c1">// Variable to store user input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Array to store tasks
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;eat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;sleep&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">addTask&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Dont add something if the input value is empty
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="c1">// Push a new task to the array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- The value of task will now change when you type in the input
&lt;/span>&lt;span class="c">because the task variable is now bound to the input value --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">bind:value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">{task}&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- when the onclick event is triggered it calls addTask --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">on:click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">{addTask}&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Add Task&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Now using a loop, we&amp;rsquo;ll display all the elements in &lt;code>tasks&lt;/code> array as a list and we&amp;rsquo;ll add a method to remove elements from the array by selecting the checkbox next to it.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;eat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;sleep&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">addTask&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// The DOM is only updated when an assignment is made so this
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// code below is needed even though it may seem redundant
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Otherwise the list of todos won&amp;#39;t update when we add a task
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">removeTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">/* remove bullets from list */&lt;/span>
&lt;span class="nt">ul&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">list-style&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">bind:value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">{task}&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">on:click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">{addTask}&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Add Task&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- For each element in the array, create a new list element --&amp;gt;&lt;/span>
{#each todos as todo, index (todo)}
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- When the checkbox is ticked the item is removed from the todos array --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">checkbox&lt;/span> &lt;span class="na">on:click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">{()&lt;/span> &lt;span class="err">=&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> removeTask(index)}&amp;gt;
{todo}
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
{/each}
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Now our todo list is nearly done, we can add some global CSS to the &lt;code>public/global.css&lt;/code> file.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">html&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">html&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">table&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">table&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="kc">cell&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">vertical-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">middle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>And your final result should look something like this
&lt;img src="https://home.aveek.io/blog/svelte/svelte_2.png" alt="Screenshot1">&lt;/p>
&lt;p>To compile the application we just need to run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm run build
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="persistent-storage">Persistent storage&lt;/h1>
&lt;p>If you want the data to be saved when we refresh the page we can use &lt;code>IndexedDB&lt;/code> to store the list of tasks. The IndexedDB API is not that intuitive, so we&amp;rsquo;ll use a wrapper called &lt;code>idb-keyval&lt;/code>.&lt;/p>
&lt;p>Install it with&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm install idb-keyval
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Import it in &lt;code>App.svelte&lt;/code>, remove the default values in the todo array and then load the array if it is already stored.
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// import idb-keyval
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">get&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">set&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;idb-keyval&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Empty the default values in the array
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;todos&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// If the array is stored from a previous session, assign it to todos
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">arr&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>Then we need to store the todos array everytime we add or delete tasks from it&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">addTask&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Store the array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;todos&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">removeTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">// Store the array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;todos&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Now the list wont get reset everytime you refresh the page.&lt;/p>
&lt;h1 id="deploying-to-netlify">Deploying to Netlify&lt;/h1>
&lt;p>First we&amp;rsquo;re going to add a &lt;code>.gitignore&lt;/code> with a single line-&lt;/p>
&lt;pre>&lt;code>node_modules
&lt;/code>&lt;/pre>&lt;p>Create a new project on GitHub or GitLab (Bitbucket is also available) then &lt;code>cd&lt;/code> to your project folder and run the following&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ git init
$ git remote add origin &amp;lt;git URL of your project&amp;gt;
$ git add .
$ git commit -m &lt;span class="s2">&amp;#34;Initial commit&amp;#34;&lt;/span>
$ git push origin master
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Open &lt;a href="https://www.netlify.com/">Netlify&lt;/a> in your browser and sign up for an account if you don&amp;rsquo;t already have one. Go to your &lt;a href="https://app.netlify.com/account/sites">sites&lt;/a> and click &lt;code>New site from Git&lt;/code> then follow the steps-&lt;/p>
&lt;ol>
&lt;li>select your git provider.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Choose the repository that you just created and committed to.&lt;/li>
&lt;li>Under build options go to basic build settings and fill in the following 2 fields:
&lt;ul>
&lt;li>Build command&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>npm run build
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Publish directory&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>public/
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;p>Then click deploy. When the deploy is finished visit the site url given in the overview, it should look something like this &lt;a href="https://svelte-tut.netlify.com/">Demo&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item></channel></rss>