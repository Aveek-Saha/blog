<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aveek's Blog</title><link>https://home.aveek.io/blog/</link><description>Recent content on Aveek's Blog</description><generator>Hugo -- gohugo.io</generator><managingEditor>aveek.s98@gmail.com (Aveek Saha)</managingEditor><webMaster>aveek.s98@gmail.com (Aveek Saha)</webMaster><lastBuildDate>Thu, 18 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://home.aveek.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Analysing Twitter's fake news network: Part 1</title><link>https://home.aveek.io/blog/post/twitter-fake-net-1/</link><pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/twitter-fake-net-1/</guid><description>&lt;p>Find the code and instructions on how to run &lt;a href="https://github.com/Aveek-Saha/TwitterFakeNet">&lt;code>on GitHub&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This is an exploration of Twitter&amp;rsquo;s Verified users and the news articles they tweet. Specifically looking into how likely is it that an article shared by the user is fake. The same trends are also studied in unverified users as a comparison.&lt;/p>
&lt;p>This article is going to be a little longer than my usual content, so it&amp;rsquo;ll be splitting it into three parts. I&amp;rsquo;ll do my best to keep each part as interesting as possible, and I hope you&amp;rsquo;ll have as much fun exploring this as I did.&lt;/p>
&lt;h2 id="the-plan">The Plan&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Part 1&lt;/strong> - Background and Dataset creation&lt;/li>
&lt;li>&lt;strong>Part 2&lt;/strong> - Feature extraction and classification&lt;/li>
&lt;li>&lt;strong>Part 3&lt;/strong> - Result analysis and conclusion&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;h1 id="background">Background&lt;/h1>
&lt;h2 id="what-is-a-verified-user">What is a verified user?&lt;/h2>
&lt;p>Every user that is verified is given a blue/white badge and this lets people know that an account of public interest is authentic.&lt;/p>
&lt;p>According to Twitter-&lt;/p>
&lt;blockquote>
&lt;p>An account may be verified if it is determined to be an account of public interest. Typically this includes accounts maintained by users in music, acting, fashion, government, politics, religion, journalism, media, sports, business, and other key interest areas. A verified badge does not imply an endorsement by Twitter.&lt;/p>
&lt;/blockquote>
&lt;p>So accounts are generally verified if they belong to public figures, like politicians, comedians, businessmen, etc or organizations like news networks, sports teams, corporations and so on.&lt;/p>
&lt;h2 id="why-analyse-verified-users">Why analyse verified users?&lt;/h2>
&lt;p>The verified status does not make the account any more credible than it was before verification and from recent papers, &lt;a href="https://security.cs.georgetown.edu/~tavish/twitter-credibility-chi2019.pdf">Does Being Verified Make You More Credible?&lt;/a> we can see that most users understand this.&lt;/p>
&lt;p>Because of the nature of accounts that get the verified status, they generally have a relatively large following, &lt;code>average: 117k, median: 10k&lt;/code>, comapred to the sample of unverified accounts analysed, &lt;code>average: 2.7k, median: 416&lt;/code>. So the verified users are crucial in the dissemination and propagation of information. This is why it&amp;rsquo;s worthwhile exploring how reliable or trustworthy these users are as news sources.&lt;/p>
&lt;h2 id="how-to-tell-if-a-user-is-verified">How to tell if a user is verified?&lt;/h2>
&lt;p>When you go to a users profile, if they have a small blue/white icon next to their username with a tick, that looks like this &lt;!-- raw HTML omitted -->, then that user is verified but there is no obvious way to write a script to collect details of all such users.&lt;/p>
&lt;p>There is an official Twitter Verified account &lt;a href="https://twitter.com/verified">@verified&lt;/a>, and if you look closely at all the accounts it follows, it&amp;rsquo;s easy to see it follows every verified account on Twitter. A few people might have blocked @verified but we can assume that the number is small and can be ignored.&lt;/p>
&lt;p>I picked up this method and some ideas for analysis from an article by &lt;a href="https://medium.com/startup-grind/analyzing-205-718-verified-twitter-users-cf0811781ac8">Luca Hammer&lt;/a>.&lt;/p>
&lt;h1 id="dataset">Dataset&lt;/h1>
&lt;p>The goal is to classify users as likely or unlikely to share fake news. For this we need a database of tweets and retweets that have been manually classified as real or fake, that contain the user data. Such a dataset doesnt already exist, but can be generated with the help of some simple tools.&lt;/p>
&lt;h2 id="1-twecoll">1. Twecoll&lt;/h2>
&lt;p>&lt;a href="https://github.com/jdevoo/twecoll">Twecoll&lt;/a> is a command line tool used to retrieve data from Twitter. Using twecoll, we can generate a list of all users that a user follows, and then generate a follower graph from this data.&lt;/p>
&lt;p>Once &lt;code>twecoll&lt;/code> is done getting the list of users that @verified follows, it generates a &lt;code>&amp;lt;username&amp;gt;.dat&lt;/code> file containing information about every user in that list. The important information downloaded is-&lt;/p>
&lt;ul>
&lt;li>User ID- a unique identifier for the user&lt;/li>
&lt;li>Name- the display name of the user&lt;/li>
&lt;li>Friends, Followers, Listed, Statuses count- number of: friends, followers a user has, lists a user is included in, statuses(tweets) a user has made&lt;/li>
&lt;li>Date created- the date the account was created&lt;/li>
&lt;li>Location- where the user is located, this location is self reported, and Twitter has no autocomplete for this location, so spelling mistakes are common and the data is not very reliable&lt;/li>
&lt;/ul>
&lt;h2 id="2-fakenewsnet">2. FakeNewsNet&lt;/h2>
&lt;p>&lt;a href="https://github.com/KaiDMML/FakeNewsNet">FakeNewsNet&lt;/a> is a fake news data repository, which contains two comprehensive datasets that includes news content, social context, and dynamic information. The full paper can be found &lt;a href="https://arxiv.org/pdf/1809.01286.pdf">here&lt;/a>. The news is obtained from &lt;em>two&lt;/em> fact-checking websites to obtain news with ground truth labels for fake news and true news, these websites are-&lt;/p>
&lt;ul>
&lt;li>
&lt;h4 id="politifact">PolitiFact&lt;/h4>
In PolitiFact, journalists and domain experts review the political news and provide fact-checking evaluation results to claim news articles as fake or real.&lt;/li>
&lt;li>
&lt;h4 id="gossipcop">GossipCop&lt;/h4>
GossipCop is a website for fact-checking entertainment stories aggregated from various media outlets. GossipCop provides rating scores on the
scale of 0 to 10 to classify a news story as the degree from fake to real.&lt;/li>
&lt;/ul>
&lt;p>The most important feature of FakeNewsNet is that it also downloads tweets and retweets sharing the news articles from Twitter. This means that we can get the profile of users that shared the tweets from Twitter, and then combine it with our list of verified users to see how many fake/real news articles every verified user shared.&lt;/p>
&lt;h1 id="analysing-the-dataset">Analysing the Dataset&lt;/h1>
&lt;p>TO start with, lets check some basic statistics from both groups of users, verified and unverified&lt;/p>
&lt;p>&lt;strong>Total number of verified users as of Oct 2019:&lt;/strong> 335018&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Friends&lt;/th>
&lt;th>Followers&lt;/th>
&lt;th>Listed&lt;/th>
&lt;th>Statuses&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>mean&lt;/td>
&lt;td>2074.95&lt;/td>
&lt;td>116570.99&lt;/td>
&lt;td>510.01&lt;/td>
&lt;td>16671.92&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>median&lt;/td>
&lt;td>532.00&lt;/td>
&lt;td>10152.00&lt;/td>
&lt;td>122.00&lt;/td>
&lt;td>5366.00&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>min&lt;/td>
&lt;td>0.0&lt;/td>
&lt;td>0.0&lt;/td>
&lt;td>0.0&lt;/td>
&lt;td>0.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>max&lt;/td>
&lt;td>4494592.00&lt;/td>
&lt;td>108831215.00&lt;/td>
&lt;td>3177668.00&lt;/td>
&lt;td>50437226.00&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Sample size of unverified users:&lt;/strong> 559329&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Friends&lt;/th>
&lt;th>Followers&lt;/th>
&lt;th>Listed&lt;/th>
&lt;th>Statuses&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>mean&lt;/td>
&lt;td>1634.92&lt;/td>
&lt;td>2667.76&lt;/td>
&lt;td>41.95&lt;/td>
&lt;td>30861.99&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>median&lt;/td>
&lt;td>488.00&lt;/td>
&lt;td>416.00&lt;/td>
&lt;td>6.00&lt;/td>
&lt;td>9852.00&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>min&lt;/td>
&lt;td>0.0&lt;/td>
&lt;td>-73.00&lt;/td>
&lt;td>0.0&lt;/td>
&lt;td>0.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>max&lt;/td>
&lt;td>998039.00&lt;/td>
&lt;td>6037107.00&lt;/td>
&lt;td>21171.00&lt;/td>
&lt;td>4047961.00&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>From a quick glance is evident that the average verified account has far more reach that an unverified user.&lt;/p>
&lt;h2 id="trends-on-account-creation-by-year">Trends on account creation by year&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;h3 id="for-verified-users">For verified users&lt;/h3>
&lt;p>&lt;img src="https://home.aveek.io/blog/twitterfakenet/by_year.png" alt="Verified users">&lt;/p>
&lt;h3 id="for-unverified-users">For unverified users&lt;/h3>
&lt;p>&lt;img src="https://home.aveek.io/blog/twitterfakenet/unverified_by_year.png" alt="Unverified users">&lt;/p>
&lt;p>For unverified users, the decline we saw after 2009 is present, but is not as prominent as for verified users. This is because twitter has slowed down the verification of accounts and the slowdown in verficatiion of accounts does not affect unverified users&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Getting started with Ionic</title><link>https://home.aveek.io/blog/post/getting-started-with-ionic4/</link><pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/getting-started-with-ionic4/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;p>Install the Ionic CLI via this command-&lt;/p>
&lt;pre>&lt;code>npm install -g ionic
&lt;/code>&lt;/pre>&lt;p>Then using the CLI we can create a boilerplate for a basic application with a sidemenu&lt;/p>
&lt;pre>&lt;code>ionic start movieApp sidemenu --type=angular
&lt;/code>&lt;/pre>&lt;p>Then if you do &lt;code>ionic serve&lt;/code> it should show you the basic starter on localhost.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Create a bot that updates a pinned gist</title><link>https://home.aveek.io/blog/post/pinned-gist-bot/</link><pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/pinned-gist-bot/</guid><description>&lt;p>Get the code here: &lt;a href="https://github.com/Aveek-Saha/blog-box">blog-box&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>I recently came across this &lt;a href="https://github.com/matchai/awesome-pinned-gists">awesome list for pinned gists&lt;/a> and it piqued my curiosity. So this is basically a collection of repositories that allow you to automatically update a gist periodically with some information. This gist can then be pinned to your GitHub page for people to see when they visit your profile.&lt;/p>
&lt;p>For those of you that havent heard of gists, they&amp;rsquo;re a service provided by GitHub, you can check it out &lt;a href="https://gist.github.com/">here&lt;/a>. They&amp;rsquo;re basically a collection of files that can be forked and cloned like a GitHub repo.&lt;/p>
&lt;p>These periodically updating pinned gists have a nickname, &lt;strong>boxes&lt;/strong>. Some examples of what you can put on these gists from &lt;code>awesome-pinned-gists&lt;/code> include, your &lt;a href="https://github.com/matchai/bird-box">most recent tweet&lt;/a>, &lt;a href="https://github.com/jacc/music-box">weekly music listening report&lt;/a>, &lt;a href="https://github.com/mdluo/goodreads-box">books you&amp;rsquo;re currently reading&lt;/a>, etc.&lt;/p>
&lt;p>Basically if you know a service that has an API you can display it on a pinned gist. In this tutorial I&amp;rsquo;ll show you how to create a gist that updates regularly with Your latest Dev.to blog post, but this method can be adapted for any service with an API. You&amp;rsquo;re only limited by your imagination and publicly available APIs.&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;p>This tutorial will have four parts-&lt;/p>
&lt;ol>
&lt;li>Setup all the prerequisites before you start coding.&lt;/li>
&lt;li>Programatically update a gist.&lt;/li>
&lt;li>Get data from the API and update the gist.&lt;/li>
&lt;li>Setup a GitHub workflow to auto update.&lt;/li>
&lt;/ol>
&lt;h2 id="1-prerequisites">1. Prerequisites&lt;/h2>
&lt;h3 id="create-a-github-token">Create a GitHub token&lt;/h3>
&lt;p>Create a new personal access token at &lt;a href="https://github.com/settings/tokens">https://github.com/settings/tokens&lt;/a> and remember to save the token somewhere because you can only see it once.&lt;/p>
&lt;h3 id="creating-the-gist">Creating the Gist&lt;/h3>
&lt;p>The first thing we need to do is create a gist. So go to &lt;a href="https://gist.github.com/">https://gist.github.com/&lt;/a> and make one, create a file, name it whatever you want, and add whatever description and content you want for now. You&amp;rsquo;ll need to add some content to the file because you can&amp;rsquo;t create an empty gist.&lt;/p>
&lt;p>Once you&amp;rsquo;ve created a gist, the url will look something like this &lt;code>https://gist.github.com/&amp;lt;username&amp;gt;/&lt;/code> &lt;strong>&lt;code>&amp;lt;gist id&amp;gt;&lt;/code>&lt;/strong>. Copy this gist id and keep it somewhere for later use.&lt;/p>
&lt;h3 id="setup-the-project">Setup the project&lt;/h3>
&lt;p>Create a new repository on GitHub, clone it to your local setup and make it your working directory. Then we&amp;rsquo;ll set up npm, answer the questions asked and it should create a &lt;code>package.json&lt;/code> for you.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm init
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we&amp;rsquo;ll create the other two important files in this project, &lt;code>index.js&lt;/code> which will be our main file and &lt;code>action.yml&lt;/code>, which we&amp;rsquo;ll be using later when we&amp;rsquo;re setting up the GitHub action. We also need to create a &lt;code>.env&lt;/code> file that has our environment variables for local development.&lt;/p>
&lt;h3 id="install-the-dependencies">Install the dependencies&lt;/h3>
&lt;p>We&amp;rsquo;ll need a few packages for this project, how they&amp;rsquo;re used will become clear as you progress through this tutorial&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm i @octokit/rest axios dotenv wrap-ansi
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-updating-the-gist">2. Updating the Gist&lt;/h2>
&lt;h3 id="environment-variables">Environment variables&lt;/h3>
&lt;p>Before we do anything else, first add the environment variables to the &lt;code>.env&lt;/code> file. You can keep the &lt;code>DEV_USERNAME&lt;/code> field empty for now.&lt;/p>
&lt;p>You can store any API keys or secrets in this file. This file won&amp;rsquo;t be pushed to your repo, instead you&amp;rsquo;ll have to add the variables in this file as secrets under repository settings. Since I&amp;rsquo;m using the dev.to API, which doesn&amp;rsquo;t need an API key to get posts, I&amp;rsquo;m storing the username which is the only parameter you need to retrieve posts.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="nx">GIST_ID&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;Your gist id&amp;gt;&amp;#34;&lt;/span>
&lt;span class="nx">GH_TOKEN&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;Your github token&amp;gt;&amp;#34;&lt;/span>
&lt;span class="nx">DEV_USERNAME&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="main-script">Main script&lt;/h3>
&lt;p>Now we&amp;rsquo;ll write some code to update the gist we&amp;rsquo;ve created. Add this to &lt;code>index.js&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;dotenv&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Octokit&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;@octokit/rest&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Get the environment variables
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">GIST_ID&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">GH_TOKEN&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">githubToken&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">DEV_USERNAME&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">devUsername&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Authentication
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">octokit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Octokit&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">auth&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`token &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">githubToken&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// Function to update the gist contents
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">updateGist&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">gist&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Get the gist you made using the gist id
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">gist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">octokit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gists&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">gist_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unable to get gist&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Only one file was created, so fetch it&amp;#39;s filename
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">filename&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">gist&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Update the gist
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// The description is displayed when the gist is pinned
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// so we can update the description along with the contents
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// to show more information when it&amp;#39;s pinned
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">octokit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gists&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">update&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">gist_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">description&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`This is some description`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">files&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`This is some example content`&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unable to update gist&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">updateGist&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">})();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To test whether this script works, run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">node index.js
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you check your gist, the description and content should have updated to whatever strings you passed to the update functions.&lt;/p>
&lt;h2 id="3-fetching-the-data">3. Fetching the data&lt;/h2>
&lt;p>Now we&amp;rsquo;re going to shift our focus to getting the most recent post from our dev.to account. In &lt;code>index.js&lt;/code> update/add these functions.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="c1">// The endpoint for the request
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">baseURL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;https://dev.to/api/articles&amp;#39;&lt;/span>
&lt;span class="c1">// Parameters to pass to the dev.to api
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">params&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">username&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">devUsername&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// This is useful if the string is too long to display on the pinned gist
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">truncate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">substr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;…&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="c1">// Get the most recent post
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">getPost&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">axios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">baseURL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">post&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">// Pass the post as a parameter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">updateGist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Pass the post as a parameter
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">updateGist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">gist&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">gist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">octokit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gists&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">gist_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unable to get gist&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">filename&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">gist&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">// Tags from the post
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">tags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tag_list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;, #&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// In the gist show the title, a short excerpt from the post
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// and the date the post was published in the contents of the gist
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sb">`📜 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">truncate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">title&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\s+/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n ▶ &lt;/span>&lt;span class="si">${&lt;/span>
&lt;span class="nx">truncate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">description&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\s+/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n🔖 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">tags&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n📆 &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readable_publish_date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\s+/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// In the post description show the username, number of likes and comments
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">octokit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gists&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">update&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">gist_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gistId&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">description&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`dev.to/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">devUsername&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> | ❤ &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">public_reactions_count&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> | 💬 &lt;/span>&lt;span class="si">${&lt;/span>
&lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">comments_count&lt;/span>
&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">files&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">wrapAnsi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">content&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">hard&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">trim&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Unable to update gist&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="sb">n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nx">getPost&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">})();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>wrapAnsii&lt;/code> library is used to wrap text that&amp;rsquo;s longer than a certain length. Otherwise the text will be abruptly cut off if it&amp;rsquo;s too long when pinned.&lt;/p>
&lt;p>Pin the gist to your profile and then run this script. You should get something that looks like this.&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/31800695/95653499-c52a4580-0b16-11eb-863a-e23c43e4ae21.png" alt="Screenshot">&lt;/p>
&lt;p>If you want to use a different API this step will vary for you, but the basic idea is still the same. Extract the data you need from the API and pass it to the update function so that it can display it on the gist.&lt;/p>
&lt;h2 id="4-setup-github-action">4. Setup GitHub Action&lt;/h2>
&lt;p>Now we have a script that updates our pinned gist with the desired blog post, but we&amp;rsquo;re running it manually. Now we&amp;rsquo;ll set up a GitHub action with a cron job so that it runs on a schedule and updates automatically.&lt;/p>
&lt;h3 id="setup-run-command">Setup run command&lt;/h3>
&lt;p>In &lt;code>action.yml&lt;/code> we&amp;rsquo;ll set up node and the file that should be run using node.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>blog-box&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">author&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&amp;lt;your-username&amp;gt;&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>GitHub&lt;span class="w"> &lt;/span>Action&lt;span class="w"> &lt;/span>for&lt;span class="w"> &lt;/span>updating&lt;span class="w"> &lt;/span>a&lt;span class="w"> &lt;/span>gist&lt;span class="w"> &lt;/span>with&lt;span class="w"> &lt;/span>your&lt;span class="w"> &lt;/span>latest&lt;span class="w"> &lt;/span>blog&lt;span class="w"> &lt;/span>post.&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">runs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">using&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>node12&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">main&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>./index.js&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="setup-workflow">Setup workflow&lt;/h3>
&lt;p>Create a new folder under &lt;code>.github/workflows/&lt;/code> and add a GitHub action file named &lt;code>update.yml&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Update&lt;span class="w"> &lt;/span>gist&lt;span class="w"> &lt;/span>with&lt;span class="w"> &lt;/span>latest&lt;span class="w"> &lt;/span>songs&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># THis option allows you to run the script manually&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">workflow_dispatch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># This sets up a cron job that runs the script once a day&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">schedule&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">cron&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0 0 * * *&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Create a job&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">blog-box&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>ubuntu-latest&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>actions/checkout@v2&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Install dependencies&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>npm&lt;span class="w"> &lt;/span>install&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Update&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>./&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Use the secrets as environment variables&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">GH_TOKEN&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>${{&lt;span class="w"> &lt;/span>secrets.GH_TOKEN&lt;span class="w"> &lt;/span>}}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">GIST_ID&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>${{&lt;span class="w"> &lt;/span>secrets.GIST_ID&lt;span class="w"> &lt;/span>}}&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEV_USERNAME&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>${{&lt;span class="w"> &lt;/span>secrets.DEV_USERNAME&lt;span class="w"> &lt;/span>}}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to find out more about cron jobs and how to schedule them, check out this website: &lt;a href="https://crontab.guru/">https://crontab.guru/&lt;/a>.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Once you push your changes, go to &lt;code>actions &amp;gt; Update gist with latest post &amp;gt; Run workflow&lt;/code> in your GitHub repository. The action should run successfully and your pinned gist will show your most recent &lt;code>dev.tp&lt;/code> blog post. The workflow will run at 00:00 UTC automatically every day.&lt;/p></description></item><item><title>How to prepare for the TensorFlow Developer Certificate Exam</title><link>https://home.aveek.io/blog/post/tensorflow-developer-certificate/</link><pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/tensorflow-developer-certificate/</guid><description>&lt;p>A brief summary of what materials to study from and some pointers to prepare for the TensorFlow Developer Certificate Exam.&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In this guide I&amp;rsquo;ll be going over what the TensorFlow Developer Certificate is, why you might want to give the exam, what you need to study to do well on the test and finally some pointers for when you&amp;rsquo;re giving the test.&lt;/p>
&lt;h1 id="what-is-it">What is it?&lt;/h1>
&lt;p>The TensorFlow Developer Certificate is an exam that tests your proficiency in solving machine learning and deep learning problems using TensorFlow in python.&lt;/p>
&lt;p>This is a coding based exam and the certificate you receive will be valid for 3 years from the date of issue. Apart from the certificate, your name will also be added to the &lt;a href="https://www.tensorflow.org/certificate-network">TensorFlow Certificate Network&lt;/a>, where you can see other developers who have cleared the test. You can also search for specific developers from this page, or narrow it down by location.&lt;/p>
&lt;h1 id="why-should-i-get-this-certification">Why should I get this certification?&lt;/h1>
&lt;p>The certification is basically a sign to potential employers or clients that you are able to formulate and solve ML or DL problems with TensorFlow. If you&amp;rsquo;re either looking to get into Artificial intelligence or switch roles to a ML engineer this might be a worthwhile endeavor to pursue.&lt;/p>
&lt;p>However there are a few things to keep in mind before you decide to pursue this certification.&lt;/p>
&lt;ul>
&lt;li>This is a relatively new certification, at the time I&amp;rsquo;m writing this, and as such it&amp;rsquo;s importance in the industry might not be very high yet.&lt;/li>
&lt;li>It&amp;rsquo;s not cheap. At 100 USD it&amp;rsquo;s fairly expensive and might be inaccessible to a lot of people. There might be more cost effective ways to display your competence in TensorFlow.&lt;/li>
&lt;li>This certification does not test Machine learning and deep learning fundamentals, only your competence in implementing these concepts using TensorFlow.&lt;/li>
&lt;/ul>
&lt;p>If you&amp;rsquo;re okay with the caveats I&amp;rsquo;ve listed above and you want to build your profile, then it&amp;rsquo;s a great certification to have. I personally wrote the exam because I&amp;rsquo;m always looking for a new challenge and I&amp;rsquo;m passionate about Machine learning and its applications.&lt;/p>
&lt;p>This is one of the only machine learning specific professional certifications around, and if you&amp;rsquo;re going to be using TensorFlow might as well get your certification from the people that created it.&lt;/p>
&lt;h1 id="how-should-i-prepare">How should I prepare?&lt;/h1>
&lt;p>The TensorFlow Developer Certificate tests your ability to use TensorFlow to solve a subset of machine learning problems. For the extensive list of topics check the &lt;a href="https://www.tensorflow.org/site-assets/downloads/marketing/cert/TF_Certificate_Candidate_Handbook.pdf">handbook&lt;/a>&lt;/p>
&lt;p>To summarise, there are 4 main topics covered in the exam:&lt;/p>
&lt;ol>
&lt;li>Tensorflow basics&lt;/li>
&lt;li>Image classification&lt;/li>
&lt;li>Natural language processing&lt;/li>
&lt;li>Time series and sequences&lt;/li>
&lt;/ol>
&lt;p>Now depending on how familiar you are with Neural networks and deep learning your approach to the test will vary. For both cases you&amp;rsquo;ll need a healthy dose of reading mixed with coding. Ideally you want to be implementing as many concepts you read about using code as possible.&lt;/p>
&lt;h3 id="1-already-familiar-with-deep-learning-concepts">1. Already familiar with deep learning concepts&lt;/h3>
&lt;p>Start with the DeepLearning.AI TensorFlow Developer specialization on Coursera. The course is taught by Laurence Moroney and covers basically all the details you&amp;rsquo;ll need for the exam over the 4 course specialization&lt;/p>
&lt;p>Alternatively you can use Intro to TensorFlow for Deep Learning on Udemy which is free and has similar course content.&lt;/p>
&lt;p>A useful textbook to refer to for this is Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition. The second edition is important because it is updated for tensorflow 2.x. Only the second half of the book is useful, i.e, Part II.&lt;/p>
&lt;p>You can find an early release of the 2nd Edition of the textbook &lt;a href="https://www.knowledgeisle.com/wp-content/uploads/2019/12/2-Aur%C3%A9lien-G%C3%A9ron-Hands-On-Machine-Learning-with-Scikit-Learn-Keras-and-Tensorflow_-Concepts-Tools-and-Techniques-to-Build-Intelligent-Systems-O%E2%80%99Reilly-Media-2019.pdf">here&lt;/a>&lt;/p>
&lt;h3 id="2-complete-beginner-to-deep-learning">2. Complete beginner to deep learning&lt;/h3>
&lt;p>If you are a complete novice to this field I&amp;rsquo;d recommend you start off with the fundamentals and mathematics behind deep learning before diving into TensorFlow. A good place to begin is the Deep Learning Specialization from deeplearning.ai on Coursera.&lt;/p>
&lt;p>Another great resource is the Introduction to Deep Learning course from MIT, which you can find at &lt;a href="http://introtodeeplearning.com/">http://introtodeeplearning.com/&lt;/a>. Keep in mind that only the first few courses are required for the topics tested in this exam.&lt;/p>
&lt;p>After this you can go through the materials I&amp;rsquo;ve mentioned in #1&lt;/p>
&lt;h1 id="test-environment">Test Environment&lt;/h1>
&lt;p>The test has to be taken on the PyCharm IDE and will require a specific version of Python to be installed. If you&amp;rsquo;re new to PyCharm like I was, I&amp;rsquo;d recommend you spend some time getting used to the layout of the editor. You can watch the videos at &lt;a href="https://www.jetbrains.com/pycharm/learning-center/">https://www.jetbrains.com/pycharm/learning-center/&lt;/a> in order to get familiarise yourself with the layout and features.&lt;/p>
&lt;p>For specific instructuions on how to set up the environment check here &lt;a href="https://www.tensorflow.org/extras/cert/Setting_Up_TF_Developer_Certificate_Exam.pdf">https://www.tensorflow.org/extras/cert/Setting_Up_TF_Developer_Certificate_Exam.pdf&lt;/a>&lt;/p>
&lt;h1 id="test-day-pointers">Test day pointers&lt;/h1>
&lt;p>The test is 5 hours long and cannot be paused once it&amp;rsquo;s been started. I cannot give away exactly what&amp;rsquo;s asked in the exam because that would be cheating, but I can give some tips.&lt;/p>
&lt;p>The exam can be comfortably finished in around 3 hours, this is how long it took me. Your test experience may vary based on how familiar you are with the IDE, Python and TensorFlow. After each question, you will have to submit your model for scoring and you need to be connected to the internet for this. The scores are out of 5 for each and not all questions have the same weightage, harder questions are given higher priority. You will be able to see how much you scored out of 5 once you submit the model.&lt;/p>
&lt;p>Most of the models can be trained within the allotted time using a fairly modern CPU, if training is taking too long, you can always just train the model in Colab, and then download the model for submission.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>If you go through the materials I&amp;rsquo;ve listed above and practice coding the concepts regularly you should be able to sail through this test. I&amp;rsquo;ve purposely not mentioned a time frame for preparation because it&amp;rsquo;ll vary wildly based on your learning ability and previous experience in this field.&lt;/p>
&lt;p>Good luck and happy testing!&lt;/p></description></item><item><title>How to create a GitHub profile Readme</title><link>https://home.aveek.io/blog/post/create-github-profile-readme/</link><pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/create-github-profile-readme/</guid><description>&lt;p>If you want to see what this looks like - &lt;a href="https://github.com/Aveek-Sahar">&lt;code>My gitHub Profile&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
You can also check out the repository here - &lt;a href="https://github.com/Aveek-Saha/aveek-saha">&lt;code>Aveek-Saha&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>GitHub has recently added the ability to create a README for your profile that acts as an About Me section or an Introduction to your profile.&lt;/p>
&lt;p>This can be helpful because the GitHub bios have a character limit and you might not be able to fit everything you want in there. So your profile readme is a good way to show visitors to your profile everything you need to introduce yourself.&lt;/p>
&lt;h1 id="steps">Steps&lt;/h1>
&lt;p>To get this About me section, follow these steps:&lt;/p>
&lt;ol>
&lt;li>Create a new repository&lt;/li>
&lt;li>Set the repository name to your github username&lt;/li>
&lt;li>Make sure the repository is public&lt;/li>
&lt;li>Select the option to initialize the repository with a README&lt;/li>
&lt;li>Create Repository&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://home.aveek.io/blog/githubprofile/screenshot1.png" alt="Screenshot1">&lt;/p>
&lt;p>Now if you check your Github profile, you should see something like this above your pinned repos.&lt;/p>
&lt;p>&lt;img src="https://home.aveek.io/blog/githubprofile/screenshot2.png" alt="Screenshot2">&lt;/p>
&lt;p>You can look around and find some really interesting things to do with your bio, your imagination is your only limitation.&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>Getting started with Svelte and Electron</title><link>https://home.aveek.io/blog/post/electron-svelte/</link><pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/electron-svelte/</guid><description>&lt;p>The code for this tutorial can be found &lt;a href="https://gitlab.com/aveeksaha/electron-svelte">&lt;code>here&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This is a guide to get you up and running with &lt;a href="https://svelte.dev/">&lt;code>Svelte&lt;/code>&lt;/a> + &lt;a href="https://www.electronjs.org/">&lt;code>Electron&lt;/code>&lt;/a>. We&amp;rsquo;ll just be going through the basic setup process to give you a starting point to develop desktop applications with Svelte by using Electron. If you want to learn more about Svelte basics you can check out this tutorial here: &lt;a href="https://home.aveek.io/blog/post/get-started-with-svelte/">Get started with Svelte&lt;/a>.&lt;/p>
&lt;p>You can follow this tutorial even if you&amp;rsquo;re not too familiar with Svelte because we&amp;rsquo;ll just be setting things up for the project here.&lt;/p>
&lt;h1 id="create-a-svelte-app">Create a Svelte app&lt;/h1>
&lt;p>To get started we&amp;rsquo;ll first be cloning the Svelte boilerplate using a tool called &lt;code>degit&lt;/code>. Let&amp;rsquo;s start by installing &lt;code>degit&lt;/code> using&lt;/p>
&lt;pre>&lt;code>npm install -g degit
&lt;/code>&lt;/pre>&lt;p>Then we install the boilerplate and install all the dependencies.&lt;/p>
&lt;pre>&lt;code>npx degit sveltejs/template svelte_electron
cd svelte_electron
npm install
&lt;/code>&lt;/pre>&lt;p>To run the dev server run:&lt;/p>
&lt;pre>&lt;code>npm run dev
&lt;/code>&lt;/pre>&lt;p>When you open http://localhost:5000, you should see a default web page. This means that the setup was successful!&lt;/p>
&lt;h1 id="set-up-electron">Set up Electron&lt;/h1>
&lt;p>Now we&amp;rsquo;ll install &lt;code>electron&lt;/code> as a development dependency.&lt;/p>
&lt;pre>&lt;code>npm i -D electron@latest
&lt;/code>&lt;/pre>&lt;p>Then we&amp;rsquo;ll install &lt;code>electron-reload&lt;/code> and &lt;code>electron-is-dev&lt;/code> for some quality of life improvement during development. &lt;code>electron-reload&lt;/code> will let us watch files and reload the electron app automatically to reflect changes we make to the code. &lt;code>electron-is-dev&lt;/code> will allow us to detect if the application is running in production or development.&lt;/p>
&lt;pre>&lt;code>npm i -D electron-reload electron-is-dev
&lt;/code>&lt;/pre>&lt;p>Now we need to create an entry point for our electron app. Create a file called &lt;code>main.js&lt;/code> with the following code.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">BrowserWindow&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;electron&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;path&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;url&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">isDev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;electron-is-dev&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// If in development use electron-reload to watch for
&lt;/span>&lt;span class="c1">// changes in the current directory
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isDev&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;electron-reload&amp;#39;&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="nx">__dirname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">electron&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">__dirname&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">/node_modules/electron`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">createWindow&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Create the browser window with node integration
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">win&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">BrowserWindow&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">800&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">height&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">600&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">webPreferences&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">nodeIntegration&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">loadURL&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">pathname&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">__dirname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;public/index.html&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">protocol&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;file:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">slashes&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Open the DevTools only if app is in development
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// If in production, don&amp;#39;t show.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isDev&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">webContents&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">openDevTools&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">whenReady&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">createWindow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;activate&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">BrowserWindow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getAllWindows&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">createWindow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;window-all-closed&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">platform&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s1">&amp;#39;darwin&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">quit&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we need to set up some scripts in our &lt;code>package.json&lt;/code> and define the Electron entry point.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span> &lt;span class="err">....&lt;/span>
&lt;span class="nt">&amp;#34;main&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;main.js&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="err">...&lt;/span>
&lt;span class="nt">&amp;#34;app&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;electron .&amp;#34;&lt;/span>
&lt;span class="err">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="err">....&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There&amp;rsquo;s one last step before your application can be rendered. In &lt;code>public/index.html&lt;/code> we need to make the urls absolute so that Electron doesn&amp;rsquo;t give us a resource not found error while loading the page.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;viewport&amp;#39;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;width=device-width,initial-scale=1&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Svelte app&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;icon&amp;#39;&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;image/png&amp;#39;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;favicon.png&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;stylesheet&amp;#39;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;global.css&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;stylesheet&amp;#39;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;build/bundle.css&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">defer&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;build/bundle.js&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run &lt;code>npm run build&lt;/code> to create the compiled JavaScript and CSS files in the &lt;code>public/build/&lt;/code> directory.&lt;/p>
&lt;p>Now if you run &lt;code>npm run app&lt;/code> you should see the same default welcome page you saw on your browser in an Electron window.&lt;/p>
&lt;h1 id="live-reload-both-electron-and-svelte">Live reload both electron and Svelte&lt;/h1>
&lt;p>The way the application is set up now, You could run &lt;code>npm run dev&lt;/code> in one terminal to enable live reload for Svelte, and &lt;code>npm run app&lt;/code> in another terminal to load the electron app. This is a little inconvenient and we can combine both these functions and run them simultaneously.&lt;/p>
&lt;p>For this we&amp;rsquo;ll be using &lt;a href="https://www.npmjs.com/package/concurrently">&lt;code>concurrently&lt;/code>&lt;/a>. So we&amp;rsquo;ll first install it and then update our scripts in &lt;code>package.json&lt;/code>.&lt;/p>
&lt;pre>&lt;code>npm i -D concurrently
&lt;/code>&lt;/pre>&lt;p>Then we&amp;rsquo;ll create a script to run both Svelte and Electron parallelly.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="err">...&lt;/span>
&lt;span class="nt">&amp;#34;app-dev&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;concurrently \&amp;#34;npm:dev\&amp;#34; \&amp;#34;npm:app\&amp;#34;&amp;#34;&lt;/span>
&lt;span class="err">...&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By running &lt;code>npm run app-dev&lt;/code> you can live reload both Electron and Svelte!&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Now you have a starting point to start building your Electron apps with Svelte at the frontend. While there are some starter templates available, the setup process for this is pretty straightforward and easy to do by yourself.&lt;/p>
&lt;p>If you&amp;rsquo;re interested in learning Svelte you can check out this tutorial here: &lt;a href="https://home.aveek.io/blog/post/get-started-with-svelte/">Get started with Svelte&lt;/a>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Deploying Svelte apps to Firebase with GitHub actions</title><link>https://home.aveek.io/blog/post/deploy-svelte-firebase/</link><pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/deploy-svelte-firebase/</guid><description>&lt;p>Check the final application here - &lt;a href="pix2ascii.web.app">&lt;code>pix2ascii&lt;/code>&lt;/a>.&lt;/p>
&lt;p>The full code for this project can be found on &lt;a href="https://github.com/Aveek-Saha/pix2ascii">&lt;code>GitHub&lt;/code>&lt;/a>
or read the previous part here: &lt;a href="https://home.aveek.io/blog/post/getting-started-with-firebase-functions/">&lt;code>Getting started with Firebase Functions&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In this tutorial we&amp;rsquo;ll be deploying a Svelte application to Firebase hosting. We&amp;rsquo;ll also be automating the deploy process using GitHub actions so that it deploys every time we push changes to GitHub. For those of you not familiar with Svelte, I&amp;rsquo;ve already written a beginners guide on Svelte that you can check out &lt;a href="https://home.aveek.io/blog/post/get-started-with-svelte/">here&lt;/a>. It&amp;rsquo;s fairly easy to learn the basics so be sure to go through that first.&lt;/p>
&lt;p>If you haven&amp;rsquo;t checked it out already, read the &lt;a href="https://home.aveek.io/blog/post/getting-started-with-firebase-functions/">first part&lt;/a> of this series where I set up a Firebase cloud function as a backend for our application.&lt;/p>
&lt;p>Even if your use case is different and you&amp;rsquo;re only interested in Automating the deploy process to firebase hosting you can still follow along and modify the steps to suit you choice of frontend framework. Alternatively you can also skip ahead to the Continuous Deployment section below.&lt;/p>
&lt;h2 id="recap">Recap&lt;/h2>
&lt;p>In the last part we created a backend Firebase function that accepts an image along with a few other parameters in order to convert that image into ascii art and sends it back as a string.&lt;/p>
&lt;p>Now that we have our cloud function set up, let&amp;rsquo;s create the frontend from where we can upload the image and get the converted result. For this we&amp;rsquo;ll first need to set up firebase hosting to deploy the frontend.&lt;/p>
&lt;h1 id="setting-up-firebase">Setting up Firebase&lt;/h1>
&lt;h3 id="0-initial-setup-">0. Initial setup-&lt;/h3>
&lt;p>If you&amp;rsquo;ve come here from the previous part you can skip step 0, otherwise first follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create a Firebase project-
Go to the firebase console and create a new project. You can choose to set up Google analytics for the project, but it&amp;rsquo;s not really important for this application.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Set up Firebase CLI-
You&amp;rsquo;ll need to have Node.js installed already on your system. Install the cli through npm by running &lt;code>npm install -g firebase-tools&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Initialize the Firebase SDK-
Run &lt;code>firebase login&lt;/code> to log in to the CLI via the browser using the account your new project is linked to.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="1-check-your-directory-">1. Check your directory-&lt;/h3>
&lt;p>Go to the root directory of your Firebase project.&lt;/p>
&lt;h3 id="2-run-firebase-init-">2. Run Firebase init-&lt;/h3>
&lt;p>Once in the root directory, run &lt;code>firebase init&lt;/code>, If you&amp;rsquo;ve been following along from the previous article it&amp;rsquo;ll tell you that you&amp;rsquo;re already in a firebase project but that&amp;rsquo;s fine, setting up hosting won&amp;rsquo;t affect the function you created. When prompted for which features you want to set up, select &lt;code>hosting&lt;/code>.&lt;/p>
&lt;h3 id="3-config-options-">3. Config options-&lt;/h3>
&lt;p>&lt;code>What do you want to use as your public directory?&lt;/code>, leave as default (public). &lt;code>Configure as a single-page app?&lt;/code>, yes&lt;/p>
&lt;h1 id="svelte-setup">Svelte Setup&lt;/h1>
&lt;p>We&amp;rsquo;ll be using a tool called &lt;code>degit&lt;/code> to get the basic template for our Svelte app, so first install that if you don&amp;rsquo;t already have it installed.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm install -g degit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a svelte application in the Firebase project directory&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npx degit sveltejs/template client
&lt;span class="nb">cd&lt;/span> client
npm i
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To run the dev server run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm run dev
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you visit http://localhost:5000 the default startup page should be displayed and this means your setup was successful.&lt;/p>
&lt;h2 id="configure-svelte">Configure Svelte&lt;/h2>
&lt;p>In order to deploy Svelte to Firebase hosting we need to make some changes first.&lt;/p>
&lt;p>If you look at your file structure, you should see two &lt;code>public&lt;/code> folders that are placed something like this.&lt;/p>
&lt;pre>&lt;code>|--client/
| |--public/
|
|--public/
&lt;/code>&lt;/pre>&lt;p>The public folder created by firebase hosting needs to be replaced by the one generated by Svelte. That means replace &lt;code>./public&lt;/code> with &lt;code>./client/public&lt;/code>. This is done because the &lt;code>./public&lt;/code> folder is the one deployed to Firebase hosting and we want this to be our compiled Svelte code.&lt;/p>
&lt;p>Just copying the folder won&amp;rsquo;t do however, we need to configure the rollup script &lt;code>client/client/rollup.config.js&lt;/code> so that Svelte compiles 0ur frontend to the new &lt;code>public/build/&lt;/code> folder. To do this replace this section of the config file-&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="p">..&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">..&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this-&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">input&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;src/main.js&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">output&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">sourcemap&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">format&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;iife&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;app&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// Change Js bundle location
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;../public/build/bundle.js&amp;#39;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">plugins&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="nx">svelte&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">dev&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">production&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// Change css bundle location
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">css&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">css&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">css&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;../public/build/bundle.css&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}),&lt;/span>
&lt;span class="nx">resolve&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">browser&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">dedupe&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;svelte&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}),&lt;/span>
&lt;span class="nx">commonjs&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="o">!&lt;/span>&lt;span class="nx">production&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">serve&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="c1">// Watch the new `public` directory and refresh
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// the browser on changes
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">production&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">livereload&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;../public&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">production&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">terser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">watch&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">clearScreen&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Svelte uses &lt;code>sirv&lt;/code> to host the application on your localhost and we&amp;rsquo;ll have to change the target folder that &lt;code>sirv&lt;/code> serves to the new &lt;code>public&lt;/code> folder. To do this go to the &lt;code>scripts&lt;/code> section of &lt;code>client/package.json&lt;/code> and look for the &lt;code>&amp;quot;start&amp;quot;&lt;/code>script. Replace it with the following-&lt;/p>
&lt;pre>&lt;code>&amp;quot;scripts&amp;quot;: {
...
&amp;quot;start&amp;quot;: &amp;quot;sirv ../public&amp;quot;
...
}
&lt;/code>&lt;/pre>&lt;p>Now if you run &lt;code>npm run dev&lt;/code> to serve your application again you should see the same default starting page when you visit http://localhost:5000 if everything is set up correctly.&lt;/p>
&lt;h2 id="frontend-code">Frontend code&lt;/h2>
&lt;p>I will not be explaining the code for the frontend in detail as the main objective of this post is to show you how to set up and deploy the application. The frontend is basically a multipart form where the user has to upload the image, specify the number of characters used to represent one row of the resulting ascii image(width) and select the set of characters that the ascii art will be made from(charset).&lt;/p>
&lt;p>Once all this information has been submitted by the user, an AJAX request is sent to the cloud function at &lt;code>https://us-central1-&amp;lt;project&amp;gt;.cloudfunctions.net/ascii&lt;/code> and the resulting ascii art string in the response is printed on the screen.&lt;/p>
&lt;p>You can see a demo of this in action at &lt;a href="https://pix2ascii.web.app/">Pix2Ascii&lt;/a> or check out the Code on &lt;a href="https://github.com/Aveek-Saha/pix2ascii/blob/master/client/src/App.svelte">GitHub&lt;/a>. You can very easily implement this functionality using another framework or your own UI.&lt;/p>
&lt;p>This ends the Svelte portion of this tutorial.&lt;/p>
&lt;h1 id="continuous-deployment">Continuous Deployment&lt;/h1>
&lt;p>Now we&amp;rsquo;ll be looking at how we can deploy our code automatically on every push by using GitHub actions so obviously you&amp;rsquo;ll be needing a GitHub repository for this. To set up a GitHub action we need to create a new workflow, and there are 2 ways to do this-&lt;/p>
&lt;ol>
&lt;li>
&lt;p>In your github repository, go to the actions tab, and select &lt;code>set up a workflow yourself&lt;/code>. This will take you to an editor with a basic workflow that you can replace with the workflow we&amp;rsquo;ll be creating below.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If it doesn&amp;rsquo;t already exist, in your repository directory, create a &lt;code>.github&lt;/code> folder and then a folder called &lt;code>workflows&lt;/code> in it. Create a workflow file there under &lt;code>.github/workflows/&lt;/code> and name it &lt;code>deploy.yml&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>In order to authenticate our deploys to firebase, we&amp;rsquo;ll need an auth token from firebase first. To get the token, run &lt;code>firebase login:ci&lt;/code> in your terminal and copy the token it returns. Then add this token to your repository by going to &lt;code>Settings &amp;gt; Secrets &amp;gt; New secret&lt;/code>. Name the token &lt;code>FIREBASE_TOKEN&lt;/code> and paste the token you copied from the terminal.&lt;/p>
&lt;p>In the &lt;code>.yml&lt;/code> file we&amp;rsquo;ll specify the steps for our workflow.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>CI/CD&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># When the workflow will run, in this case&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># on push or pull request to the master branch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="w"> &lt;/span>master&lt;span class="w"> &lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pull_request&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="w"> &lt;/span>master&lt;span class="w"> &lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># Jobs are a sequence of steps&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># This workflow has only one Job, build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># The type of container the workflow will run on &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>ubuntu-latest&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># The sequence of steps for this job&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Checks-out your repository so your job can access it&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>actions/checkout@v2&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># First install dependencies for the front end and then &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># for the cloud function. If you only have frontend remove the lines &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># from after &amp;#34;npm run build&amp;#34; till the next step i.e. &amp;#34;Firebase Deploy&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Build&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">|
&lt;/span>&lt;span class="sd"> cd client&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>npm&lt;span class="w"> &lt;/span>i&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>npm&lt;span class="w"> &lt;/span>run&lt;span class="w"> &lt;/span>build&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>cd&lt;span class="w"> &lt;/span>..&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>cd&lt;span class="w"> &lt;/span>functions&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>npm&lt;span class="w"> &lt;/span>i&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Install firebase tools and deploy to firebase&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># using the token we created earlier&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Firebase&lt;span class="w"> &lt;/span>Deploy&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">|
&lt;/span>&lt;span class="sd"> sudo npm install -g firebase-tools&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>firebase&lt;span class="w"> &lt;/span>deploy&lt;span class="w"> &lt;/span>--token&lt;span class="w"> &lt;/span>${{&lt;span class="w"> &lt;/span>secrets.FIREBASE_TOKEN&lt;span class="w"> &lt;/span>}}&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Now everytime you push changes to your Github repository a new job will be started to deploy your application to Firebase. Though this example is for Cloud functions and Hosting you can use the same logic to automatically deploy changes to other Firebase services too.&lt;/p>
&lt;p>The website will be hosted at &lt;code>&amp;lt;your-project-name&amp;gt;.web.app&lt;/code> after it&amp;rsquo;s been deployed successfully and you can view the final result there.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Getting started with Firebase Functions</title><link>https://home.aveek.io/blog/post/getting-started-with-firebase-functions/</link><pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/getting-started-with-firebase-functions/</guid><description>&lt;p>Check the final application out here - &lt;a href="pix2ascii.web.app">&lt;code>pix2ascii&lt;/code>&lt;/a>.&lt;/p>
&lt;p>The full code for this project can be found on &lt;a href="https://github.com/Aveek-Saha/pix2ascii">&lt;code>GitHub&lt;/code>&lt;/a>
or read the next part here: &lt;a href="https://home.aveek.io/blog/post/deploy-svelte-firebase/">&lt;code>Deploying Svelte apps to Firebase with GitHub actions&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="what-are-firebase-functions">What are Firebase functions?&lt;/h1>
&lt;p>From the &lt;a href="https://firebase.google.com/docs/functions">documentation&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Cloud Functions for Firebase is a serverless framework that lets you automatically run backend code in response to events triggered by Firebase features and HTTPS requests.&lt;/p>
&lt;/blockquote>
&lt;p>What this means is essentially you can write code that will run when certain events take place. These events can be http requests or an event triggered by another firebase service, like their database or storage solution. This means that you can essentially write server side code without having to worry about the specifics of managing and scaling servers, which makes life a lot easier as a developer.&lt;/p>
&lt;p>Not all servers can be replaced by cloud functions especially since only JavaScript or Typescript is supported for Firebase as of now. However there are a lot of simple tasks that you might have been considering using a server for, that can be handled by a cloud function.&lt;/p>
&lt;p>To demonstrate how to use Firebase cloud functions we’ll be creating a simple application. In this application you can upload an image which will be converted to ascii art. Probably not the most useful application in the world, but a fun project to help you get started with firebase functions. The backend of this application will only use Firebase cloud functions and for the frontend we’ll be using Svelte.&lt;/p>
&lt;p>I’ll be tackling the Frontend in another post so stay tuned for that. So in this tutorial you’ll learn how to create and deploy a Firebase function.&lt;/p>
&lt;h1 id="set-up-firebase">Set up Firebase&lt;/h1>
&lt;p>Before we start you’ll need an account to log in to the &lt;a href="https://console.firebase.google.com/">&lt;code>Firebase Console&lt;/code>&lt;/a>, and then you can follow the steps below.&lt;/p>
&lt;h3 id="1-create-a-firebase-project-">1. Create a Firebase project-&lt;/h3>
&lt;p>Go to the firebase console and create a new project. You can choose to set up Google analytics for the project, but it’s not really important for this application.&lt;/p>
&lt;h3 id="2-set-up-firebase-cli-">2. Set up Firebase CLI-&lt;/h3>
&lt;p>You’ll need to have Node.js installed already on your system. Install the cli through npm by running &lt;code>npm install -g firebase-tools&lt;/code>&lt;/p>
&lt;h3 id="3-initialize-the-firebase-sdk-">3. Initialize the Firebase SDK-&lt;/h3>
&lt;p>Run &lt;code>firebase login&lt;/code> to log in to the CLI via the browser using the account your new project is linked to.&lt;/p>
&lt;h3 id="4-initialize-the-project-">4. Initialize the project-&lt;/h3>
&lt;p>Create a new working directory for this project and navigate to that directory. Then run &lt;code>firebase init functions&lt;/code>.&lt;/p>
&lt;p>During the setup, Use an existing project, and select the project you’d created through the console in the step before. Select JavaScript as the language and pick install dependencies using npm when it offers you the option. Once all the dependencies have finished installing you’re ready for the next step!&lt;/p>
&lt;h1 id="creating-the-firebase-function">Creating the Firebase function&lt;/h1>
&lt;p>If the setup went correctly you should be seeing a folder called &lt;code>functions&lt;/code>. This is where the code for our function will be, specifically in &lt;code>index.js&lt;/code>.&lt;/p>
&lt;h2 id="the-api">The API&lt;/h2>
&lt;p>We’ll be setting up a basic Express server with only one endpoint that receives the uploaded image and then using this Express app as a cloud function. First install the required modules&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm i
npm i express busboy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to test the function locally, run &lt;code>firebase serve&lt;/code> and then use the url specified in the console to test the function.&lt;/p>
&lt;p>We’ll be uploading an image using a multipart form. Unfortunately common middleware for this purpose like Multer and Formidable don&amp;rsquo;t work properly with express in Cloud functions, so we’ll have to use a method shown in the &lt;a href="https://cloud.google.com/functions/docs/writing/http#multipart_data">documentation&lt;/a> that uses Busboy. The documentation does a pretty good job of explaining the code, so I’ll just be copying it here in &lt;code>index.js&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">functions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;firebase-functions&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">express&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;express&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">cors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;cors&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">Busboy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;busboy&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;path&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">os&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;os&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">express&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">runtimeOpts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">timeoutSeconds&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">120&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Automatically allow cross-origin requests
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cors&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">origin&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="p">}));&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">busboy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Busboy&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">headers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">headers&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">tmpdir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tmpdir&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">fields&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">uploads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="nx">busboy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;field&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">fieldname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Processed field &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">fieldname&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">.`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">fields&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">fieldname&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">val&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">fileWrites&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;span class="c1">// This code will process each file uploaded.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">busboy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;file&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">fieldname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filename&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Processed file &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">filename&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">filepath&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tmpdir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">filename&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">uploads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">fieldname&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">filepath&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">writeStream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createWriteStream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">filepath&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">writeStream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">promise&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;end&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">writeStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="nx">writeStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;finish&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">writeStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;error&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="nx">fileWrites&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">promise&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="nx">busboy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;finish&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fileWrites&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">file&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">uploads&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">uploads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unlinkSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">uploads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="nx">busboy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rawBody&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// Expose Express API as a single Cloud Function:
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">exports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ascii&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">functions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">runtimeOpts&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">https&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">app&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So now if we test the function using a service like Insomnia or Postman by uploading an image in a multi part form the path to the image uploaded should be logged in the console!&lt;/p>
&lt;h2 id="image-to-ascii">Image to ASCII&lt;/h2>
&lt;p>We’ll be creating a separate module for the logic to convert the image the user uploads to ASCII art. To convert the image we’ll be using a module called &lt;code>Jimp&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm i jimp
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a new file called &lt;code>img2ascii.js&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Jimp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;jimp&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Export the function so we can call it from the cloud function
&lt;/span>&lt;span class="c1">// The function takes the filepath, the dimensions of the image
&lt;/span>&lt;span class="c1">// and the kind of ascii art as parameters
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">exports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">convert&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Different kinds of character sets for visually different ends results
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">greyscale&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">gscale_70&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;@$B%8&amp;amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1{}[]?-_+~&amp;lt;&amp;gt;i!lI;:,\&amp;#34; ^`&amp;#39;. &amp;#34;&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">reverse&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">gscale_10&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;@%#*+=-:. &amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">reverse&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">gscale_block&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34; ░▒▓█&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">gscale&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">greyscale&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">norm_factor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">gscale&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>
&lt;span class="c1">// Jimp.read returns a promise, so we&amp;#39;ll pass that on
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">Jimp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">image&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Since the letters are almost twice as tall as they are wide,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// we&amp;#39;ll be scaling the height and then dividing by 2 so that the
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// result isn&amp;#39;t abnormally tall and proportions are preserved
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">round&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">width&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nx">image&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">resize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">height&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// resize
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nx">greyscale&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// set greyscale
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="nx">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">idx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">red&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">idx&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">green&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">idx&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">blue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">idx&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">alpha&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bitmap&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">idx&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">rgba&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">red&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">green&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">blue&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">alpha&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">intensity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rgba&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">norm_factor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="c1">// Map intensity to a character
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">gscale&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">intensity&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">matrix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;span class="c1">// Reshape the array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">matrix&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">splice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">width&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">toWrite&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="c1">// Convert the array to a string
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">matrix&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">element&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">toWrite&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">element&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">toWrite&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now to convert the image the user has passed to the function, we have to make a few changes to &lt;code>index.js&lt;/code>.&lt;/p>
&lt;p>Import the module we just created.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="p">...&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">p2a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./img2ascii.js&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To take the file passed and do the conversion, modify this part of the cloud function&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="p">...&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="nx">busboy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;finish&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">await&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fileWrites&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">art&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">file&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">uploads&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Call the conversion function on the file that&amp;#39;s been passed along with the other parameters
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">ascii&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">p2a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">convert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">uploads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nb">parseInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fields&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;width&amp;#39;&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="nx">fields&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;charset&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="c1">// Store the result in an array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">art&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ascii&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unlinkSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">uploads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Since we&amp;#39;re only allowing one file to be uploaded
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">art&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this stage if you test your function using Insomnia or Postman to create a multi part form, with an image, the width and the charset fields, and send it, you should see a string of ascii characters that represent your image being sent back in the response. We’re now ready for the next step!&lt;/p>
&lt;h1 id="deploy">Deploy&lt;/h1>
&lt;p>To deploy the function just run this command in the &lt;code>functions&lt;/code> folder.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">firebase deploy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the application has been deployed, the CLI will give you a public url that you can access from anywhere. It should look something like this. &lt;code>https://us-central1-pix2ascii.cloudfunctions.net/ascii&lt;/code>. You can test this deployed function in the same way you were testing it locally, just replace the url.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>We’ve now successfully created and deployed a function to firebase that we can use to convert an image to ASCII art. If all you want is the backend then that’s all you need.&lt;/p>
&lt;p>You’re free to use any hosting service along with any framework of your choice for the web UI. If you want to also learn how to build and deploy a svelte application to Firebase and automate the process using GitHub actions, be sure to look out for the next part of this tutorial.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Finding the main characters in a novel</title><link>https://home.aveek.io/blog/post/finding-main-characters/</link><pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/finding-main-characters/</guid><description>&lt;p>Find the code &lt;a href="https://colab.research.google.com/drive/10lrWpC3BF2Lan7LHrNZXs6H0oqTZW19_">&lt;code>here&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In this tutorial we&amp;rsquo;ll be learning how to extract the names of all the main characters from a book.&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;p>All the code for this tutorial will be executed on a &lt;a href="https://colab.research.google.com">&lt;code>Google Colab notebook&lt;/code>&lt;/a>. Go to the link and create a new Python 3 notebook and change the runtime type to GPU.&lt;/p>
&lt;h1 id="strategy">Strategy&lt;/h1>
&lt;p>The novel we&amp;rsquo;ll be using can be any book from the &lt;a href="https://www.gutenberg.org/browse/scores/top#books-last30">&lt;code>Gutenberg Project&lt;/code>&lt;/a> in raw UTF-8 format. To extract the names of all the main characters first we need to remove all &lt;code>\n&lt;/code> and &lt;code>\r&lt;/code> characters from the raw text.&lt;/p>
&lt;p>To identify all characters, we&amp;rsquo;ll be using Named Entity Recognition. A named entity is a real world object, like a place, person, organisation, etc.&lt;/p>
&lt;p>The text needs to be tokenized into sentences and all the named entities in those sentences need to be identified. We&amp;rsquo;ll only be looking at entities tagged as people because we&amp;rsquo;re only interested in the characters.&lt;/p>
&lt;p>Then these characters can be listed in the order of their frequency of occurrence in the text.&lt;/p>
&lt;h1 id="implementation">Implementation&lt;/h1>
&lt;p>For named entity recognition we&amp;rsquo;ll use a library called &lt;a href="https://github.com/zalandoresearch/flair">&lt;code>flair&lt;/code>&lt;/a>. To install flair run&lt;/p>
&lt;pre>&lt;code>!pip install flair
&lt;/code>&lt;/pre>&lt;p>Next we&amp;rsquo;ll import NLTK, flair and a few other python libraries
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">nltk&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nltk&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">pos_tag&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">word_tokenize&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nltk.tokenize&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">sent_tokenize&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">nltk.corpus&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">stopwords&lt;/span>
&lt;span class="n">nltk&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">download&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;stopwords&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">nltk&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">download&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;punkt&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">nltk&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">download&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;gutenberg&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">tqdm&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">tqdm&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">re&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">string&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">itertools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">combinations&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">collections&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Counter&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">flair.models&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">SequenceTagger&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">flair.data&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Sentence&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>The book can be downloaded and read as a text file. NLTK already comes with a few Project Gutenberg books so we&amp;rsquo;ll be using one of those for convenience&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">book&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nltk&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">corpus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gutenberg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">raw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;carroll-alice.txt&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The book variable is a string that looks like this&lt;/p>
&lt;pre>&lt;code>Alice\'s Adventures in Wonderland by Lewis Carroll 1865]\n\nCHAPTER I. Down the Rabbit-Hole\n\nAlice was beginning to get very tired of sitting by her sister on the\nbank, and of having nothing to do: once or twice she had peeped into the\nbook her sister was reading, but it had no pictures or conversations in\nit, \'and what is the use of a book ....
&lt;/code>&lt;/pre>&lt;p>The text has to be cleaned to remove some unwanted characters
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">
&lt;span class="n">book&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">book&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">book&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">book&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\r&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">book&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">book&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\&amp;#39;&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>If we print book again it&amp;rsquo;ll look something like this&lt;/p>
&lt;pre>&lt;code>[Alice s Adventures in Wonderland by Lewis Carroll 1865] CHAPTER I. Down the Rabbit-Hole Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, and what is the use of a book ...
&lt;/code>&lt;/pre>&lt;p>Removing these characters will help us extract the character names more effectively.&lt;/p>
&lt;p>After this the book is tokenized into sentences, the flair ner tagger is loaded and each sentence is tagged one by one. If an entity is tagged as a person, it&amp;rsquo;s stored in a separate array.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># Use flair named entity recognition&lt;/span>
&lt;span class="n">tagger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SequenceTagger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ner&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Get all the names of entities tagged as people&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">tqdm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sent&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">sentence&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Sentence&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">tagger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">predict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sentence&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">entity&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">sentence&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_dict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tag_type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ner&amp;#39;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="s1">&amp;#39;entities&amp;#39;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">entity&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;type&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;PER&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entity&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;text&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The &lt;code>x&lt;/code> array contains all the occurences of characters mentioned in the book. Then the punctuation like commas and semicolons that might occur in the names is removed.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># Remove any punctuation within the names&lt;/span>
&lt;span class="n">names&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">names&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">translate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">maketrans&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">punctuation&lt;/span>&lt;span class="p">)))&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Let&amp;rsquo;s sort the list based on number of times the character is mentioned in the book and print it&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># List characters by the frequency with which they are mentioned&lt;/span>
&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">item&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">items&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">Counter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">most_common&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Counter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">names&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">most_common&lt;/span>&lt;span class="p">())&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The output should look something like this&lt;/p>
&lt;pre>&lt;code>[('Alice', 346), ('Hatter', 52), ('Duchess', 28), ('Dormouse', 28), ('King', 28), ('Mouse', 21),
('Queen', 18), ('Dinah', 13), ... ('Lory', 4), ('William', 4), ('Mary Ann', 4), ('Well', 4), ('Cat', 4)
, ('Five', 3), ('Majesty', 3), ... ('Wow', 2), ('Treacle', 2), ('Miss', 2), ('Hush', 2), ('Yes', 2),
....]
&lt;/code>&lt;/pre>&lt;p>If we look at the output closely, we can see that some of the &amp;ldquo;names&amp;rdquo;, like Five, Hush, Yes, etc, don&amp;rsquo;t really seem like names of people or characters. This happens because of the way that NER works, sometimes words that are probably not names of characters can also be included in the &lt;code>name&lt;/code> list, these are generally few and can be removed manually.&lt;/p>
&lt;p>We can also exclude characters whose names have been mentioned less than 5 times, as they aren&amp;rsquo;t likely to be important characters.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">common&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">main_freq&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="c1"># Manually remove words that are not character names from our list&lt;/span>
&lt;span class="n">not_names&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Well&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Ive&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Five&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Theyre&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Dont&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Wow&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Ill&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Miss&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Hush&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Yes&amp;#39;&lt;/span>&lt;span class="p">,]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">Counter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">names&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">most_common&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="c1"># if the character is mentioned less than 5 times, the name is not added to the main character list&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">not_names&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">main_freq&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">common&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>If we print the &lt;code>common&lt;/code> array, we get a list of main characters from Alice in Wonderland&lt;/p>
&lt;pre>&lt;code>['Alice',
'Hatter',
'Duchess',
'Dormouse',
'King',
'Mouse',
'Queen',
'Dinah',
'Rabbit',
'Gryphon',
'Bill',
'Hare',
'Dodo',
'Mock Turtle',
'Footman']
&lt;/code>&lt;/pre>&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Although the method I&amp;rsquo;ve described here isn&amp;rsquo;t always 100% accurate, it generally provides a satisfactory list of main characters. This list can be useful for creating a co-occurrence matrix of character interactions, which in turn can be useful for network analysis of all the characters in the book.&lt;/p>
&lt;p>While it&amp;rsquo;s beyond the scope of this post, the interaction network for all main characters can be explored in a future post.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>A study guide for the GRE</title><link>https://home.aveek.io/blog/post/gre-study-guide/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/gre-study-guide/</guid><description>&lt;p>A brief summary of what materials to study from and a list of free practice tests to prepare for the GRE.&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This may seem as a deviation from my usual tech content, but I recently wrote the GRE and I thought I&amp;rsquo;d share my study strategy here.&lt;/p>
&lt;p>The GRE is a standardised test conducted by ETS (Educational Testing Services). GRE scores are accepted by most of the top graduate level schools for masters degree programs worldwide. Below you&amp;rsquo;ll find a guide on how to tackle each section and a list of practice tests you can take to measure your progress and identify weaknesses.&lt;/p>
&lt;p>To find out more about the GRE visit the &lt;a href="https://www.ets.org/gre/revised_general/about/">&lt;code>ETS website&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="section-wise-plan">Section wise plan&lt;/h1>
&lt;h2 id="1-quantitative-reasoning">1. Quantitative Reasoning&lt;/h2>
&lt;p>For Quantitative Reasoning the &lt;code>The 5 lb. Book of GRE Practice Problems by Manhattan Prep&lt;/code> has a chapter on every topic that you&amp;rsquo;ll find on the GRE. Each chapter has multiple problems covering all kinds of questions on that topic, along with different question formats you might encounter in your actual test. The book can be found as a PDF online, but try to buy it if you can.&lt;/p>
&lt;p>Apart from this there are timed practice questions by &lt;a href="http://www.mhpracticeplus.com/tests/GRE2016/index.html">&lt;code>McGraw-Hill&lt;/code>&lt;/a>. These are available in sets of 20 questions each, just like the actual GRE. This can be a good way to practice time management for the final test.&lt;/p>
&lt;h2 id="2-verbal-reasoning">2. Verbal Reasoning&lt;/h2>
&lt;p>For vocabulary building, &lt;a href="https://gre.magoosh.com/flashcards/vocabulary/decks">&lt;code>Magoosh GRE Vocabulary Flashcards&lt;/code>&lt;/a> have around a 1000 words that are separated into categories based on their difficulty and frequency of occourance in the GRE. There are also companion apps for both iOS and Android so you can create an account and sync your progress across devices.&lt;/p>
&lt;p>Another collection of common GRE words is &lt;a href="https://home.aveek.io/blog/gre/Barrons-333-High-Freq-Words-With-Meanings.pdf">&lt;code>Barrons 333 High Freq Words With Meanings&lt;/code>&lt;/a>&lt;/p>
&lt;p>For the reading comprehension questions, there are YouTube videos on the strategy for tackling them, but other than that they only way to get a hang of RCs is through practice, either from the &lt;code>The 5 lb. Book&lt;/code> or the &lt;a href="http://www.mhpracticeplus.com/tests/GRE2016/index.html">&lt;code>McGraw-Hill&lt;/code>&lt;/a> timed practice.&lt;/p>
&lt;h2 id="3-analytical-writing-assessment-awa">3. Analytical Writing Assessment (AWA)&lt;/h2>
&lt;p>The AWA has one &amp;ldquo;Analyze an Issue&amp;rdquo; task and one &amp;ldquo;Analyze an Argument&amp;rdquo; task, you can find a sample answer for each writing task, read these to get an idea of what kind of points the evaluators are looking for when grading your essay.&lt;/p>
&lt;h3 id="sample-responses">Sample responses&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.ets.org/gre/revised_general/prepare/analytical_writing/issue/sample_responses">&lt;code>Analyse an Issue&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ets.org/gre/revised_general/prepare/analytical_writing/argument/sample_responses">&lt;code>Analyse an Arguement&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>After that to practice, you can look at the entire pool of possible topics for both the tasks, pick a topic, time yourself for 30 minutes, and start writing.&lt;/p>
&lt;h3 id="topic-pool">Topic pool&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.ets.org/gre/revised_general/prepare/analytical_writing/argument/pool">&lt;code>Analyse an Issue&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ets.org/gre/revised_general/prepare/analytical_writing/argument/pool">&lt;code>Analyse an Arguement&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Generally the AWA section is given less importance during admissions so more time should be spent on Verbal and Quantitative Reasoning practice.&lt;/p>
&lt;h1 id="free-practice-tests">Free practice tests&lt;/h1>
&lt;p>Before you start preparing for the GRE you should take a diagnostic practice test to see what areas you need to pay more attention to. Then depending on the amount of time you have to prepare before your GRE, space out the remaining practice tests so that you can regularly keep track of your progress and see if your study is effective.&lt;/p>
&lt;p>Also use these practice tests to become familiar with the rules and user interface as the actual test will have similar rules and UI to the ones you encounter in these mock tests.&lt;/p>
&lt;h2 id="ets-powerprep-practice-tests">ETS PowerPrep Practice tests&lt;/h2>
&lt;p>ETS provides 2 free full-length practice tests and these are probably the most accurate evaluation of your GRE preparation. In fact it&amp;rsquo;s so accurate that generally your actual GRE score won&amp;rsquo;t differ much from your score on these tests.&lt;/p>
&lt;p>I&amp;rsquo;d recommend taking these tests towards the end of your preparation, so that they&amp;rsquo;re as representative of your real GRE performance as possible.
You can find out more about them here &lt;a href="https://www.ets.org/gre/revised_general/prepare/powerprep/">&lt;code>ETS PowerPrep Practice Tests&lt;/code>&lt;/a>&lt;/p>
&lt;h2 id="some-other-practice-tests">Some other practice tests&lt;/h2>
&lt;p>Here are a few other full-length tests you can take for free, in no particular order&lt;/p>
&lt;h3 id="princeton-reviewhttpswwwprincetonreviewcomgradfree-gre-practice-test">&lt;a href="https://www.princetonreview.com/grad/free-gre-practice-test">&lt;code>Princeton Review&lt;/code>&lt;/a>&lt;/h3>
&lt;h3 id="manhattan-prephttpswwwmanhattanprepcomgrefree-gre-practice-test">&lt;a href="https://www.manhattanprep.com/gre/free-gre-practice-test/">&lt;code>Manhattan Prep&lt;/code>&lt;/a>&lt;/h3>
&lt;h3 id="crunchprephttpsgrecrunchprepcomteststart">&lt;a href="https://gre.crunchprep.com/test/start">&lt;code>Crunchprep&lt;/code>&lt;/a>&lt;/h3>
&lt;h3 id="kaplanhttpswwwkaptestcomgrefreegre-practice-test-options">&lt;a href="https://www.kaptest.com/gre/free/gre-practice-test-options">&lt;code>Kaplan&lt;/code>&lt;/a>&lt;/h3>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>The study plan I&amp;rsquo;ve mentioned might not be the best way to prepare for everyone, but I found this plan useful while preparing for the GRE myself and thought I would share it.&lt;/p>
&lt;p>If you feel like I&amp;rsquo;ve missed, or overlooked something, or if you have other materials that you found helpful feel free to leave a comment!&lt;/p></description></item><item><title>Saving a Keras model to persistent storage</title><link>https://home.aveek.io/blog/post/checkpointing-keras-model/</link><pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/checkpointing-keras-model/</guid><description>&lt;p>Learn how to save Keras models to persistent storage or your Google drive and resume training it from where you left off.&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>A lot of the time deep learning models can take several hours, days or weeks to train and if the machine that it&amp;rsquo;s running on shuts down unexpectedly before training is finished, it can lead to all that work going to waste. This introduces the need for a way to save and load models so that training can be continued from a certain checkpoint.&lt;/p>
&lt;p>Luckily Keras has got us covered with the &lt;a href="https://keras.io/callbacks/#modelcheckpoint">&lt;code>ModelCheckpoint&lt;/code>&lt;/a> callback class.&lt;/p>
&lt;h1 id="saving-a-model">Saving a model&lt;/h1>
&lt;p>Lets say you have a simple neural network&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">keras&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Sequential&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">keras.layers&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Dense&lt;/span>
&lt;span class="n">classifier&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Sequential&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">classifier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Dense&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">activation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;relu&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_dim&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">classifier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Dense&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">activation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;relu&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">classifier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Dense&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">activation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;sigmoid&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">classifier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">compile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">optimizer&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;adam&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">loss&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;binary_crossentropy&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">metrics&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;accuracy&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Before fitting the model, create a ModelCheckpoint object, we&amp;rsquo;ll go over what each of the parameters do in a minute, but for now, in this example after each epoch the model will be saved to a &lt;code>hdf5&lt;/code> file in the current working directory.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">keras.callbacks&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ModelCheckpoint&lt;/span>
&lt;span class="n">filepath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;./weights-{epoch:02d}-{val_acc:.3f}.hdf5&amp;#34;&lt;/span>
&lt;span class="n">checkpoint&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ModelCheckpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">filepath&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">monitor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;val_acc&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">verbose&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;max&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">callbacks_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">checkpoint&lt;/span>&lt;span class="p">]&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Now pass the callback list while fitting the model&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">classifier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X_train&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y_train&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">batch_size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">epochs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">validation_data&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X_validation&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y_validation&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">callbacks&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">callbacks_list&lt;/span>&lt;span class="p">)&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Once the model finishes running, you&amp;rsquo;ll be able to see 20 &lt;code>hdf5&lt;/code> files labeled by their epoch number and validation accuracy in your working directory.&lt;/p>
&lt;h1 id="parameters">Parameters&lt;/h1>
&lt;p>There are several parameters that can be passed to ModelCheckpoint, we&amp;rsquo;ll go over them here&lt;/p>
&lt;ul>
&lt;li>&lt;strong>filepath&lt;/strong>: a string, the path where you want to save the model file.&lt;/li>
&lt;li>&lt;strong>monitor&lt;/strong>: quantity to monitor. Eg: val_acc, acc, val_loss, loss, etc.&lt;/li>
&lt;li>&lt;strong>verbose&lt;/strong>: verbosity mode, 0 or 1.&lt;/li>
&lt;li>&lt;strong>save_best_only&lt;/strong>: if it&amp;rsquo;s True, then the model will only be saved if the new model improves over the last saved model in the monitored quantity.&lt;/li>
&lt;li>&lt;strong>save_weights_only&lt;/strong>: if True, then only the model&amp;rsquo;s weights will be saved, else the full model is saved (including the optimizer state).&lt;/li>
&lt;li>&lt;strong>mode&lt;/strong>: one of {auto, min, max}. If =True, the decision to overwrite the current save file is made based on either the maximization or the minimization of the monitored quantity. For val_acc, this should be max, for val_loss this should be min, etc. In auto mode, the direction is automatically inferred from the name of the monitored quantity.&lt;/li>
&lt;li>&lt;strong>period&lt;/strong>: number of epochs between checkpoints.&lt;/li>
&lt;/ul>
&lt;h1 id="save-model-to-google-drive-on-colab-notebooks">Save model to Google Drive on Colab notebooks&lt;/h1>
&lt;p>Google&amp;rsquo;s Colab notebooks are a great way to start prototyping and creating neural networks and machine learning models. If you choose a GPU runtime, you are given a free GPU that can greatly reduce your model training time.&lt;/p>
&lt;p>As great is Colab is, it does have some caveats&lt;/p>
&lt;ol>
&lt;li>If you are disconnected from the internet or close the window for more than 90 minutes, the runtime automatically shuts down or gets recycled.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>You are given a maximum of 12 hours at a time on the VM instance.&lt;/li>
&lt;/ul>
&lt;p>In both these cases you may be able to reconnect to the instance but all your local variables will be lost.&lt;/p>
&lt;p>Saving the model to Google Drive after every epoch makes it easy to just restart training from the last epoch that was saved.&lt;/p>
&lt;p>Google makes it super easy to do this on Colab. First we have to allow Colab to access Google Drive.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">google.colab&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">drive&lt;/span>
&lt;span class="n">drive&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/content/gdrive&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>When you run this, it generates a link, click on it. Select the google account whose drive you want to mount. Then it takes you to a new tab that says &lt;code>Google Drive File Stream wants to access your Google Account&lt;/code>. On clicking &lt;code>allow&lt;/code> it generates an authorization code that you have to paste in a text box that appears below the code you just ran. Paste the code and hit &lt;code>enter&lt;/code>.&lt;/p>
&lt;p>On refreshing your file browser, you should see a folder called &lt;code>gdrive&lt;/code>, that&amp;rsquo;s the mounted drive folder.&lt;/p>
&lt;p>To save it to your drive, the code is almost the same as the example in the previous section, but the filename should be changed, so that the model is stored in drive.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># Create a folder in your drive called model before running this&lt;/span>
&lt;span class="n">filepath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/content/gdrive/My Drive/model/weights-{epoch:02d}-{val_acc:.3f}.hdf5&amp;#34;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h1 id="resume-training-from-a-saved-model">Resume training from a saved model&lt;/h1>
&lt;p>If you saved the entire model (not just the weights) then the model can continue training from wherever it stopped.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">keras.models&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">load_model&lt;/span>
&lt;span class="n">classifier&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">load_model&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/content/gdrive/My Drive/model/weights-15-0.815.hdf5&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">classifier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X_train&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y_train&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">batch_size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">epochs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">validation_data&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X_validation&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y_validation&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">callbacks&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">callbacks_list&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">initial_epoch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">)&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Pixel Weather</title><link>https://home.aveek.io/blog/post/pixel-weather/</link><pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/pixel-weather/</guid><description>&lt;p>Get the code here - &lt;a href="https://github.com/Aveek-Saha/pixel-weather">&lt;code>Pixel Weather&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
To try it out, download it here - &lt;a href="https://github.com/Aveek-Saha/pixel-weather/releases">&lt;code>Downloads&lt;/code>&lt;/a>&lt;/p>
&lt;h3 id="pixel-weather-is-a-small-and-compact-8-bit-style-weather-widget-designed-for-your-desktop">Pixel weather is a small and compact 8 bit style weather widget designed for your desktop.&lt;/h3>
&lt;h1 id="features">Features&lt;/h1>
&lt;ul>
&lt;li>It&amp;rsquo;s transparent background allows it to blend in with your current setup&lt;/li>
&lt;li>Always stays on your desktop so it won&amp;rsquo;t get in your way. This means it&amp;rsquo;s hidden when you switch windows with &lt;code>alt+tab&lt;/code>&lt;/li>
&lt;li>Switch between dark mode and light mode, for lighter and darker backgrounds respectively.&lt;/li>
&lt;li>Clean interface, with no clutter, all options can be accessed by right clicking.&lt;/li>
&lt;/ul>
&lt;h1 id="how-to-use">How to use&lt;/h1>
&lt;ul>
&lt;li>Install the package.&lt;/li>
&lt;li>Sign up and get your API key from the &lt;a href="https://darksky.net/dev">&lt;code>Dark Sky&lt;/code>&lt;/a> console.&lt;/li>
&lt;li>When you open the app for the first time, a settings menu pops up, paste your API key there.&lt;/li>
&lt;li>You can also change how often the weather is updated.&lt;/li>
&lt;li>After submitting the settings, right click, refresh and wait for the weather to update.&lt;/li>
&lt;li>You can choose where to place the widget by choosing from the Position menu.&lt;/li>
&lt;li>The menu can be accessed by right clicking anywhere on the widget.&lt;/li>
&lt;/ul>
&lt;h1 id="screenshots">Screenshots&lt;/h1>
&lt;p>&lt;img src="https://home.aveek.io/blog/pixelweather/screenshot1.png" alt="Screenshot1">&lt;/p>
&lt;p>&lt;img src="https://home.aveek.io/blog/pixelweather/screenshot2.png" alt="Screenshot2">&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Get started with Svelte</title><link>https://home.aveek.io/blog/post/get-started-with-svelte/</link><pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/get-started-with-svelte/</guid><description>&lt;p>Live demo - &lt;a href="https://svelte-tut.netlify.com/">&lt;code>Demo&lt;/code>&lt;/a>&lt;/p>
&lt;p>Code for this tutorial can be found on &lt;a href="https://gitlab.com/aveeksaha/svelte-tut">&lt;code>Gitlab&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="what-is-svelte">What is Svelte?&lt;/h1>
&lt;blockquote>
&lt;p>Svelte is a new way to build web applications. It&amp;rsquo;s a compiler that takes your declarative components and converts them into efficient JavaScript that surgically updates the DOM.&lt;/p>
&lt;/blockquote>
&lt;p>Svelte is different from traditional component frameworks like Vue or React because it is essentially a compiler that converts your code into vanilla JavaScript at build time. This allows you to create reactive components without the performance overhead of the Virtual DOM.&lt;/p>
&lt;p>You can read more about them on their website &lt;a href="https://svelte.dev/">&lt;code>Svelte&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;p>Like all great tutorials, today I&amp;rsquo;ll be showing you how to make a ToDo application using Svelte.&lt;/p>
&lt;p>For this tutorial we&amp;rsquo;ll be building on the Svelte boilerplate and we&amp;rsquo;ll need &lt;code>degit&lt;/code> for that so start by installing &lt;code>degit&lt;/code> using&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm install -g degit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we install the boilerplate and install all the dependencies.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npx degit sveltejs/template svelte_tut
&lt;span class="nb">cd&lt;/span> svelte_tut
npm install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To run the dev server run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm run dev
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then open http://localhost:5000, you should see something like this&lt;/p>
&lt;p>&lt;img src="https://home.aveek.io/blog/svelte/svelte_1.png" alt="Screenshot1">&lt;/p>
&lt;h1 id="making-the-app">Making the app&lt;/h1>
&lt;p>Open &lt;code>src/App.svelte&lt;/code> and replace the code that was there with&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c1">// Variable to store user input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Array to store tasks
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;eat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;sleep&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>We can use Svelte to bind the variable &lt;code>task&lt;/code> to an input element, and add a function to push a new element into the array whenever we press a button.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c1">// Variable to store user input
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Array to store tasks
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;eat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;sleep&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">addTask&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Don&amp;#39;t add something if the input value is empty
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="c1">// Push a new task to the array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- The value of task will now change when you type in the input
&lt;/span>&lt;span class="c">because the task variable is now bound to the input value --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">bind:value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">{task}&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- when the onclick event is triggered it calls addTask --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">on:click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">{addTask}&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Add Task&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Now using a loop, we&amp;rsquo;ll display all the elements in &lt;code>tasks&lt;/code> array as a list and we&amp;rsquo;ll add a method to remove elements from the array by selecting the checkbox next to it.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;eat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;sleep&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">addTask&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// The DOM is only updated when an assignment is made so this
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// code below is needed even though it may seem redundant
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Otherwise the list of todos won&amp;#39;t update when we add a task
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">removeTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">/* remove bullets from list */&lt;/span>
&lt;span class="nt">ul&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">list-style&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">bind:value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">{task}&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">on:click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">{addTask}&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Add Task&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- For each element in the array, create a new list element --&amp;gt;&lt;/span>
{#each todos as todo, index (todo)}
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- When the checkbox is ticked the item is removed from the todos array --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">checkbox&lt;/span> &lt;span class="na">on:click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">{()&lt;/span> &lt;span class="err">=&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> removeTask(index)}&amp;gt;
{todo}
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
{/each}
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Now our todo list is nearly done, we can add some global CSS to the &lt;code>public/global.css&lt;/code> file.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">html&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">html&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">table&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">table&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="kc">cell&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">vertical-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">middle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>And your final result should look something like this
&lt;img src="https://home.aveek.io/blog/svelte/svelte_2.png" alt="Screenshot1">&lt;/p>
&lt;p>To compile the application we just need to run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm run build
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="persistent-storage">Persistent storage&lt;/h1>
&lt;p>If you want the data to be saved when we refresh the page we can use &lt;code>IndexedDB&lt;/code> to store the list of tasks. The IndexedDB API is not that intuitive, so we&amp;rsquo;ll use a wrapper called &lt;code>idb-keyval&lt;/code>.&lt;/p>
&lt;p>Install it with&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm install idb-keyval
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Import it in &lt;code>App.svelte&lt;/code>, remove the default values in the todo array and then load the array if it is already stored.
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// import idb-keyval
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">get&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">set&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;idb-keyval&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Empty the default values in the array
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;todos&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// If the array is stored from a previous session, assign it to todos
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">arr&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>Then we need to store the todos array everytime we add or delete tasks from it&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">addTask&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// Store the array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;todos&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">removeTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">// Store the array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;todos&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Now the list won&amp;rsquo;t get reset every time you refresh the page.&lt;/p>
&lt;h1 id="deploying-to-netlify">Deploying to Netlify&lt;/h1>
&lt;p>First we&amp;rsquo;re going to add a &lt;code>.gitignore&lt;/code> with a single line-&lt;/p>
&lt;pre>&lt;code>node_modules
&lt;/code>&lt;/pre>&lt;p>Create a new project on GitHub or GitLab (Bitbucket is also available) then &lt;code>cd&lt;/code> to your project folder and run the following&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ git init
$ git remote add origin &amp;lt;git URL of your project&amp;gt;
$ git add .
$ git commit -m &lt;span class="s2">&amp;#34;Initial commit&amp;#34;&lt;/span>
$ git push origin master
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Open &lt;a href="https://www.netlify.com/">Netlify&lt;/a> in your browser and sign up for an account if you don&amp;rsquo;t already have one. Go to your &lt;a href="https://app.netlify.com/account/sites">sites&lt;/a> and click &lt;code>New site from Git&lt;/code> then follow the steps-&lt;/p>
&lt;ol>
&lt;li>select your git provider.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Choose the repository that you just created and committed to.&lt;/li>
&lt;li>Under build options go to basic build settings and fill in the following 2 fields:
&lt;ul>
&lt;li>Build command&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>npm run build
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Publish directory&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>public/
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;p>Then click deploy. When the deploy is finished visit the site url given in the overview, it should look something like this &lt;a href="https://svelte-tut.netlify.com/">Demo&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Web Scraping with Python</title><link>https://home.aveek.io/blog/post/web-scraping-with-python/</link><pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/web-scraping-with-python/</guid><description>&lt;p>Code for this tutorial can be found on &lt;a href="https://gist.github.com/Aveek-Saha/860464a7b52c5bab781f870dcb73ed57">&lt;code>Github&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Web scraping is a useful tool for extracting data from websites, especially those that don&amp;rsquo;t provide an API. In this post, I&amp;rsquo;ll show you how you can use web scraping to generate a dataset from a webpage.&lt;/p>
&lt;p>For this example we will be using a website called &lt;a href="https://trendogate.com/place/23424977">trendogate&lt;/a> which is a website that displays trending twitter hashtags on a given day based on region. Our goal will be to retrieve hashtags that are currently trending in the US.&lt;/p>
&lt;p>To do this we will primarily be using two libraries:&lt;/p>
&lt;h2 id="1-urllib">1. Urllib&lt;/h2>
&lt;blockquote>
&lt;p>Urllib is a Python module that can be used for opening URLs. It defines functions and classes to help in URL actions. With Python you can also access and retrieve data from the internet like XML, HTML, JSON, etc.&lt;/p>
&lt;/blockquote>
&lt;p>Urllib is going to help us retrieve the web page we want to scrape.&lt;/p>
&lt;p>To install Urllib-&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pip install urllib
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-beautiful-soup">2. Beautiful Soup&lt;/h2>
&lt;blockquote>
&lt;p>Beautiful Soup is a Python package for parsing HTML and XML documents. It creates a parse tree for parsed pages that can be used to extract data from HTML, which is useful for web scraping&lt;/p>
&lt;/blockquote>
&lt;p>Once we have the page we need from Urllib, we&amp;rsquo;re going to use Beautiful Soup to create a parse tree and extract the information we need from the page.&lt;/p>
&lt;p>To install Beautiful Soup&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pip install BeautifulSoup4
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;h1 id="analysing-the-web-page">Analysing the web page&lt;/h1>
&lt;p>To scrape a webpage you need to be familiar with the structure of the HTML tags in that page. So right click on the page you want to scrape and select Inspect.&lt;/p>
&lt;p>The &lt;a href="https://trendogate.com/place/23424977">trendogate&lt;/a> webpage looks like this:&lt;/p>
&lt;p>&lt;img src="https://home.aveek.io/blog/scraping/scraping_site.png" alt="Trendogate">&lt;/p>
&lt;p>We are interested in the trending today section. If we inspect it we can see the HTML structure.&lt;/p>
&lt;p>&lt;img src="https://home.aveek.io/blog/scraping/scrape_html_tag.png" alt="HTML tags">&lt;/p>
&lt;p>Today&amp;rsquo;s trending hashtags are in an unordered list of class &lt;code>list-group&lt;/code> that looks something like this:
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-group&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-group-item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/trend/79334795&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> #TriviaTuesday&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-group-item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/trend/79334794&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> #IA02&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-group-item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/trend/79334793&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> #livelocaldigital&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-group-item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/trend/79334792&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> #MLW19&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-group-item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/trend/79334791&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> #TuesdayTip&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-group-item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/trend/79334790&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> #VoteCox&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-group-item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/trend/79334789&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> #OnePlus7Series&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-group-item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/trend/79334788&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> #CelebrateWomen&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-group-item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/trend/79334787&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> #FelizMartes&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-group-item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/trend/79334786&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> #PESummit&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>First we import the libraries we&amp;rsquo;ll need&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">bs4&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">BeautifulSoup&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">urllib&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Then we&amp;rsquo;ll use &lt;code>urllib&lt;/code> to get the webpage. Read more about &lt;a href="https://docs.python.org/3/library/urllib.html">urllib&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">URL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;https://trendogate.com/place/23424977&amp;#34;&lt;/span>
&lt;span class="c1"># Open the URL&lt;/span>
&lt;span class="n">page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">urllib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">URL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">urllib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Store the HTML page in a variable&lt;/span>
&lt;span class="n">resulttext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Now we&amp;rsquo;ll create a &lt;code>BeautifulSoup&lt;/code> object from the HTML page we just retrieved. Read more about &lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># Creates a nested data structure&lt;/span>
&lt;span class="n">soup&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BeautifulSoup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">resulttext&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;html.parser&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Since we are interested only in an element with class &amp;#34;list-group&amp;#34;&lt;/span>
&lt;span class="c1"># We will search for all elements with that class in the soup&lt;/span>
&lt;span class="n">soup&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">soup&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">find_all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">class_&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;list-group&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Soup now contains an array of all elements with the class &amp;#34;list-group&amp;#34;&lt;/span>
&lt;span class="c1"># Since the Trending today list is the first on the page, it&amp;#39;s index is 0&lt;/span>
&lt;span class="n">trending_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">soup&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># Now we will iterate through the elements of the &amp;lt;ul&amp;gt; &lt;/span>
&lt;span class="c1"># &amp;lt;ul&amp;gt; has &amp;lt;li&amp;gt; tags nested inside&lt;/span>
&lt;span class="n">trending_tags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">li&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">trending_list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">contents&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># There is an &amp;lt;a&amp;gt; tag nested in each &amp;lt;li&amp;gt;&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">li&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">contents&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># The contents of &amp;#39;a&amp;#39; is just the text inside the tag&lt;/span>
&lt;span class="n">tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">contents&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strip&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">trending_tags&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">trending_tags&lt;/span>&lt;span class="p">)&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Now we have scraped all of today&amp;rsquo;s trending hashtags from the website.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>This is just one of the ways that you can scrape information from websites. Another method is to use something like &lt;a href="https://www.selenium.dev/">Selenium&lt;/a> that allows you to emulate a browser instance and automate tasks with code.&lt;/p>
&lt;p>Here&amp;rsquo;s an article you can refer to, if you want to get started with Selenium: &lt;a href="https://www.toptal.com/python/web-scraping-with-python">https://www.toptal.com/python/web-scraping-with-python&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Build a documentation website with VuePress</title><link>https://home.aveek.io/blog/post/build-a-documentation-site-with-vuepress/</link><pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/build-a-documentation-site-with-vuepress/</guid><description>&lt;p>Live example - &lt;a href="https://vuepress-tut.netlify.com/">&lt;code>Demo&lt;/code>&lt;/a>&lt;/p>
&lt;p>Code for this project - &lt;a href="https://gitlab.com/aveeksaha/vuepress-tut">&lt;code>Code&lt;/code>&lt;/a>
&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>&lt;a href="https://vuepress.vuejs.org/">VuePress&lt;/a> is a static site generator powered by Vue. VuePress uses markdown to generate pages so you can focus on just the writing. Also it allows you to use Vue components in markdown and use custom themes. By default VuePress ships with a responsive theme, which is what we&amp;rsquo;ll be using for this project.&lt;/p>
&lt;p>All these features make VuePress ideal for building documentation websites. This tutorial will show you how to get a documentation website up and running in 15 minutes.&lt;/p>
&lt;h1 id="installation">Installation&lt;/h1>
&lt;p>For this project you&amp;rsquo;ll need Node and npm. Then we&amp;rsquo;ll install VuePress globally so that we can use the cli and also locally for when we deploy.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ npm install -g vuepress
$ npm install -D vuepress
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="setup">Setup&lt;/h1>
&lt;p>Create a new project folder and change your current working directory to this folder.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ mkdir doc-tut &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> doc-tut
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then initialize this project with a &lt;code>package.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ npm init -y
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a folder called &lt;code>docs&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ mkdir docs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this &lt;code>docs&lt;/code> folder create a new folder called &lt;code>.vuepress&lt;/code> and add a file inside this called &lt;code>config.js&lt;/code>. Then create a &lt;code>readme.md&lt;/code> file in the &lt;code>docs&lt;/code> folder.&lt;/p>
&lt;p>Each sub folder we add to the docs folder becomes a sub route. We&amp;rsquo;re going to add 2 new folders called &lt;code>guide&lt;/code> and &lt;code>get-started&lt;/code> and add a &lt;code>readme.md&lt;/code> file to both of these folders. This means that we now have two sub routes that point to &lt;code>/guide/&lt;/code> and &lt;code>/get-started/&lt;/code>.&lt;/p>
&lt;p>Each markdown file in a folder becomes a HTML file with the route being the parent folder and the &lt;code>readme.md&lt;/code> file becomes the &lt;code>index.html&lt;/code> file for that subroute&lt;/p>
&lt;p>Your current File structure should look like this&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">doc&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">tut&lt;/span>
&lt;span class="o">|----&lt;/span>&lt;span class="nx">docs&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">readme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">md&lt;/span> &lt;span class="c1">// index.html for the root directory
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|----&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">vuepress&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span> &lt;span class="c1">// configuration file for the default theme
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|----&lt;/span>&lt;span class="nx">getting&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">started&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">readme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">md&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|----&lt;/span>&lt;span class="nx">guide&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">readme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">md&lt;/span>
&lt;span class="o">|&lt;/span>
&lt;span class="o">|--&lt;/span>&lt;span class="kr">package&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Inside the &lt;code>config.js&lt;/code> file place the following code.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;New Docs&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Title of the website
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// appears in the meta tag and as a subtitle
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">description&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;A small documentation site&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// Google Analytics tracking code
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ga&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Analytics code&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">themeConfig&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">nav&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="c1">// links that will appear in the top navbar
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Guide&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">link&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;/guide/&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Get Started&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">link&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;/get-started/&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="c1">// external link
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Github&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">link&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;https://github.com/Aveek-Saha&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">sidebar&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="c1">// These links will appear in the sidebar
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Create heading groups
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Getting Started&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">collapsable&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">children&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="c1">// These are pages we&amp;#39;ll add later
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s1">&amp;#39;/get-started/installation&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;/get-started/using&amp;#39;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Guide&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">collapsable&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">children&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="c1">// These are pages we&amp;#39;ll add later
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s1">&amp;#39;/guide/api-reference&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;/guide/deploying&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;h1 id="home-page">Home page&lt;/h1>
&lt;p>Now we&amp;rsquo;re going to create the front page for our website. You can read more about the &lt;a href="https://v0.vuepress.vuejs.org/default-theme-config/">Default Theme Config&lt;/a> here.&lt;/p>
&lt;p>In &lt;code>docs/readme.md&lt;/code> place the following code&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-markdown" data-lang="markdown">---
home: true
actionText: 📝 Guide
actionLink: /guide/api-reference
features:
&lt;span class="k">-&lt;/span> title: Simplicity First
details: Minimal setup with markdown-centered project structure helps you focus on writing.
&lt;span class="k">-&lt;/span> title: Vue-Powered
details: Enjoy the dev experience of Vue + webpack, use Vue components in markdown, and develop custom themes with Vue.
&lt;span class="k">-&lt;/span> title: Performant
details: VuePress generates pre-rendered static HTML for each page, and runs as an SPA once a page is loaded.
footer: Made with 💚 by Aveek Saha
---
&lt;span class="gh"># Installation
&lt;/span>&lt;span class="gh">&lt;/span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.
In interdum in sapien sed dictum. Phasellus placerat sem a eros rutrum efficitur.
Proin vestibulum quam ut felis maximus lacinia.
Vestibulum non cursus massa. Pellentesque quis leo at tellus aliquet porta.&lt;/code>&lt;/pre>&lt;/div>
&lt;p>To see this live, open the project dir in your terminal run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ vuepress dev docs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once it finishes compiling go to http://localhost:8080/ to see the homepage we just created. It should look like this&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;img src="https://home.aveek.io/blog/vuepress/screenshot1.png" alt="Screenshot1">&lt;/p>
&lt;h1 id="adding-the-other-pages">Adding the other pages&lt;/h1>
&lt;h2 id="get-started">Get Started&lt;/h2>
&lt;p>If you remember, we added two children to the sidebar group Getting Started in &lt;code>config.js&lt;/code> (&lt;code>/get-started/installation&lt;/code> and &lt;code>/get-started/using&lt;/code>).&lt;/p>
&lt;p>So we are going to add these files to the &lt;code>get-started&lt;/code> sub-directory. Create two files,&lt;code>installation.md&lt;/code> and &lt;code>using.md &lt;/code>.&lt;/p>
&lt;p>Copy this in both the files&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-markdown" data-lang="markdown">---
title: Installation
---
&lt;span class="c">&amp;lt;!-- change the title to Using in using.md --&amp;gt;&lt;/span>
&lt;span class="gh"># Installation
&lt;/span>&lt;span class="gh">&lt;/span>
There are two ways to include this in your project.
&lt;span class="gu">### NPM
&lt;/span>&lt;span class="gu">&lt;/span>&lt;span class="s">```sh
&lt;/span>&lt;span class="s">&lt;/span>
npm i some-lib
&lt;span class="s">```&lt;/span>
&lt;span class="gu">### CDN
&lt;/span>&lt;span class="gu">&lt;/span>&lt;span class="s">```sh
&lt;/span>&lt;span class="s">&lt;/span>
https://cdn.jsdelivr.net/npm/something/something.js
&lt;span class="s">```&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Once you add the code, The site should look something like this&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;img src="https://home.aveek.io/blog/vuepress/screenshot2.png" alt="Screenshot2">&lt;/p>
&lt;h2 id="guide">Guide&lt;/h2>
&lt;p>Another sidebar group we created called Guide also had two children, &lt;code>'/guide/api-reference'&lt;/code> and &lt;code>'/guide/deploying'&lt;/code>.&lt;/p>
&lt;p>So we&amp;rsquo;ll add these files to the &lt;code>guide&lt;/code> sub-directory,&lt;code>api-reference.md&lt;/code> and &lt;code>deploying.md &lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-markdown" data-lang="markdown">---
title: API reference
---
&lt;span class="gh"># API reference
&lt;/span>&lt;span class="gh">&lt;/span>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. In interdum in sapien sed dictum.
Phasellus placerat sem a eros rutrum efficitur.
Proin vestibulum quam ut felis maximus lacinia. Vestibulum non cursus massa.
Pellentesque quis leo at tellus aliquet porta. Quisque volutpat sollicitudin tincidunt.
In gravida ante nisl, at pretium nibh scelerisque eget. Phasellus eleifend pretium imperdiet.
Nunc egestas finibus dui a rhoncus. Integer viverra dapibus posuere.
Donec ut augue neque. Aliquam sed sem eu lacus posuere semper sit amet quis orci.
&lt;span class="gu">### Code
&lt;/span>&lt;span class="gu">&lt;/span>&lt;span class="s">```py
&lt;/span>&lt;span class="s">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="s">```&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Once you finish, The site should look something like this&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;img src="https://home.aveek.io/blog/vuepress/screenshot3.png" alt="Screenshot3">&lt;/p>
&lt;h1 id="deploying-to-netlify">Deploying to Netlify&lt;/h1>
&lt;p>First we&amp;rsquo;re going to add a &lt;code>.gitignore&lt;/code> with a single line-&lt;/p>
&lt;pre>&lt;code>node_modules
&lt;/code>&lt;/pre>&lt;p>Create a new project on GitHub or GitLab (Bitbucket is also available) then cd to your project folder and run the following&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ git init
$ git remote add origin &amp;lt;git URL of your project&amp;gt;
$ git add .
$ git commit -m &lt;span class="s2">&amp;#34;Initial commit&amp;#34;&lt;/span>
$ git push origin master
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Open &lt;a href="https://www.netlify.com/">Netlify&lt;/a> in your browser and sign up for an account if you don&amp;rsquo;t already have one. Go to your &lt;a href="https://app.netlify.com/account/sites">sites&lt;/a> and click &lt;code>New site from Git&lt;/code> then follow the steps-&lt;/p>
&lt;ol>
&lt;li>select your git provider.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Choose the repository that you just created and committed to.&lt;/li>
&lt;li>Under build options go to basic build settings and fill in the following 2 fields:
&lt;ul>
&lt;li>Build command&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>vuepress build docs
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Publish directory&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>docs/.vuepress/dist/
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;p>Here are some screenshots of the process.
&lt;div class="gallery caption-position-bottom caption-effect-fade hover-effect-zoom hover-transition" itemscope itemtype="http://schema.org/ImageGallery">
&lt;link rel="stylesheet" href="https://home.aveek.io/blog/css/hugo-easy-gallery.css" />
&lt;div class="box" >
&lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
&lt;div class="img" style="background-image: url('/vuepress/screenshot4.png');">
&lt;img itemprop="thumbnail" src="https://home.aveek.io/blog/vuepress/screenshot4.png" alt="Step 1"/>
&lt;/div>
&lt;figcaption>
&lt;p>Step 1&lt;/p>
&lt;/figcaption>
&lt;a href="https://home.aveek.io/blog/vuepress/screenshot4.png" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;div class="box" >
&lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
&lt;div class="img" style="background-image: url('/vuepress/screenshot5.png');">
&lt;img itemprop="thumbnail" src="https://home.aveek.io/blog/vuepress/screenshot5.png" alt="Step 2"/>
&lt;/div>
&lt;figcaption>
&lt;p>Step 2&lt;/p>
&lt;/figcaption>
&lt;a href="https://home.aveek.io/blog/vuepress/screenshot5.png" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;div class="box" >
&lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
&lt;div class="img" style="background-image: url('/vuepress/screenshot6.png');">
&lt;img itemprop="thumbnail" src="https://home.aveek.io/blog/vuepress/screenshot6.png" alt="Step 3"/>
&lt;/div>
&lt;figcaption>
&lt;p>Step 3&lt;/p>
&lt;/figcaption>
&lt;a href="https://home.aveek.io/blog/vuepress/screenshot6.png" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>Then click deploy. The first deploy might take a while, so dont hold your breath. When the deploy is finished visit the site url given in the overview, it should look something like this &lt;a href="https://vuepress-tut.netlify.com/">Demo&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>YTDX</title><link>https://home.aveek.io/blog/post/ytdx/</link><pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/ytdx/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/ytdx">&lt;code>YTDX&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demo, Download it here - &lt;a href="https://github.com/Aveek-Saha/ytdx/releases">&lt;code>Downloads&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>YTDX or YouTube Downloader X is an application that allows you to download audio from YouTube videos.
Paste any valid video link into the URL bar and download the audio from the video.&lt;/p>
&lt;p>After the video is downloaded the application extracts the audio and stores it in the location you specified. The audio conversion is done by ffmpeg.&lt;/p>
&lt;h2 id="main-ui">Main UI&lt;/h2>
&lt;p>&lt;img src="https://home.aveek.io/blog/ytdx/screenshot1.png" alt="Screenshot1">&lt;/p>
&lt;h2 id="notification">Notification&lt;/h2>
&lt;p>&lt;img src="https://home.aveek.io/blog/ytdx/screenshot2.png" alt="Screenshot2">&lt;/p>
&lt;h1 id="instructions">Instructions&lt;/h1>
&lt;ul>
&lt;li>Select a folder to save the downloaded file in.&lt;/li>
&lt;li>Get a valid YouTube video URL and paste it in the URL bar.&lt;/li>
&lt;li>Choose the desired audio format and click download.&lt;/li>
&lt;li>When the file is finished downloading you&amp;rsquo;ll get a notification.&lt;/li>
&lt;li>Clicking on the notification will take you to the download location.&lt;/li>
&lt;/ul>
&lt;h2 id="available-audio-formats">Available audio formats&lt;/h2>
&lt;ul>
&lt;li>mp3&lt;/li>
&lt;li>flac&lt;/li>
&lt;li>wav&lt;/li>
&lt;li>Vorbis&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Getting started with Vuejs and the GitHub API</title><link>https://home.aveek.io/blog/post/getting-started-with-vuejs-and-the-github-api/</link><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/getting-started-with-vuejs-and-the-github-api/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/GithubStats">&lt;code>GitHub Stats&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demo, try it out here - &lt;a href="https://githubstats0.firebaseapp.com/">&lt;code>Live Demo&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This tutorial is for beginners to Vue.js, which is a progressive JavaScript framework like Angular and React. You can read more about vue &lt;a href="https://vuejs.org/">&lt;code>here&lt;/code>&lt;/a>. Since Vue is a JavaScript framework, you&amp;rsquo;ll need basic knowledge of HTML, JS and CSS to follow along.&lt;/p>
&lt;p>I&amp;rsquo;ll be teaching you how to make a web app where you can check the download counts of GitHub releases, by querying the &lt;a href="https://developer.github.com/v3/">&lt;code>GitHub API&lt;/code>&lt;/a>.&lt;/p>
&lt;h3 id="what-are-releases">What are releases?&lt;/h3>
&lt;p>Releases are GitHub&amp;rsquo;s way of packaging and providing software to users. Repository owners can upload downloadable files that users can install or extract on to their systems as a way of distributing software. An example can be seen here &lt;a href="https://github.com/Aveek-Saha/MusicPlayer/releases">&lt;code>Music Player releases&lt;/code>&lt;/a>.&lt;/p>
&lt;p>There is one issue with this system though, it doesn&amp;rsquo;t display the number of times your software or packages were downloaded. It is very likely that someone who released software would want to know how popular it is, or how many people are using his software. So we&amp;rsquo;re going to build an application that helps us fill this void.&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;p>There are many ways to include Vue.js in an application, but for this tutorial we will be using the Vue CLI.&lt;/p>
&lt;p>Install the CLI.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">npm&lt;/span> &lt;span class="nx">install&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">g&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="nx">vue&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">cli&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>To create a new project, run:
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">vue&lt;/span> &lt;span class="nx">create&lt;/span> &lt;span class="nx">vue&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">tut&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
You&amp;rsquo;ll get a prompt to choose a &lt;code>default&lt;/code> preset or &lt;code>manually select features&lt;/code>. The default option will be fine for us, so just press enter and wait for the CLI to initialize the project. Cd into the directory and run &lt;code>npm run serve&lt;/code>. If the project was created properly, you should see a default web page when you go to &lt;code>http://localhost:8080&lt;/code>.&lt;/p>
&lt;p>The project folder will have a structure like this
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">vue&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">tut&lt;/span>
&lt;span class="o">|----&lt;/span>&lt;span class="nx">node_modules&lt;/span>
&lt;span class="o">|&lt;/span>
&lt;span class="o">|----&lt;/span>&lt;span class="kr">public&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">html&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">favicon&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ico&lt;/span>
&lt;span class="o">|&lt;/span>
&lt;span class="o">|----&lt;/span>&lt;span class="nx">src&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|----&lt;/span>&lt;span class="nx">assets&lt;/span> &lt;span class="c1">// logo.png
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|----&lt;/span>&lt;span class="nx">components&lt;/span> &lt;span class="c1">// contains a HelloWorld.vue component
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">App&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">vue&lt;/span> &lt;span class="c1">// main component
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="o">|&lt;/span>
&lt;span class="o">|--&lt;/span> &lt;span class="c1">// other files...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|--&lt;/span>&lt;span class="kr">package&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>Some useful Scripts:&lt;/p>
&lt;ul>
&lt;li>Run on localhost: &lt;code>npm run serve&lt;/code>&lt;/li>
&lt;li>Build for production: &lt;code>npm run build&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>We&amp;rsquo;ll be working with mostly the files in the &lt;code>src&lt;/code> folder. In &lt;code>index.html&lt;/code> we&amp;rsquo;re going to add Bootstrap and JQuery to give our app some visual appeal. Put the following in the head tag.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css&amp;#34;&lt;/span> &lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO&amp;#34;&lt;/span> &lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://code.jquery.com/jquery-3.3.1.slim.min.js&amp;#34;&lt;/span> &lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&amp;#34;&lt;/span>
&lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js&amp;#34;&lt;/span> &lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49&amp;#34;&lt;/span>
&lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js&amp;#34;&lt;/span> &lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy&amp;#34;&lt;/span>
&lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>We will get the download numbers of each file in the releases through the GitHub API. To make these Api requests we&amp;rsquo;re going to use &lt;code>Axios&lt;/code>, which is a promise based HTTP client for the browser and node.js. To add axios run &lt;code>npm i axios&lt;/code>.&lt;/p>
&lt;h1 id="components">Components&lt;/h1>
&lt;p>Vue components have 3 parts&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- for HTML and components --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c1">// data and methods of the component
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">/* styles for the component */&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Let&amp;rsquo;s start off by renaming &lt;code>HellWorld.vue&lt;/code> to something more apt, like &lt;code>Data.vue&lt;/code>, since we&amp;rsquo;re going to process and display the API request data there. After renaming be sure to rename all the occurrences of &lt;code>HellWorld&lt;/code> with &lt;code>Data&lt;/code>, in both &lt;code>Data.vue&lt;/code> and &lt;code>App.vue&lt;/code>.&lt;/p>
&lt;p>In &lt;code>Data.vue&lt;/code> remove everything in between the &lt;code>style&lt;/code> tag and the &lt;code>template&lt;/code> tag. Your file should look like this.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span> &lt;span class="na">scoped&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>We&amp;rsquo;re going to add a navbar, a container div and some styles to &lt;code>App.vue&lt;/code> and the file should look like this.
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;app&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- added a navbar --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">nav&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;navbar navbar-dark bg-dark&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;navbar-brand mb-0 h2&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>GitHub Download Stats&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://aveek-saha.github.io/&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;navbar-brand mb-0 h1 text-right&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">i&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;fab fa-github fa-inverse&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">i&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">nav&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- wrapped the data component in a container --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;container&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- inject the Data component --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Data&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c1">// import the data component
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="nx">Data&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./components/Data.vue&amp;#39;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;app&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">components&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Data&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">/* global styles */&lt;/span>
&lt;span class="nt">body&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#FEFEFE&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">asset&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">word-break&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">break-all&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">#&lt;/span>&lt;span class="nn">app&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">font-family&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Avenir&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Helvetica&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Arial&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">sans-serif&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kp">-webkit-&lt;/span>&lt;span class="n">font-smoothing&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">antialiased&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kp">-moz-&lt;/span>&lt;span class="n">osx-font-smoothing&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">grayscale&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
This is basically all the modification we&amp;rsquo;ll be doing to &lt;code>App.vue&lt;/code>. All the magic happens in &lt;code>Data.vue&lt;/code>, where our main logic resides.&lt;/p>
&lt;h3 id="datavue">Data.vue&lt;/h3>
&lt;p>This is where we&amp;rsquo;ll be making the API requests and in order to use &lt;code>axios&lt;/code> it has to be imported to the component. Along with this, we&amp;rsquo;ll also be creating some variables in the &lt;code>script&lt;/code> section of this component.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// import axios
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="nx">axios&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;axios&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// all the data belonging to this component goes
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// to data() and is returned as an object
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// declare some variables that we&amp;#39;ll use later
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// owner of the repository
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">username&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// name of the repo
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">repository&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// list of releases
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">releases&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;span class="c1">// total downloads of all releases combined
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">grandTotal&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// if the query returned a status 404 or not
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">success&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// does the repository have any releases?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">empty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// base url
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">url&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Now we need to make a form so that people can enter &lt;code>username&lt;/code> and &lt;code>repository&lt;/code>, we&amp;rsquo;ll add this in the &lt;code>template&lt;/code> tag.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;row justify-content-center&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col-lg-6&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card bg-light shadow-sm mb-3 rounded&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin-top: 2%&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card-body&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h5&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card-title&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Enter Details&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h5&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;form-group&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;form-control form-control-sm&amp;#34;&lt;/span> &lt;span class="na">v-model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span> &lt;span class="na">placeholder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Your username&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;form-group&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;form-control form-control-sm&amp;#34;&lt;/span> &lt;span class="na">v-model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;repository&amp;#34;&lt;/span>
&lt;span class="na">list&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;repos&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;repository&amp;#34;&lt;/span> &lt;span class="na">placeholder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Repository name&amp;#34;&lt;/span> &lt;span class="na">v-on:keyup&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">enter&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sendReq&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;btn btn-outline-dark&amp;#34;&lt;/span> &lt;span class="na">v-on:click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sendReq&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Submit&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Shown in the code above are two important concepts in Vue:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Data Binding-&lt;/strong>
In this line below we use &lt;code>v-model=&amp;quot;username&amp;quot;&lt;/code> this means that we&amp;rsquo;re binding the value of the input to the variable &lt;code>username&lt;/code>. As the value of the input field changes, so does the variable &lt;code>username&lt;/code> in &lt;code>data()&lt;/code> and vice versa.
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;form-control form-control-sm&amp;#34;&lt;/span>
&lt;span class="na">v-model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span> &lt;span class="na">placeholder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Your username&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Event Handling-&lt;/strong>
Here we use &lt;code>v-on:click=&amp;quot;sendReq&amp;quot;&lt;/code> which means that when we click on this button it will call &lt;code>sendReq&lt;/code> which is a method we will be implementing now.
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;btn btn-outline-dark&amp;#34;&lt;/span> &lt;span class="na">v-on:click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sendReq&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Submit&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>So now we have the input form, that does nothing when we click Submit as of now. We need to write the &lt;code>sendReq&lt;/code> method which is going to send a request to the GitHub api. Make the following changes in &lt;code>script&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">import&lt;/span> &lt;span class="nx">axios&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;axios&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">data&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">username&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">repository&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">releases&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;span class="nx">grandTotal&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">success&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">empty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">url&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="c1">// add methods
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">methods&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">sendReq&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">that&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">empty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// get data using a promise with axios
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// the request url has the format base + /repos/:user/:repo/releases
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">axios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">url&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;/repos/&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">username&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">repository&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;/releases&amp;#34;&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>
&lt;span class="c1">// the total of all the release downloads
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">grandTotal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// total of a particular release version
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">assets&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// add up the download counts of the individual
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// binary/packaged files for a particular release version
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">total&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nb">parseInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">assets&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">download_count&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// add a new field to the data object
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">total&lt;/span>
&lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">grandTotal&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">total&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// that.releases is an array of releases
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">releases&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">data&lt;/span>
&lt;span class="c1">// if we got this far that means the request was a success
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">success&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="c1">// check if there are any releases for the repo
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">empty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// if there&amp;#39;s an error then the request was not a success
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">success&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">empty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>So now if we enter a valid &lt;code>username&lt;/code> and &lt;code>repository&lt;/code> and click Submit, the response will be stored in &lt;code>releases&lt;/code>. Now we need a way to display the information that we got. Since &lt;code>releases&lt;/code> is an array, we&amp;rsquo;ll use &lt;code>v-for&lt;/code> to iteratively display one card for each release.&lt;/p>
&lt;p>For this, we&amp;rsquo;re going to create a new component called &lt;code>Card&lt;/code>, and we&amp;rsquo;ll pass data from the &lt;code>Data&lt;/code> component via &lt;strong>props&lt;/strong> (Properties). This means that whatever value we pass to a prop from the parent can be read by the child component and becomes a property of that component.&lt;/p>
&lt;p>Add the following lines to &lt;code>Data.vue&lt;/code>&lt;/p>
&lt;p>In &lt;code>Template&lt;/code>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;row justify-content-center&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col-lg-6&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h5&lt;/span> &lt;span class="na">v-if&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;grandTotal &amp;amp;&amp;amp; success&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin-bottom: 3%;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
Total Downloads: {{grandTotal.toLocaleString()}}
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h5&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- show a card for every element in releases --&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- release and index are props in the &amp;lt;Card&amp;gt; component --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Card&lt;/span> &lt;span class="na">v-for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;(release , index) in releases&amp;#34;&lt;/span> &lt;span class="na">:key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;index&amp;#34;&lt;/span> &lt;span class="na">v-bind:release&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;release&amp;#34;&lt;/span> &lt;span class="na">v-bind:index&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;index&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">Card&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- if request not successful then say that the repo could not be found --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h5&lt;/span> &lt;span class="na">v-if&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;!success&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin: 2%;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
No repository found
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h5&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- if the repo exists but it has no releases, show that it has none --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h5&lt;/span> &lt;span class="na">v-if&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;empty&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin: 2%;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
No Releases
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h5&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>In &lt;code>script&lt;/code> add
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// card component that we&amp;#39;ll be creating
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="nx">Card&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./Card.vue&amp;#39;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">components&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Card&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="c1">// ... rest of the exports
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>Here we get to see 3 more important features of Vue:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>List Rendering-&lt;/strong>
The &lt;code>v-for&lt;/code> directive is used to render a list of items based on an array. Another way to use the &lt;code>v-for&lt;/code> directive is &lt;code>v-for=&amp;quot;item in items&amp;quot;&lt;/code>, which is simpler. In this case we render cards based on the values of the &lt;code>releases&lt;/code> array.
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card shadow-sm mb-3 rounded&amp;#34;&lt;/span>
&lt;span class="na">v-for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;(release , index) in releases&amp;#34;&lt;/span> &lt;span class="na">:key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;index&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Conditional Rendering-&lt;/strong>
We use &lt;code>v-if&lt;/code> to show or hide content based on conditions. For example in this case, we want to show this message only when the GET request was not successful. &lt;code>v-if&lt;/code> can be used with &lt;code>v-else&lt;/code> and &lt;code>v-else-if&lt;/code>.
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h5&lt;/span> &lt;span class="na">v-if&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;!success&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin: 2%;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
No repository found
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h5&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Class and style binding-&lt;/strong>
The &lt;code>v-bind:class&lt;/code> or &lt;code>v-bind:style&lt;/code> can be used to manipulate the class or style of an element based on a condition. As you&amp;rsquo;ll see below, if &lt;code>release.prerelease&lt;/code> is true then the div will be given a class of &lt;code>alert-warning&lt;/code>, and if &lt;code>index == 0&lt;/code> i.e. it&amp;rsquo;s the first element in the array, then the div will be given a class of &lt;code>alert-success&lt;/code>.
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card-header&amp;#34;&lt;/span>
&lt;span class="na">v-bind:class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{ &amp;#39;alert-warning&amp;#39;: release.prerelease , &amp;#39;alert-success&amp;#39;: index == 0 }&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="cardvue">Card.vue&lt;/h3>
&lt;p>Now we&amp;rsquo;ll be creating the card component. Create a file called &lt;code>Card.vue&lt;/code> and put the following in the file.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card shadow-sm mb-3 rounded &amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin-top: 2%; text-align:left&amp;#34;&lt;/span> &lt;span class="na">v-if&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;success&amp;#34;&lt;/span> &lt;span class="na">v-for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;(release , index) in releases&amp;#34;&lt;/span> &lt;span class="na">:key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;index&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card-header&amp;#34;&lt;/span> &lt;span class="na">v-bind:class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{ &amp;#39;alert-warning&amp;#39;: release.prerelease , &amp;#39;alert-success&amp;#39;: index == 0 }&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h5&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card-title&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin-bottom:0px&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- Use the prop values passed by the parent --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">v-bind:href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;release.html_url&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;alert-link&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color:inherit&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> {{release.tag_name}}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="ni">&amp;amp;nbsp;&lt;/span>&amp;gt; &lt;span class="ni">&amp;amp;nbsp;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text-muted h6&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
{{release.total.toLocaleString()}} downloads
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h5&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;card-body&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- create a table with the name of the file and the number of downloads --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">table&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;table table-borderless table-sm&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">thead&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">th&lt;/span> &lt;span class="na">scope&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Name&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">th&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">th&lt;/span> &lt;span class="na">scope&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Downloads&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">th&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">thead&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tbody&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tr&lt;/span> &lt;span class="na">v-for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;( asset , index) in release.assets&amp;#34;&lt;/span> &lt;span class="na">:key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;index&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">th&lt;/span> &lt;span class="na">scope&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;row&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;asset&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>{{asset.name}}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">th&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>{{asset.download_count.toLocaleString()}} &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tbody&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">table&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Card&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// Props that become properties when release and index are passed from the parent
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;release&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;index&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span> &lt;span class="na">scoped&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">alert-warning&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">inherit&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">alert-success&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">inherit&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h1 id="wrapping-it-up">Wrapping it up&lt;/h1>
&lt;p>Now if we serve the application with &lt;code>npm run serve&lt;/code>, you should see something like this:&lt;/p>
&lt;p>&lt;img src="https://home.aveek.io/blog/githubstats/screenshot2.png" alt="Screenshot1">&lt;/p>
&lt;p>When you click submit, or enter after typing a valid repository with releases, you should see the total downloads and the downloads for each individual release:&lt;/p>
&lt;p>&lt;img src="https://home.aveek.io/blog/githubstats/screenshot3.png" alt="Screenshot2">&lt;/p>
&lt;p>That&amp;rsquo;s it! You&amp;rsquo;ve made a real world application using Vue from scratch and used some important features like-&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Data Binding&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Event Handling&lt;/strong>&lt;/li>
&lt;li>&lt;strong>List Rendering&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Conditional Rendering&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Class and style binding&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>A slightly modified version of this project can be found on my GitHub - &lt;a href="https://github.com/Aveek-Saha/GithubStats">&lt;code>GitHub Stats&lt;/code>&lt;/a>&lt;/p>
&lt;p>And a live version of the code above can be found here - &lt;a href="https://githubstats0.firebaseapp.com/">&lt;code>Live Demo&lt;/code>&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Making an online chess website with Socket.io</title><link>https://home.aveek.io/blog/post/making-an-online-chess-website-with-socketio/</link><pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/making-an-online-chess-website-with-socketio/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/Online-Chess">&lt;code>Online chess&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
Check out the code in action here, play it yourself - &lt;a href="https://chess0.herokuapp.com">&lt;code>Live demo&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In this tutorial you&amp;rsquo;ll learn how to build a basic online Chess platform with multiple rooms, where people can play against each other. We will be using Sockets to communicate between the client and the server.&lt;/p>
&lt;h1 id="socketio">Socket.io&lt;/h1>
&lt;p>From the socket.io documentation -&lt;/p>
&lt;blockquote>
&lt;p>Socket.IO is a library that enables real-time, bidirectional and event-based communication between the browser and the server.&lt;/p>
&lt;/blockquote>
&lt;p>Two important methods that you need know are-&lt;/p>
&lt;p>The &lt;code>emit&lt;/code> method emits an event and you can send data along with this event as long as it&amp;rsquo;s JSON encodable or binary data.&lt;/p>
&lt;pre>&lt;code>socket.emit('test', msg);
&lt;/code>&lt;/pre>&lt;p>The &lt;code>on&lt;/code> method listens for an event and it can receive data that has been emitted.&lt;/p>
&lt;pre>&lt;code>socket.on('test', (msg) =&amp;gt; {
console.log(msg);
});
&lt;/code>&lt;/pre>&lt;!-- raw HTML omitted -->
&lt;h1 id="file-structure">File Structure&lt;/h1>
&lt;p>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="nx">chess&lt;/span>
&lt;span class="o">|----&lt;/span>&lt;span class="nx">chessboard&lt;/span> &lt;span class="c1">// A folder for the chessboard.js library
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|----&lt;/span>&lt;span class="nx">img&lt;/span> &lt;span class="c1">// Images for the chess pieces
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|--&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span> &lt;span class="c1">// The actual game
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span> &lt;span class="c1">// The node server
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|--&lt;/span>&lt;span class="nx">full&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">html&lt;/span>
&lt;span class="o">|--&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">html&lt;/span>
&lt;span class="o">|&lt;/span>
&lt;span class="o">|--&lt;/span>&lt;span class="kr">package&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;p>Create a new project folder, cd to that directory and then run&lt;/p>
&lt;pre>&lt;code>npm init
&lt;/code>&lt;/pre>&lt;p>After that go to &lt;a href="http://chessboardjs.com/">&lt;code>Chessboard.js&lt;/code>&lt;/a> and download the latest version. Extract the contents to the &lt;code>chessboard&lt;/code> folder. Copy the &lt;code>img&lt;/code> folder from &lt;code>chessboard&lt;/code> to the root directory . We&amp;rsquo;re going to use this library to display and interact with the chessboard and the pieces.&lt;/p>
&lt;p>Now we&amp;rsquo;ll create the &lt;code>index.html&lt;/code> and &lt;code>game.js&lt;/code> files. Go to this &lt;a href="http://chessboardjs.com/examples#5003">&lt;code>Highlight Legal Moves&lt;/code>&lt;/a> example on the &lt;a href="http://chessboardjs.com/">&lt;code>Chessboard.js&lt;/code>&lt;/a> website.&lt;/p>
&lt;p>For checking valid moves, piece placement and check/checkmate detection we&amp;rsquo;ll be using another library called &lt;a href="https://github.com/jhlywa/chess.js">&lt;code>Chess.js&lt;/code>&lt;/a>. We&amp;rsquo;re going to include this via CDN in &lt;code>index.html&lt;/code>&lt;/p>
&lt;p>Copy the JavaScript section of the code into &lt;code>game.js&lt;/code>. Your File should look like this.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="kd">var&lt;/span> &lt;span class="nx">board&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">game&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Chess&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">removeGreySquares&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#board .square-55d63&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">css&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;background&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">greySquare&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">square&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">squareEl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#board .square-&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">square&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">background&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;#a9a9a9&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">squareEl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">hasClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;black-3c85d&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">background&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;#696969&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">squareEl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">css&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;background&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">background&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">onDragStart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// do not pick up pieces if the game is over
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// or if it&amp;#39;s not that side&amp;#39;s turn
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game_over&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">turn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;w&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/^b/&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">turn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/^w/&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">onDrop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">removeGreySquares&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// see if the move is legal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">move&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">move&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">from&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">to&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">promotion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;q&amp;#39;&lt;/span>
&lt;span class="c1">// NOTE: always promote to a queen for example simplicity
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="c1">// illegal move
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">move&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;snapback&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">onMouseoverSquare&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">square&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// get list of possible moves for this square
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">moves&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">moves&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">square&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">square&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">verbose&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// exit if there are no moves available for this square
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">moves&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// highlight the square they moused over
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">greySquare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">square&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// highlight the possible squares for this piece
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">moves&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">greySquare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">moves&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">onMouseoutSquare&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">square&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">removeGreySquares&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">onSnapEnd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">board&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">position&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fen&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">cfg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">draggable&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">position&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;start&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onDragStart&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onDragStart&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onDrop&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onDrop&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onMouseoutSquare&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onMouseoutSquare&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onMouseoverSquare&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onMouseoverSquare&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onSnapEnd&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onSnapEnd&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">board&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ChessBoard&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;board&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cfg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next up is &lt;code>index.html&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Chess 0&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.2/chess.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./chessboard/js/chessboard-1.0.0.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text/css&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./chessboard/css/chessboard-1.0.0.min.css&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;container&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- The chess board --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;board&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width: 500px; margin: auto&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./game.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you just double click on the &lt;code>index.html&lt;/code> file you should be able to see a simple chessboard and the pieces. You can move the pieces around, and hovering on a piece will show you the possible moves you can make. This is because of the integration with &lt;code>Chess.js&lt;/code> that does the move generation and valid move checking for us.&lt;/p>
&lt;p>In case a user tries to join a game that already has 2 players in it, we&amp;rsquo;ll redirect him to &lt;code>full.html&lt;/code>, which is just a basic html page that says the game is full.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">
&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Room Full&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css&amp;#34;&lt;/span>
&lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO&amp;#34;&lt;/span> &lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js&amp;#34;&lt;/span>
&lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy&amp;#34;&lt;/span>
&lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin: 4%&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;player&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin: auto&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>This room is full&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="packages">Packages&lt;/h1>
&lt;p>For this project we will be using only &lt;code>Express&lt;/code> and &lt;code>Socket.io&lt;/code>. To install them, run&lt;/p>
&lt;pre>&lt;code>npm install --save express
npm install --save socket.io
&lt;/code>&lt;/pre>&lt;h1 id="the-server">The Server&lt;/h1>
&lt;p>Create &lt;code>index.js&lt;/code> and require the following modules.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">express&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;express&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">http&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">socket&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;socket.io&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we&amp;rsquo;re going to declare a few variables&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="c1">// use 8080 as the default port number, process.env.PORT is
&lt;/span>&lt;span class="c1">//useful if you deploy to Heroku
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PORT&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="mi">8080&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">express&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// start the server
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">app&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// initialize a new instance of socket.io by passing the HTTP server object
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">io&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">server&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// keep track of how many players in a game (0, 1, 2)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">players&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// create an array of 100 games and initialize them
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">games&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">players&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="nx">pid&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">]};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Our routing is simple, we only need to show &lt;code>index.html&lt;/code> when &amp;ldquo;/&amp;rdquo; is accessed&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// Add the static directory for our js and css files
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">express&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">static&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">__dirname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sendFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">__dirname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;/index.html&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now its time to listen for the &lt;code>connection&lt;/code> event on the server&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;connection&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// just assign a random number to every player that has connected
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// the numbers have no significance so it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// doesn&amp;#39;t matter if 2 people get the same number
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">playerId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">playerId&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39; connected&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// if a user disconnects just print their playerID
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;disconnect&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">playerId&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39; disconnected&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;h1 id="the-client">The Client&lt;/h1>
&lt;p>Let&amp;rsquo;s turn our attention back to the client, &lt;code>index.html&lt;/code>. We&amp;rsquo;re going to add an input box where the player enters the room number he wants to join and once he hits a button, if the room is not full, he&amp;rsquo;ll join the room.&lt;/p>
&lt;p>After adding that and a few divs to display some information, we add bootstrap and the final &lt;code>index.html&lt;/code> looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Chess 0&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- Adding bootstrap--&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css&amp;#34;&lt;/span>
&lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO&amp;#34;&lt;/span> &lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js&amp;#34;&lt;/span>
&lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy&amp;#34;&lt;/span>
&lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.2/chess.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./chessboard/js/chessboard-1.0.0.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text/css&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./chessboard/css/chessboard-1.0.0.min.css&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- Adding some style --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">number&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="nd">-webkit-inner-spin-button&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">number&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="nd">-webkit-outer-spin-button&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kp">-webkit-&lt;/span>&lt;span class="k">appearance&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">#&lt;/span>&lt;span class="nn">roomNumbers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="kt">%&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;container&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- The chess board --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;board&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width: 500px; margin: auto&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;margin: auto&amp;#34;&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- Shows the player number and color --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34; player&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;roomNumbers&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Enter a room number between 0 and 99&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;row&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;number&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;room&amp;#34;&lt;/span> &lt;span class="na">min&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="na">max&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;99&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;form-control form-control-md number&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;col&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- A button that connects the user to the given valid room number --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;button&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;btn btn-success&amp;#34;&lt;/span> &lt;span class="na">onclick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;connect()&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Connect&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- Displays weather the game is in progress, or over --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;state&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Join Game&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./game.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we have to modify &lt;code>game.js&lt;/code> so that it communicates with the server. After initializing the socket we can communicate via the two methods mentioned earlier.&lt;/p>
&lt;p>We&amp;rsquo;ll start off modifying &lt;code>game.js&lt;/code> by adding a few variables.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="c1">// creates a new chess game using the chess.js library
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">game&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Chess&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">//initialize the socket
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">socket&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// piece color
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;white&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// number of players in the current room
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">players&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// the room number between 0 and 99
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">roomId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if the both players have joined then it will be false
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">play&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// For some DOM manipulation later
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">room&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;room&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">roomNumber&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;roomNumbers&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;button&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;state&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;h1 id="more-server-stuff">More Server Stuff&lt;/h1>
&lt;p>We set up the client side socket, and we will be able to communicate between the client and server. But before that we have a few more things to set up here, inside&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;connection&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;ll be emitting and receiving some events from the client here and after this, we&amp;rsquo;ll set up the emitters and receivers on the client side too.&lt;/p>
&lt;p>What we&amp;rsquo;ll use the for server here is basically passing on the message from one client to the other. So in most of the &lt;code>socket.on()&lt;/code> function callbacks, you&amp;rsquo;ll see a &lt;code>socket.emit&lt;/code> function, so that the server can pass on the event to the rest of the clients. since the server will emit events to all clients. The clients will know if the event was meant for them because we pass the &lt;code>roomId&lt;/code> in the message. The &lt;code>roomId&lt;/code> is checked on the client side. This method isn&amp;rsquo;t secure, but it&amp;rsquo;s fine for our small application.&lt;/p>
&lt;p>This part is added in the &lt;code>io.on('connection')&lt;/code> callback in &lt;code>index.js&lt;/code> after the playerID is generated. We&amp;rsquo;ll also add a new function on &lt;code>disconnect&lt;/code> to free up room space when players disconnect.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="kd">var&lt;/span> &lt;span class="nx">color&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// black or white
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// &amp;#39;joined&amp;#39; is emitted when the player enters a room number and clicks
&lt;/span>&lt;span class="c1">// the connect button the room ID that the player entered gets passed as a message
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;joined&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// if the room is not full then add the player to that room
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">players&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">players&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">pid&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">players&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">playerId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="c1">// else emit the full event
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;full&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">roomId&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="nx">players&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">players&lt;/span>
&lt;span class="c1">// the first player to join the room gets white
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">players&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;black&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;white&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// this is an important event because, once this is emitted the game
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// will be set up in the client side, and it&amp;#39;ll display the chess board
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;player&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">playerId&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">players&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">color&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">roomId&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// The client side emits a &amp;#39;move&amp;#39; event when a valid move has been made.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;move&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// pass on the move event to the other clients
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">broadcast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;move&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// &amp;#39;play&amp;#39; is emitted when both players have joined and the game can start
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;play&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">broadcast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;play&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ready &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// when the user disconnects from the server, remove him from the game room
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;disconnect&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">pid&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">playerId&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">pid&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">playerId&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">games&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">players&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">playerId&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39; disconnected&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;h1 id="back-to-the-client">Back to the Client&lt;/h1>
&lt;p>After setting up our server to relay messages back and forth from clients we set up the client to respond to the server emitted events. So let&amp;rsquo;s get back to &lt;code>game.js&lt;/code>.&lt;/p>
&lt;p>First thing we&amp;rsquo;ll do is set up a listener for the &amp;lsquo;player&amp;rsquo; event, which means that a player has joined the event and the board will be set up, along with the player&amp;rsquo;s color. The code we wrote to create the board in the first step also goes in this.&lt;/p>
&lt;p>Put this at the bottom of &lt;code>game.js&lt;/code>, after removing the old &lt;code>cfg&lt;/code> and &lt;code>board&lt;/code> variables.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;player&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">plno&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;player&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// we&amp;#39;re passing an object -
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// { playerId, players, color, roomId } as msg
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">color&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// show the players number and color in the player div
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">players&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">players&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">plno&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Player &amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">players&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34; : &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">color&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// emit the play event when 2 players have joined
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">players&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="nx">play&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// relay it to the other player that is in the room
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;play&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// change the state from &amp;#39;join room&amp;#39; to -
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Game in Progress&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// if only one person is in the room
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Waiting for Second player&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">cfg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">orientation&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">color&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">draggable&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">position&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;start&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onDragStart&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onDragStart&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onDrop&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onDrop&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onMouseoutSquare&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onMouseoutSquare&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onMouseoverSquare&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onMouseoverSquare&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">onSnapEnd&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">onSnapEnd&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">board&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ChessBoard&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;board&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cfg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">board&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we need to modify some of the functions that we copied from the example at &lt;a href="http://chessboardjs.com/examples#5003">&lt;code>chessboardjs&lt;/code>&lt;/a>.&lt;/p>
&lt;p>For &lt;code>onDragStart&lt;/code> we add a few more conditions to check if the move is valid or not. The conditions we added are -&lt;/p>
&lt;pre>&lt;code>play || // check if both players have joined
// if the player is white, he cannot move black pieces and vice versa
(game.turn() === 'w' &amp;amp;&amp;amp; color === 'black') ||
(game.turn() === 'b' &amp;amp;&amp;amp; color === 'white')
&lt;/code>&lt;/pre>&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="kd">var&lt;/span> &lt;span class="nx">onDragStart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// A few more rules have been added
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game_over&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">play&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">turn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;w&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/^b/&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">turn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">piece&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/^w/&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">turn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;w&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;black&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">turn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">color&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;white&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function &lt;code>onDrop&lt;/code>, is when the pieces are actually moved. So when the player makes a move and drops a move, the &amp;lsquo;move&amp;rsquo; event is emitted.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="kd">var&lt;/span> &lt;span class="nx">onDrop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">removeGreySquares&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// see if the move is legal
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">move&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">move&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">from&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">to&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">promotion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;q&amp;#39;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game_over&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;GAME OVER&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;gameOver&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">roomId&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// illegal move
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">move&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;snapback&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if the move is allowed, emit the move event.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;move&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">move&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">move&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">board&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fen&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="nx">room&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">roomId&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we need to add some listeners, so that changes that are sent via events are reflected in the client.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="c1">// if the room is full (players &amp;gt; 2), redirect the user
&lt;/span>&lt;span class="c1">// to the full.html page we made earlier
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;full&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">roomId&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assign&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">href&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;full.html&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// change play to false when both players have
&lt;/span>&lt;span class="c1">// joined the room, so that they can start playing
&lt;/span>&lt;span class="c1">// (when play is false the players can play)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;play&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">roomId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">play&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Game in progress&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="c1">// when a move happens, check if it was meant for the clients room
&lt;/span>&lt;span class="c1">// if yes, then make the move on the clients board
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;move&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">room&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">roomId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">move&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">board&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">position&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fen&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;moved&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>One last method requires implementation, the &lt;code>connect&lt;/code> function. When we click the connect button it needs to emit an event with the room id that the player has entered.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">
&lt;span class="kd">var&lt;/span> &lt;span class="nx">connect&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// extract the value of the input field
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">roomId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">room&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// if the room number is valid
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">roomId&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">parseInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">roomId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">room&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">remove&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">roomNumber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Room Number &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">roomId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">remove&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// emit the &amp;#39;joined&amp;#39; event which we have set up a listener for on the server
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;joined&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">roomId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="checking-if-it-works">Checking if it works&lt;/h1>
&lt;p>For the complete code, check the repo, &lt;a href="https://github.com/Aveek-Saha/Online-Chess">&lt;code>Online chess&lt;/code>&lt;/a>.&lt;/p>
&lt;p>cd to the project directory, and then run&lt;/p>
&lt;pre>&lt;code>node index.js
&lt;/code>&lt;/pre>&lt;p>If you&amp;rsquo;ve done everything correctly you&amp;rsquo;ll see something like this &lt;a href="https://chess0.herokuapp.com">&lt;code>Live demo&lt;/code>&lt;/a> here. You can open up as many instances as you want and try playing with your friends.&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>Making the Chrome dinosaur game with Phaser</title><link>https://home.aveek.io/blog/post/chrome-dinosaur-game-tutorial-with-phaser/</link><pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/chrome-dinosaur-game-tutorial-with-phaser/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/Chrome-dinosaur-game-clone">&lt;code>Dinosaur game code&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
Check out the code in action here, play it yourself - &lt;a href="https://aveeksaha.gitlab.io/runny/">&lt;code>Live demo&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Chrome has this really simple and fun game that you can play when your WiFi is down. It consists of a small dinosaur that has to jump over cacti. This game has a couple of core mechanics, a player that jumps when the up key is pressed, and an infinite number of randomly generated obstacles for the player to jump over.&lt;/p>
&lt;p>Both these things can be easily achieved in Phaser, which is a 2D game framework for making HTML browser games. We&amp;rsquo;re going to create a game with almost the same mechanics but with a different look.&lt;/p>
&lt;p>I&amp;rsquo;m going to call it &lt;code>Runny&lt;/code>&lt;/p>
&lt;p>If you&amp;rsquo;re new to phaser I would suggest reading a getting started tutorial.&lt;/p>
&lt;h1 id="file-structure">File Structure&lt;/h1>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">runny&lt;/span>
&lt;span class="o">|---&lt;/span>&lt;span class="nx">assets&lt;/span> &lt;span class="c1">// A folder for all our tiles and sprites
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">|---&lt;/span>&lt;span class="nx">js&lt;/span> &lt;span class="c1">// All the javascript files
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">boot&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">gameover&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">gametitle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">phaser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="nx">preload&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;span class="o">|&lt;/span>
&lt;span class="o">|--&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">html&lt;/span> &lt;span class="c1">// Where everything comes together
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>For this project we&amp;rsquo;ll only be using &lt;code>preload.js&lt;/code> and &lt;code>main.js&lt;/code> from the &lt;code>js folder&lt;/code>&lt;/p>
&lt;p>The boilerplate code was taken from &lt;a href="https://www.joshmorony.com/">&lt;code>Joshua Morony's website&lt;/code>&lt;/a> , download the files &lt;a href="https://www.joshmorony.com/wp-content/uploads/2015/03/phaser-template.zip">&lt;code>Here&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="assets">Assets&lt;/h1>
&lt;p>We need three basic kinds of tiles- the ground, the player and the obstacles. I&amp;rsquo;ll be using 2 different png files for the obstacles and the ground. For the player I&amp;rsquo;m going to use a sprite sheet because it can be animated.&lt;/p>
&lt;p>The ground and obstacle tiles were Made by &lt;a href="http://kenney.nl/assets?q=2d">&lt;code>Kenny&lt;/code>&lt;/a> and the player sprite sheet was made by &lt;a href="https://arks.itch.io/dino-characters">&lt;code>arks&lt;/code>&lt;/a>.&lt;/p>
&lt;h1 id="preloadjs">Preload.js&lt;/h1>
&lt;p>Here we load the assets that we need before we use them. In preload.js, change
&lt;code>this.game.state.start(&amp;quot;GameTitle&amp;quot;);&lt;/code> to
&lt;code>this.game.state.start(&amp;quot;Main&amp;quot;);&lt;/code>
&lt;!-- raw HTML omitted -->
Then add the following
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">preload&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="c1">// ground tile
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">image&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;tile&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;assets/tile.png&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// obstacle tile
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">image&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;box&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;assets/box.png&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// player sprite
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spritesheet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;player&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;assets/player.png&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h1 id="mainjs">Main.js&lt;/h1>
&lt;p>This is where the fun stuff happens!&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="create">Create&lt;/h3>
&lt;p>In the create function we initialize a few variables that we&amp;rsquo;ll be using later.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileVelocity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">450&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// velocity of the obstacles
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1500&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// rate at which the obstacles appear on screen
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// is the player jumping?
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// add keyboard input
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cursors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keyboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createCursorKeys&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// set a blue background color
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backgroundColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;479cde&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// start the phaser arcade physics system
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">physics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startSystem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Phaser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Physics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ARCADE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// execute addObstacles at the rate we set
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">events&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">loop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addObstacles&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Now we need 2 groups, one for the ground and one for the obstacles &lt;!-- raw HTML omitted -->&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// the floor group
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">group&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enableBody&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createMultiple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ceil&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileWidth&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;tile&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// the obstacle group
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">group&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enableBody&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createMultiple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;box&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bringToTop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addBase&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// add the ground for the player to run on
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createPlayer&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// add the player to the game
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>&lt;code>Final create function&lt;/code>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">create&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileVelocity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">450&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1500&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileWidth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getImage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;tile&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileHeight&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getImage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;tile&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxHeight&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getImage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;box&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">height&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">backgroundColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;479cde&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">physics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startSystem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Phaser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Physics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ARCADE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">group&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enableBody&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createMultiple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ceil&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileWidth&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;tile&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">group&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enableBody&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createMultiple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;box&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bringToTop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addBase&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createPlayer&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cursors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keyboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createCursorKeys&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">events&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">loop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addObstacles&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="add-base">Add Base&lt;/h3>
&lt;p>Now our player will need a platform to run on. The ground is actually not going to move, so we can just set a fixed number of tiles based on the size of the screen. Let&amp;rsquo;s add the base.&lt;/p>
&lt;p>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">addBase&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// calculate how many tiles are needed
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">tilesNeeded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ceil&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileWidth&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// the tiles should be at the bottom of the screen
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileHeight&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">tilesNeeded&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// add one tile after the other
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileWidth&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">tile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getFirstDead&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">tile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// set the x and y coordinates
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">tile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">immovable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="create-the-player">Create the Player&lt;/h3>
&lt;p>Since the player has something to stand on now, we can go ahead and create the player.&lt;/p>
&lt;p>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">createPlayer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// spawn the player a to the left and a little above the ground
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sprite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileHeight&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;player&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// depends on the size of your sprite
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scale&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">anchor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// enable arcade physics on the player
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">physics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arcade&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// the player has to fall down once it jumps
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gravity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2200&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bounce&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">drag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">150&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// since it is a sprite sheet, you can set animations
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">walk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">animations&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;walk&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// play the walk animation at 20fps
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">animations&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">play&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;walk&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="add-the-obstacles">Add the Obstacles&lt;/h3>
&lt;p>Just having the player jump without anything to jump over would be pretty boring, so we&amp;rsquo;re going to add some boxes. In case you haven&amp;rsquo;t realized already, we haven&amp;rsquo;t given the player a velocity. This is because the player isn&amp;rsquo;t actually going to move, we can simply create the illusion of movement by giving the obstacles a velocity in the direction of the player.&lt;/p>
&lt;p>Also to keep things interesting, the height of the obstacles the player has to jump over is random and based on that the player can either do a single jump or a double jump. We&amp;rsquo;ll implement the jumping function later.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">addObstacles&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Randomly decide how tall the stack of boxes is going to be
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// maximum number of tiles that the player can jump over is 4
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">tilesNeeded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">// slowly increase the difficulty by increasing how often boxes spawn and how fast they move
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rate&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rate&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileVelocity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">675000&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rate&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Add the boxes to the game
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">tilesNeeded&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// we want the boxes to be created just outside the right side of the screen
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addBox&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">world&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">height&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileHeight&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxHeight&lt;/span> &lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The function above doesn&amp;rsquo;t actually add the boxes to the map, that&amp;rsquo;s done by &lt;code>addBox&lt;/code>, which creates a box at the given x and y coordinates.&lt;/p>
&lt;p>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">addBox&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// get the boxes that have already been moved outside the screen
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">tile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getFirstDead&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">tile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// set the velocity of the set of boxes
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">tile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">velocity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tileVelocity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">tile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">immovable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">tile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">checkWorldBounds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// destroy them when they go outside the screen
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">tile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">outOfBoundsKill&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="movement">Movement&lt;/h3>
&lt;p>Now we need to give the player a way to actually jump over the boxes when we press the UP arrow. This is taken care of in the &lt;code>update&lt;/code> function which can constantly check for input. We&amp;rsquo;ll also be implementing a double jump mechanism that we talked about earlier.
This isn&amp;rsquo;t a part of the original game, but makes it more interesting. We&amp;rsquo;ll also be checking for collisions between the other tiles and the player.If the player touches a box, the game is over.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">update&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// collide with the floor
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">physics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arcade&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">collide&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// collide with the boxes and call gameOver when the player hits a box
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">physics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arcade&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">collide&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">boxes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gameOver&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// implementing the double jump
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">onTheGround&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">touching&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">down&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// If the player is touching the ground, let him have 2 jumps
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">onTheGround&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Jump!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumps&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">upInputIsActive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">velocity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Reduce the number of available jumps if the jump input is released
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumping&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">upInputReleased&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumps&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jumping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>There are 2 more methods we need to implement, one for checking if the up arrow is held down, and one to check if it&amp;rsquo;s released.&lt;/p>
&lt;p>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// This function returns true when the player presses the &amp;#34;jump&amp;#34; control
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">upInputIsActive&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">duration&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">isActive&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">isActive&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keyboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">downDuration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Phaser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Keyboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">duration&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">isActive&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">activePointer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">justPressed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">duration&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1000&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">activePointer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">activePointer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">width&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">isActive&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="c1">// This function returns true when the player releases the &amp;#34;jump&amp;#34; control
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">upInputReleased&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">released&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">released&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keyboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">upDuration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Phaser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Keyboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UP&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">released&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">activePointer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">justReleased&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">released&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h1 id="game-over">Game Over&lt;/h1>
&lt;p>For the last part of our project, we need to do something when the player hits a box and the game is over. In this case since we don&amp;rsquo;t have a Start Screen we&amp;rsquo;ll just load up the game again, i.e &lt;code>main.js&lt;/code>
So put this line in &lt;code>gameOver&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;GameOver&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;!-- raw HTML omitted --></description></item><item><title>Dusk Player</title><link>https://home.aveek.io/blog/post/music-player/</link><pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/music-player/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/MusicPlayer">&lt;code>Music Player&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demo, Download it here - &lt;a href="https://github.com/Aveek-Saha/MusicPlayer/releases">&lt;code>Downloads&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The idea for this music player was to keep things simple. you just load all your audio files from your music player, and start listening. The player always keeps the focus on the music.
Apart from the essential music controls, like play, pause, skip and seek, there is a playlist menu so that you can quickly switch songs.
It is built on Electron and uses Howler for handling music playback. AngularJS and Bootstrap are used for the UI, and JSmediatags to retrieve the ID3 tags, like album art, artist and title.&lt;/p>
&lt;h1 id="using-the-player">Using the player&lt;/h1>
&lt;p>On starting the music player, you’ll see an option called folder in the top menu, click on it. Select the folder with all your music, and your set to go. the player will automatically load all the supported audio files into a playlist. It also stores the location of the directory you last opened, and it&amp;rsquo;ll load your music from there when you open it next.&lt;/p>
&lt;p>The UI is fairly intuitive, there are play pause and skip buttons. Clicking on the progress bar will seek playback to that position in the song. There is a volume slider to fine tune the volume. The hamburger menu button toggles the playlist. And the last button is to shuffle tracks.&lt;/p>
&lt;h1 id="implementation">Implementation&lt;/h1>
&lt;p>The entire implementation is too long, so I&amp;rsquo;ll just give an outline here. The full code is at &lt;a href="https://github.com/Aveek-Saha/MusicPlayer">&lt;code>Music Player&lt;/code>&lt;/a>&lt;/p>
&lt;p>The user selects the folder with music in it via Electron’s dialog module. This is used to open a directory selector, when a directory is selected it returns a path to that directory which is then passed to a function. This function then uses the path to scan the directory and store the paths of all the files with supported extensions in a playList array.
The path of the selected directory is stored in a file, which will be read in the future so that the user doesn&amp;rsquo;t have to select a directory everytime.&lt;/p>
&lt;p>The actual audio playback is handled through Howler, which provides us with methods like Play, Pause, Seek, Skip and volume adjustment. These methods are implemented in the Player object prototype.
The functions implemented are-&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">Player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">play&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Play the song at playlist[index]
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">pause&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Pause all audio playback
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">skip&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">direction&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// skip to the next/previous/random track,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// calls skipTo
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">skipTo&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// stop whatever song is playing and
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// play the song that has been skipped to
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">step&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// as the song is playing, change the timer value
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// and move the progress bar
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">formatTime&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">secs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// by default the time is in seconds,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// so convert it into mins:seconds format
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">volume&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// volume tuning
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">seek&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// move the song along to the place
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// the user clicked on the progressbar
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Most audio files have some kind of metadata attached to them in the form of media tags. This metadata includes things like Title, Artist, Album and Album art.&lt;/p>
&lt;p>These tags are read using JSmediatags using which we retrieve the name of the song, the artist and the album art. The album art is decoded from base64 and displayed as an image. If there are no media tags for a file, it simply displays the file name.&lt;/p>
&lt;h1 id="features">Features&lt;/h1>
&lt;ul>
&lt;li>Supports: mp3, opus, ogg, wav, aac, m4a, webm.&lt;/li>
&lt;li>Quickly switch tracks in the same folder, from the playlist button.&lt;/li>
&lt;li>Play tracks on shuffle.&lt;/li>
&lt;li>Loads music from the last selected directory.&lt;/li>
&lt;li>Fine tune the volume from the volume slider.&lt;/li>
&lt;li>Reads ID3 tags and displays the artist and album art (if they exist).&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>MEAN Todo app</title><link>https://home.aveek.io/blog/post/mean-todo-app/</link><pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/mean-todo-app/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/MEAN-todo-app">&lt;code>MEAN Todo app&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demoCheck it out here - &lt;a href="https://todo0.herokuapp.com/">&lt;code>Live demo&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The MEAN stack, for those of you that haven’t heard of it, is a free JavaScript software stack for building modern web applications. This stack consists of – MongoDB, Express, Angular, and NodeJS. MongoDB is a NoSQL database that is highly scalable. Express is a middle-ware library that deals with routing in this case. AngularJS is a front end JavaScript library for creating UI. NodeJS is a JavaScript run-time environment that executes JavaScript code outside the browser, it allows us to run JavaScript on the server.&lt;/p>
&lt;h1 id="crud-operations">CRUD Operations&lt;/h1>
&lt;p>At the heart of it all, what the app does is Create, Read, Update, and Delete documents in the database. The rest of the application simply provides an interface, both front end and back end to facilitate this. The Mongoose library has been used to interact with the MLabs MongoDB database.&lt;/p>
&lt;p>Using Express we set up the routing for the CRUD operations, using the get method for Reading the list of existing Todos.&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/api/todos&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;{&lt;/span>
&lt;span class="nx">Todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>The post method for Creating new Todos.&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/api/todos&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;{&lt;/span>
&lt;span class="nx">Todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">done&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;false&amp;#39;&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">Todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>The delete method for Deleting specific Todos. For the delete function we pass the ID of the todo to be deleted as a parameter.&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/api/todos/:todo_id&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;{&lt;/span>
&lt;span class="nx">Todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">remove&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">params&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">todo_id&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">Todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>On our front end, we have a counter that shows the number of tasks to do. This is found by simply counting the number of elements in the response by the get function. Below this is a list of todos, which have been fetched by querying the database for all documents in the todo collection. This is passed as an array to an Angular variable and we iterate through it to create the list of todos.&lt;/p>
&lt;p>Each todo in this list has its own unique id, which is automatically created in mongodb when a new document is inserted. There is a delete button next to the text content of each task. On pressing this, the id of the todo is passed as a parameter to the delete method for Deleting specific Todos, and it updates the list.&lt;/p>
&lt;p>There’s a form by which a user can enter a new task to do. On submitting this form, the text entered by the user is sent as a parameter to the route for the post method for Creating new Todos. This function in turn creates a new document in the database, and the list of todos is updated with the new task.&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>Bitcoin Price Tracker</title><link>https://home.aveek.io/blog/post/bitcoin-price-tracker/</link><pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/bitcoin-price-tracker/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/Bitcoin-price-tracker">&lt;code>Bitcoin Price Tracker&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demo, Download it here - &lt;a href="https://github.com/Aveek-Saha/Bitcoin-price-tracker/releases">&lt;code>Downloads&lt;/code>&lt;/a>&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This application was something of a test run, to get familiar with the Electron framework . For those of you that haven’t heard of it, Electron is a framework that allows you to build cross platform desktop apps with JavaScript, HTML, and CSS.&lt;/p>
&lt;p>Full disclosure, this was made by following a great tutorial by Gary Simon. Do check it out, he does a good job of explaining the basics and anyone with some experience in web development should be able to pick it up with no problem.&lt;/p>
&lt;h2 id="details">Details&lt;/h2>
&lt;p>I wont go into too much technical detail here, because the tutorial already does that far better than I could, but the basic idea is to make a simple desktop application for Linux, that notifies you when the Bitcoin price exceeds a limit set by you. Unfortunately, the notifications will only work in Linux and Mac OS, but not Windows because the notification system for non system apps was broken after the last update.&lt;/p>
&lt;p>The application uses axios to get the current bitcoin price from cryptocompare. Then we create a function called getBTC, which fetches the bitcoin price and then compares it to the value entered by the user. This function is executed every 10 seconds via setInterval. If the bitcoin price is found to be greater than the user value, a desktop notification is sent.&lt;/p>
&lt;p>The user enters the Price limit via another window, and the value entered by the user is sent back to the main window via the ipc.renderer.&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>E-commerce Website Template</title><link>https://home.aveek.io/blog/post/ecommerce-website-template/</link><pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/ecommerce-website-template/</guid><description>&lt;p>If you want the code for this project, fork this GitHub repo - &lt;a href="https://github.com/Aveek-Saha/ecommerce-website-template">&lt;code>E-commerce template&lt;/code>&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demo, check this out - &lt;a href="http://eshop.byethost22.com/">&lt;code>Demo&lt;/code>&lt;/a>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>A common thing that most of us on the internet have done, is shop online. The idea of spending your hard earned money online is as addictive and dopamine inducing to those that enjoy the same thing in a mall. This project is an attempt to create a template for a simple e-commerce site, without any payment capability.&lt;/p>
&lt;p>On loading the site, you can either login with an existing account or create a new one. Account details are stored in a SQL database, and passwords are hashed for security.&lt;/p>
&lt;h1 id="logging-in-as-a-user">Logging in as a User&lt;/h1>
&lt;p>Once logged in, you’ll be able to see all product listings along with the price of the product and a button to add the product to your cart. If you click on a product, It’ll take you to a Product detail page, displaying more information like a full product description and a list of dealers.&lt;/p>
&lt;p>On the nav bar, you can check how many items are in your cart, clicking on it will take you to a page with the breakdown of the current bill, you can remove items from here by deleting them, or you can change the quantity of any item in the cart. This page Displays your account details like, Name, address and phone number. you can proceed to checkout from here and place your order, this order is stored in an SQL database. Currently there is no way for a user to view the orders he’s already placed.&lt;/p>
&lt;p>There is also a messaging facility available, and you can enter the email of the user you want to message, and send messages back and forth from that user.&lt;/p>
&lt;h1 id="logging-in-as-an-admin">Logging in as an Admin&lt;/h1>
&lt;p>If you are logged in as an admin, you will have the option to create new products, and add their details.&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>Word Suggestion App</title><link>https://home.aveek.io/blog/post/word-suggestion-app/</link><pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/word-suggestion-app/</guid><description>&lt;p>We often find ourselves grasping at a word that’s on the tip of our tongue but we just can’t pin it down, or wanting to check the spelling of a word that we’re not sure of.&lt;/p>
&lt;p>Since this is such a common problem, I decided to use My front end knowledge and data structures to come up with a solution. This project has 2 parts.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h1 id="the-c-part">The C part:&lt;/h1>
&lt;p>I made a C program that uses a list of words, to build a trie, which is a kind of search tree. When this program runs, and an input word is given, it displays a list of words that are close or similar to it.
There is also a spell check mode that will display if a word is correctly spelled or not. This program also creates a text file of the most frequently spelt incorrect words. Once this was done, I moved on the the front end part.&lt;/p>
&lt;h1 id="the-web-interface">The web interface:&lt;/h1>
&lt;p>Using php’s exec function I piped the output of this program to a PHP array. This PHP file is then asynchronously called when the user presses “alt +h”. Then I added some CSS to make the whole thing look nice.&lt;/p>
&lt;h1 id="the-final-features-features-include">The final features features include:&lt;/h1>
&lt;p>Two modes of operation that can be toggled-
A word suggestion mode- Where the user can type in a partially completed word and the app will suggest predictions.
A spell check mode- Where the user can enter a word and check if the spelling is correct, if it is not the app also suggests words that may contain the correct spelling of the word that the user was trying to type.
The app keeps a track of the the 5 most frequently misspelt words
The word of the day (the most frequently incorrectly spelt word) can be seen from the spelling.php page
I used an Apache server to host this application.&lt;/p>
&lt;p>If you want the code for this project, fork this Github repo - &lt;a href="https://github.com/Aveek-Saha/Autocorrect-and-spellcheck-webapp">https://github.com/Aveek-Saha/Autocorrect-and-spellcheck-webapp&lt;/a> &lt;!-- raw HTML omitted -->
If you want to see a live demo, check this out – &lt;a href="https://autocorrect-and-spellcheck.herokuapp.com/">https://autocorrect-and-spellcheck.herokuapp.com/&lt;/a>
Note: For the live demo I’m taking the input directly from the word list in php by storing the txt file in an array, this is because the ‘exec’ function does not work on the server.&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title/><link>https://home.aveek.io/blog/post/attention-is-all-you-need/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/attention-is-all-you-need/</guid><description/></item><item><title/><link>https://home.aveek.io/blog/post/creating-npm-package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/creating-npm-package/</guid><description/></item><item><title/><link>https://home.aveek.io/blog/post/discord-bot-free-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/discord-bot-free-hosting/</guid><description/></item><item><title/><link>https://home.aveek.io/blog/post/gist-blog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/gist-blog/</guid><description/></item><item><title/><link>https://home.aveek.io/blog/post/graph-attention-networks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/graph-attention-networks/</guid><description/></item><item><title/><link>https://home.aveek.io/blog/post/graph-convolutional-networks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/graph-convolutional-networks/</guid><description/></item><item><title/><link>https://home.aveek.io/blog/post/graph-neural-networks-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/graph-neural-networks-intro/</guid><description/></item><item><title/><link>https://home.aveek.io/blog/post/online-chess-firebase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/post/online-chess-firebase/</guid><description/></item><item><title>About me</title><link>https://home.aveek.io/blog/page/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>aveek.s98@gmail.com (Aveek Saha)</author><guid>https://home.aveek.io/blog/page/about/</guid><description>&lt;p>I&amp;rsquo;m a Computer Science Engineering student and I am passionate about Full stack development, Machine Learning and Cloud Computing. I also work on IoT projects and I&amp;rsquo;m handy with microcontrollers.&lt;/p>
&lt;p>I love swimming and drawing as well. Be sure to check out some of my &lt;a href="https://www.behance.net/aveeks/">&lt;code>artwork&lt;/code>&lt;/a>.&lt;/p>
&lt;p>You can find out more about the things I make on my &lt;a href="https://home.aveek.io">Portfolio&lt;/a>&lt;/p></description></item></channel></rss>